
smart_egat_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed8  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08009008  08009008  00019008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d8  080094d8  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  080094d8  080094d8  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094d8  080094d8  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094dc  080094dc  000194dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080094e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002264  20000204  080096e4  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002468  080096e4  00022468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f387  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021cc  00000000  00000000  0002f5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a28  00000000  00000000  00031780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  000321a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003716  00000000  00000000  00032b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008017  00000000  00000000  0003626e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00017706  00000000  00000000  0003e285  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0005598b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037cc  00000000  00000000  00055a08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000204 	.word	0x20000204
 800014c:	00000000 	.word	0x00000000
 8000150:	08008ff0 	.word	0x08008ff0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000208 	.word	0x20000208
 800016c:	08008ff0 	.word	0x08008ff0

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bbc:	d1ed      	bne.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_f2iz>:
 8000fb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fc0:	d30f      	bcc.n	8000fe2 <__aeabi_f2iz+0x2a>
 8000fc2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fca:	d90d      	bls.n	8000fe8 <__aeabi_f2iz+0x30>
 8000fcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fd8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fdc:	bf18      	it	ne
 8000fde:	4240      	negne	r0, r0
 8000fe0:	4770      	bx	lr
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	4770      	bx	lr
 8000fe8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_f2iz+0x3a>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d105      	bne.n	8000ffe <__aeabi_f2iz+0x46>
 8000ff2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ff6:	bf08      	it	eq
 8000ff8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr

08001004 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f103 0208 	add.w	r2, r3, #8
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f103 0208 	add.w	r2, r3, #8
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f103 0208 	add.w	r2, r3, #8
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800105a:	b480      	push	{r7}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d103      	bne.n	800107a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e00c      	b.n	8001094 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3308      	adds	r3, #8
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e002      	b.n	8001088 <vListInsert+0x2e>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	429a      	cmp	r2, r3
 8001092:	d2f6      	bcs.n	8001082 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6892      	ldr	r2, [r2, #8]
 80010e0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	6852      	ldr	r2, [r2, #4]
 80010ea:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d103      	bne.n	80010fe <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001126:	2301      	movs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d063      	beq.n	80011fc <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001138:	2b00      	cmp	r3, #0
 800113a:	d05f      	beq.n	80011fc <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001144:	2000      	movs	r0, #0
 8001146:	fba2 1203 	umull	r1, r2, r2, r3
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	f04f 0400 	mov.w	r4, #0
 8001152:	0013      	movs	r3, r2
 8001154:	2400      	movs	r4, #0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d000      	beq.n	800115c <xQueueGenericReset+0x40>
 800115a:	2001      	movs	r0, #1
 800115c:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 800115e:	2b00      	cmp	r3, #0
 8001160:	d14c      	bne.n	80011fc <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 8001162:	f001 faeb 	bl	800273c <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001172:	fb01 f303 	mul.w	r3, r1, r3
 8001176:	441a      	add	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2200      	movs	r2, #0
 8001180:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001192:	3b01      	subs	r3, #1
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001198:	fb01 f303 	mul.w	r3, r1, r3
 800119c:	441a      	add	r2, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	22ff      	movs	r2, #255	; 0xff
 80011a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	22ff      	movs	r2, #255	; 0xff
 80011ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d114      	bne.n	80011e2 <xQueueGenericReset+0xc6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d01a      	beq.n	80011f6 <xQueueGenericReset+0xda>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	3310      	adds	r3, #16
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 ffcd 	bl	8002164 <xTaskRemoveFromEventList>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d012      	beq.n	80011f6 <xQueueGenericReset+0xda>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <xQueueGenericReset+0xf0>)
 80011d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	f3bf 8f4f 	dsb	sy
 80011dc:	f3bf 8f6f 	isb	sy
 80011e0:	e009      	b.n	80011f6 <xQueueGenericReset+0xda>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3310      	adds	r3, #16
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff0c 	bl	8001004 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	3324      	adds	r3, #36	; 0x24
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff07 	bl	8001004 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 80011f6:	f001 fab9 	bl	800276c <vPortExitCritical>
 80011fa:	e001      	b.n	8001200 <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001200:	68fb      	ldr	r3, [r7, #12]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	bf00      	nop
 800120c:	e000ed04 	.word	0xe000ed04

08001210 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b08b      	sub	sp, #44	; 0x2c
 8001214:	af02      	add	r7, sp, #8
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d033      	beq.n	8001290 <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001228:	2000      	movs	r0, #0
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	fba2 1203 	umull	r1, r2, r2, r3
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	f04f 0400 	mov.w	r4, #0
 800123a:	0013      	movs	r3, r2
 800123c:	2400      	movs	r4, #0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d000      	beq.n	8001244 <xQueueGenericCreate+0x34>
 8001242:	2001      	movs	r0, #1
 8001244:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001246:	2b00      	cmp	r3, #0
 8001248:	d122      	bne.n	8001290 <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001252:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8001256:	d81b      	bhi.n	8001290 <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	fb02 f303 	mul.w	r3, r2, r3
 8001260:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	3348      	adds	r3, #72	; 0x48
 8001266:	4618      	mov	r0, r3
 8001268:	f001 faf8 	bl	800285c <pvPortMalloc>
 800126c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00d      	beq.n	8001290 <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3348      	adds	r3, #72	; 0x48
 800127c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	4613      	mov	r3, r2
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 f805 	bl	800129a <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001290:	69fb      	ldr	r3, [r7, #28]
    }
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}

0800129a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e002      	b.n	80012bc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80012c8:	2101      	movs	r1, #1
 80012ca:	69b8      	ldr	r0, [r7, #24]
 80012cc:	f7ff ff26 	bl	800111c <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80012ee:	f001 fa25 	bl	800273c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d302      	bcc.n	8001304 <xQueueGenericSend+0x2c>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d129      	bne.n	8001358 <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	6a38      	ldr	r0, [r7, #32]
 800130a:	f000 fa23 	bl	8001754 <prvCopyDataToQueue>
 800130e:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	2b00      	cmp	r3, #0
 8001316:	d010      	beq.n	800133a <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001318:	6a3b      	ldr	r3, [r7, #32]
 800131a:	3324      	adds	r3, #36	; 0x24
 800131c:	4618      	mov	r0, r3
 800131e:	f000 ff21 	bl	8002164 <xTaskRemoveFromEventList>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001328:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <xQueueGenericSend+0x150>)
 800132a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f3bf 8f4f 	dsb	sy
 8001334:	f3bf 8f6f 	isb	sy
 8001338:	e00a      	b.n	8001350 <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d007      	beq.n	8001350 <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001340:	4b39      	ldr	r3, [pc, #228]	; (8001428 <xQueueGenericSend+0x150>)
 8001342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	f3bf 8f4f 	dsb	sy
 800134c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001350:	f001 fa0c 	bl	800276c <vPortExitCritical>
                return pdPASS;
 8001354:	2301      	movs	r3, #1
 8001356:	e063      	b.n	8001420 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d103      	bne.n	8001366 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800135e:	f001 fa05 	bl	800276c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001362:	2300      	movs	r3, #0
 8001364:	e05c      	b.n	8001420 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	2b00      	cmp	r3, #0
 800136a:	d106      	bne.n	800137a <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4618      	mov	r0, r3
 8001372:	f000 ffbf 	bl	80022f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001376:	2301      	movs	r3, #1
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800137a:	f001 f9f7 	bl	800276c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800137e:	f000 fc95 	bl	8001cac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001382:	f001 f9db 	bl	800273c <vPortEnterCritical>
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800138c:	b25b      	sxtb	r3, r3
 800138e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001392:	d103      	bne.n	800139c <xQueueGenericSend+0xc4>
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d103      	bne.n	80013b2 <xQueueGenericSend+0xda>
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013b2:	f001 f9db 	bl	800276c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013b6:	1d3a      	adds	r2, r7, #4
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 ffae 	bl	8002320 <xTaskCheckForTimeOut>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d124      	bne.n	8001414 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013ca:	6a38      	ldr	r0, [r7, #32]
 80013cc:	f000 faac 	bl	8001928 <prvIsQueueFull>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d018      	beq.n	8001408 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	3310      	adds	r3, #16
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 feaa 	bl	8002138 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80013e4:	6a38      	ldr	r0, [r7, #32]
 80013e6:	f000 fa37 	bl	8001858 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80013ea:	f000 fc6d 	bl	8001cc8 <xTaskResumeAll>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f47f af7c 	bne.w	80012ee <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <xQueueGenericSend+0x150>)
 80013f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	f3bf 8f4f 	dsb	sy
 8001402:	f3bf 8f6f 	isb	sy
 8001406:	e772      	b.n	80012ee <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001408:	6a38      	ldr	r0, [r7, #32]
 800140a:	f000 fa25 	bl	8001858 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800140e:	f000 fc5b 	bl	8001cc8 <xTaskResumeAll>
 8001412:	e76c      	b.n	80012ee <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001414:	6a38      	ldr	r0, [r7, #32]
 8001416:	f000 fa1f 	bl	8001858 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800141a:	f000 fc55 	bl	8001cc8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800141e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001420:	4618      	mov	r0, r3
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	e000ed04 	.word	0xe000ed04

0800142c <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	623b      	str	r3, [r7, #32]

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800143a:	f3ef 8211 	mrs	r2, BASEPRI
 800143e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001442:	f383 8811 	msr	BASEPRI, r3
 8001446:	f3bf 8f6f 	isb	sy
 800144a:	f3bf 8f4f 	dsb	sy
 800144e:	613a      	str	r2, [r7, #16]
 8001450:	60fb      	str	r3, [r7, #12]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001452:	693b      	ldr	r3, [r7, #16]
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001454:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	429a      	cmp	r2, r3
 8001464:	d229      	bcs.n	80014ba <xQueueGiveFromISR+0x8e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800146c:	75fb      	strb	r3, [r7, #23]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001476:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800147a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147e:	d112      	bne.n	80014a6 <xQueueGiveFromISR+0x7a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	2b00      	cmp	r3, #0
 8001486:	d015      	beq.n	80014b4 <xQueueGiveFromISR+0x88>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	3324      	adds	r3, #36	; 0x24
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fe69 	bl	8002164 <xTaskRemoveFromEventList>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00d      	beq.n	80014b4 <xQueueGiveFromISR+0x88>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00a      	beq.n	80014b4 <xQueueGiveFromISR+0x88>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e006      	b.n	80014b4 <xQueueGiveFromISR+0x88>
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	3301      	adds	r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	b25a      	sxtb	r2, r3
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80014b4:	2301      	movs	r3, #1
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
 80014b8:	e001      	b.n	80014be <xQueueGiveFromISR+0x92>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80014e8:	f001 f928 	bl	800273c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d01f      	beq.n	8001538 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6a38      	ldr	r0, [r7, #32]
 80014fc:	f000 f986 	bl	800180c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	1e5a      	subs	r2, r3, #1
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00f      	beq.n	8001530 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	3310      	adds	r3, #16
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fe25 	bl	8002164 <xTaskRemoveFromEventList>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001520:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <xQueueReceive+0x140>)
 8001522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001530:	f001 f91c 	bl	800276c <vPortExitCritical>
                return pdPASS;
 8001534:	2301      	movs	r3, #1
 8001536:	e069      	b.n	800160c <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d103      	bne.n	8001546 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800153e:	f001 f915 	bl	800276c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001542:	2300      	movs	r3, #0
 8001544:	e062      	b.n	800160c <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	2b00      	cmp	r3, #0
 800154a:	d106      	bne.n	800155a <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fecf 	bl	80022f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001556:	2301      	movs	r3, #1
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800155a:	f001 f907 	bl	800276c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800155e:	f000 fba5 	bl	8001cac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001562:	f001 f8eb 	bl	800273c <vPortEnterCritical>
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800156c:	b25b      	sxtb	r3, r3
 800156e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001572:	d103      	bne.n	800157c <xQueueReceive+0xa8>
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001582:	b25b      	sxtb	r3, r3
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d103      	bne.n	8001592 <xQueueReceive+0xbe>
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001592:	f001 f8eb 	bl	800276c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001596:	1d3a      	adds	r2, r7, #4
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 febe 	bl	8002320 <xTaskCheckForTimeOut>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d123      	bne.n	80015f2 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80015aa:	6a38      	ldr	r0, [r7, #32]
 80015ac:	f000 f9a6 	bl	80018fc <prvIsQueueEmpty>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d017      	beq.n	80015e6 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	3324      	adds	r3, #36	; 0x24
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fdba 	bl	8002138 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80015c4:	6a38      	ldr	r0, [r7, #32]
 80015c6:	f000 f947 	bl	8001858 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80015ca:	f000 fb7d 	bl	8001cc8 <xTaskResumeAll>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d189      	bne.n	80014e8 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <xQueueReceive+0x140>)
 80015d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	f3bf 8f4f 	dsb	sy
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	e780      	b.n	80014e8 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80015e6:	6a38      	ldr	r0, [r7, #32]
 80015e8:	f000 f936 	bl	8001858 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80015ec:	f000 fb6c 	bl	8001cc8 <xTaskResumeAll>
 80015f0:	e77a      	b.n	80014e8 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80015f2:	6a38      	ldr	r0, [r7, #32]
 80015f4:	f000 f930 	bl	8001858 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80015f8:	f000 fb66 	bl	8001cc8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80015fc:	6a38      	ldr	r0, [r7, #32]
 80015fe:	f000 f97d 	bl	80018fc <prvIsQueueEmpty>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	f43f af6f 	beq.w	80014e8 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800160a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800160c:	4618      	mov	r0, r3
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	e000ed04 	.word	0xe000ed04

08001618 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	61bb      	str	r3, [r7, #24]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800162a:	f001 f887 	bl	800273c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001632:	617b      	str	r3, [r7, #20]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01b      	beq.n	8001672 <xQueueSemaphoreTake+0x5a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	1e5a      	subs	r2, r3, #1
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	639a      	str	r2, [r3, #56]	; 0x38
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00f      	beq.n	800166a <xQueueSemaphoreTake+0x52>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	3310      	adds	r3, #16
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fd88 	bl	8002164 <xTaskRemoveFromEventList>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <xQueueSemaphoreTake+0x52>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800165a:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <xQueueSemaphoreTake+0x138>)
 800165c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	f3bf 8f4f 	dsb	sy
 8001666:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800166a:	f001 f87f 	bl	800276c <vPortExitCritical>
                return pdPASS;
 800166e:	2301      	movs	r3, #1
 8001670:	e069      	b.n	8001746 <xQueueSemaphoreTake+0x12e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d103      	bne.n	8001680 <xQueueSemaphoreTake+0x68>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001678:	f001 f878 	bl	800276c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800167c:	2300      	movs	r3, #0
 800167e:	e062      	b.n	8001746 <xQueueSemaphoreTake+0x12e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <xQueueSemaphoreTake+0x7c>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fe32 	bl	80022f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001690:	2301      	movs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001694:	f001 f86a 	bl	800276c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001698:	f000 fb08 	bl	8001cac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800169c:	f001 f84e 	bl	800273c <vPortEnterCritical>
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d103      	bne.n	80016b6 <xQueueSemaphoreTake+0x9e>
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c2:	d103      	bne.n	80016cc <xQueueSemaphoreTake+0xb4>
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016cc:	f001 f84e 	bl	800276c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016d0:	463a      	mov	r2, r7
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fe21 	bl	8002320 <xTaskCheckForTimeOut>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d123      	bne.n	800172c <xQueueSemaphoreTake+0x114>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016e4:	69b8      	ldr	r0, [r7, #24]
 80016e6:	f000 f909 	bl	80018fc <prvIsQueueEmpty>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d017      	beq.n	8001720 <xQueueSemaphoreTake+0x108>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	3324      	adds	r3, #36	; 0x24
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fd1d 	bl	8002138 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80016fe:	69b8      	ldr	r0, [r7, #24]
 8001700:	f000 f8aa 	bl	8001858 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001704:	f000 fae0 	bl	8001cc8 <xTaskResumeAll>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d18d      	bne.n	800162a <xQueueSemaphoreTake+0x12>
                {
                    portYIELD_WITHIN_API();
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <xQueueSemaphoreTake+0x138>)
 8001710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	f3bf 8f4f 	dsb	sy
 800171a:	f3bf 8f6f 	isb	sy
 800171e:	e784      	b.n	800162a <xQueueSemaphoreTake+0x12>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001720:	69b8      	ldr	r0, [r7, #24]
 8001722:	f000 f899 	bl	8001858 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001726:	f000 facf 	bl	8001cc8 <xTaskResumeAll>
 800172a:	e77e      	b.n	800162a <xQueueSemaphoreTake+0x12>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800172c:	69b8      	ldr	r0, [r7, #24]
 800172e:	f000 f893 	bl	8001858 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001732:	f000 fac9 	bl	8001cc8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001736:	69b8      	ldr	r0, [r7, #24]
 8001738:	f000 f8e0 	bl	80018fc <prvIsQueueEmpty>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	f43f af73 	beq.w	800162a <xQueueSemaphoreTake+0x12>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001744:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001746:	4618      	mov	r0, r3
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000ed04 	.word	0xe000ed04

08001754 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	2b00      	cmp	r3, #0
 8001770:	d043      	beq.n	80017fa <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d119      	bne.n	80017ac <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6858      	ldr	r0, [r3, #4]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	461a      	mov	r2, r3
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	f004 f8b8 	bl	80058f8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	441a      	add	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d32b      	bcc.n	80017fa <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	e026      	b.n	80017fa <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	68d8      	ldr	r0, [r3, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	461a      	mov	r2, r3
 80017b6:	68b9      	ldr	r1, [r7, #8]
 80017b8:	f004 f89e 	bl	80058f8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	425b      	negs	r3, r3
 80017c6:	441a      	add	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	425b      	negs	r3, r3
 80017e2:	441a      	add	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d105      	bne.n	80017fa <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001802:	693b      	ldr	r3, [r7, #16]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	2b00      	cmp	r3, #0
 800181c:	d018      	beq.n	8001850 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	441a      	add	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	d303      	bcc.n	8001840 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68d9      	ldr	r1, [r3, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	461a      	mov	r2, r3
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f004 f854 	bl	80058f8 <memcpy>
    }
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001860:	f000 ff6c 	bl	800273c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800186a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800186c:	e011      	b.n	8001892 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	2b00      	cmp	r3, #0
 8001874:	d012      	beq.n	800189c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3324      	adds	r3, #36	; 0x24
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fc72 	bl	8002164 <xTaskRemoveFromEventList>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001886:	f000 fd95 	bl	80023b4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	3b01      	subs	r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	2b00      	cmp	r3, #0
 8001898:	dce9      	bgt.n	800186e <prvUnlockQueue+0x16>
 800189a:	e000      	b.n	800189e <prvUnlockQueue+0x46>
                        break;
 800189c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	22ff      	movs	r2, #255	; 0xff
 80018a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80018a6:	f000 ff61 	bl	800276c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80018aa:	f000 ff47 	bl	800273c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018b4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018b6:	e011      	b.n	80018dc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d012      	beq.n	80018e6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3310      	adds	r3, #16
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fc4d 	bl	8002164 <xTaskRemoveFromEventList>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80018d0:	f000 fd70 	bl	80023b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dce9      	bgt.n	80018b8 <prvUnlockQueue+0x60>
 80018e4:	e000      	b.n	80018e8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80018e6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	22ff      	movs	r2, #255	; 0xff
 80018ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80018f0:	f000 ff3c 	bl	800276c <vPortExitCritical>
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001904:	f000 ff1a 	bl	800273c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001910:	2301      	movs	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e001      	b.n	800191a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800191a:	f000 ff27 	bl	800276c <vPortExitCritical>

    return xReturn;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001930:	f000 ff04 	bl	800273c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193c:	429a      	cmp	r2, r3
 800193e:	d102      	bne.n	8001946 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001940:	2301      	movs	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e001      	b.n	800194a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800194a:	f000 ff0f 	bl	800276c <vPortExitCritical>

    return xReturn;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	; 0x30
 800195c:	af04      	add	r7, sp, #16
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4618      	mov	r0, r3
 800196e:	f000 ff75 	bl	800285c <pvPortMalloc>
 8001972:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00e      	beq.n	8001998 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800197a:	204c      	movs	r0, #76	; 0x4c
 800197c:	f000 ff6e 	bl	800285c <pvPortMalloc>
 8001980:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	631a      	str	r2, [r3, #48]	; 0x30
 800198e:	e005      	b.n	800199c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8001990:	6978      	ldr	r0, [r7, #20]
 8001992:	f001 f811 	bl	80029b8 <vPortFree>
 8001996:	e001      	b.n	800199c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d013      	beq.n	80019ca <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019a2:	88fa      	ldrh	r2, [r7, #6]
 80019a4:	2300      	movs	r3, #0
 80019a6:	9303      	str	r3, [sp, #12]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f80e 	bl	80019da <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80019be:	69f8      	ldr	r0, [r7, #28]
 80019c0:	f000 f884 	bl	8001acc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	e002      	b.n	80019d0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80019d0:	69bb      	ldr	r3, [r7, #24]
    }
 80019d2:	4618      	mov	r0, r3
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019f2:	3b01      	subs	r3, #1
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	f023 0307 	bic.w	r3, r3, #7
 8001a00:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01f      	beq.n	8001a48 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e012      	b.n	8001a34 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	4413      	add	r3, r2
 8001a14:	7819      	ldrb	r1, [r3, #0]
 8001a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3334      	adds	r3, #52	; 0x34
 8001a1e:	460a      	mov	r2, r1
 8001a20:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	4413      	add	r3, r2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b0f      	cmp	r3, #15
 8001a38:	d9e9      	bls.n	8001a0e <prvInitialiseNewTask+0x34>
 8001a3a:	e000      	b.n	8001a3e <prvInitialiseNewTask+0x64>
            {
                break;
 8001a3c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a46:	e003      	b.n	8001a50 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d901      	bls.n	8001a5a <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a56:	2304      	movs	r3, #4
 8001a58:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	6a3a      	ldr	r2, [r7, #32]
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a62:	3304      	adds	r3, #4
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff faec 	bl	8001042 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fae7 	bl	8001042 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a78:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f1c3 0205 	rsb	r2, r3, #5
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	3344      	adds	r3, #68	; 0x44
 8001a8e:	2204      	movs	r2, #4
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 ff3b 	bl	800590e <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	3348      	adds	r3, #72	; 0x48
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 ff34 	bl	800590e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	68f9      	ldr	r1, [r7, #12]
 8001aaa:	6938      	ldr	r0, [r7, #16]
 8001aac:	f000 fdbc 	bl	8002628 <pxPortInitialiseStack>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001ad4:	f000 fe32 	bl	800273c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001ad8:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <prvAddNewTaskToReadyList+0x108>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a3d      	ldr	r2, [pc, #244]	; (8001bd4 <prvAddNewTaskToReadyList+0x108>)
 8001ae0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <prvAddNewTaskToReadyList+0x10c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001aea:	4a3b      	ldr	r2, [pc, #236]	; (8001bd8 <prvAddNewTaskToReadyList+0x10c>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <prvAddNewTaskToReadyList+0x108>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d110      	bne.n	8001b1a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001af8:	f000 fc80 	bl	80023fc <prvInitialiseTaskLists>
 8001afc:	e00d      	b.n	8001b1a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001afe:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <prvAddNewTaskToReadyList+0x110>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <prvAddNewTaskToReadyList+0x10c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d802      	bhi.n	8001b1a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b14:	4a30      	ldr	r2, [pc, #192]	; (8001bd8 <prvAddNewTaskToReadyList+0x10c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <prvAddNewTaskToReadyList+0x114>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a2f      	ldr	r2, [pc, #188]	; (8001be0 <prvAddNewTaskToReadyList+0x114>)
 8001b22:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	2201      	movs	r2, #1
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <prvAddNewTaskToReadyList+0x118>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <prvAddNewTaskToReadyList+0x118>)
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3a:	492b      	ldr	r1, [pc, #172]	; (8001be8 <prvAddNewTaskToReadyList+0x11c>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	3304      	adds	r3, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	3204      	adds	r2, #4
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	1d1a      	adds	r2, r3, #4
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <prvAddNewTaskToReadyList+0x11c>)
 8001b7a:	441a      	add	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b84:	4918      	ldr	r1, [pc, #96]	; (8001be8 <prvAddNewTaskToReadyList+0x11c>)
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1c59      	adds	r1, r3, #1
 8001b94:	4814      	ldr	r0, [pc, #80]	; (8001be8 <prvAddNewTaskToReadyList+0x11c>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4403      	add	r3, r0
 8001ba0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001ba2:	f000 fde3 	bl	800276c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <prvAddNewTaskToReadyList+0x110>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00e      	beq.n	8001bcc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <prvAddNewTaskToReadyList+0x10c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <prvAddNewTaskToReadyList+0x120>)
 8001bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200002f8 	.word	0x200002f8
 8001bd8:	20000220 	.word	0x20000220
 8001bdc:	20000304 	.word	0x20000304
 8001be0:	20000314 	.word	0x20000314
 8001be4:	20000300 	.word	0x20000300
 8001be8:	20000224 	.word	0x20000224
 8001bec:	e000ed04 	.word	0xe000ed04

08001bf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8001c02:	f000 f853 	bl	8001cac <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c06:	2100      	movs	r1, #0
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 fc8d 	bl	8002528 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001c0e:	f000 f85b 	bl	8001cc8 <xTaskResumeAll>
 8001c12:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <vTaskDelay+0x44>)
 8001c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f3bf 8f4f 	dsb	sy
 8001c26:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000ed04 	.word	0xe000ed04

08001c38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <vTaskStartScheduler+0x58>)
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	2300      	movs	r3, #0
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2300      	movs	r3, #0
 8001c48:	2280      	movs	r2, #128	; 0x80
 8001c4a:	4912      	ldr	r1, [pc, #72]	; (8001c94 <vTaskStartScheduler+0x5c>)
 8001c4c:	4812      	ldr	r0, [pc, #72]	; (8001c98 <vTaskStartScheduler+0x60>)
 8001c4e:	f7ff fe83 	bl	8001958 <xTaskCreate>
 8001c52:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d114      	bne.n	8001c84 <vTaskStartScheduler+0x4c>
        __asm volatile
 8001c5a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
 8001c6a:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <vTaskStartScheduler+0x64>)
 8001c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c72:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <vTaskStartScheduler+0x68>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <vTaskStartScheduler+0x6c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001c80:	f000 fd3c 	bl	80026fc <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <vTaskStartScheduler+0x70>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000031c 	.word	0x2000031c
 8001c94:	08009008 	.word	0x08009008
 8001c98:	080023cd 	.word	0x080023cd
 8001c9c:	20000318 	.word	0x20000318
 8001ca0:	20000304 	.word	0x20000304
 8001ca4:	200002fc 	.word	0x200002fc
 8001ca8:	20000000 	.word	0x20000000

08001cac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <vTaskSuspendAll+0x18>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <vTaskSuspendAll+0x18>)
 8001cb8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000320 	.word	0x20000320

08001cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001cd6:	f000 fd31 	bl	800273c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001cda:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <xTaskResumeAll+0x1b4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	4a66      	ldr	r2, [pc, #408]	; (8001e7c <xTaskResumeAll+0x1b4>)
 8001ce2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ce4:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <xTaskResumeAll+0x1b4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f040 80c0 	bne.w	8001e6e <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001cee:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <xTaskResumeAll+0x1b8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80bb 	beq.w	8001e6e <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cf8:	e08a      	b.n	8001e10 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cfa:	4b62      	ldr	r3, [pc, #392]	; (8001e84 <xTaskResumeAll+0x1bc>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	6a12      	ldr	r2, [r2, #32]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	69d2      	ldr	r2, [r2, #28]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3318      	adds	r3, #24
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d103      	bne.n	8001d30 <xTaskResumeAll+0x68>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	6a1a      	ldr	r2, [r3, #32]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2200      	movs	r2, #0
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1e5a      	subs	r2, r3, #1
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	68d2      	ldr	r2, [r2, #12]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	6892      	ldr	r2, [r2, #8]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3304      	adds	r3, #4
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d103      	bne.n	8001d6e <xTaskResumeAll+0xa6>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	2201      	movs	r2, #1
 8001d84:	409a      	lsls	r2, r3
 8001d86:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <xTaskResumeAll+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	4a3e      	ldr	r2, [pc, #248]	; (8001e88 <xTaskResumeAll+0x1c0>)
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d94:	493d      	ldr	r1, [pc, #244]	; (8001e8c <xTaskResumeAll+0x1c4>)
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3304      	adds	r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	3204      	adds	r2, #4
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	1d1a      	adds	r2, r3, #4
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4a2e      	ldr	r2, [pc, #184]	; (8001e8c <xTaskResumeAll+0x1c4>)
 8001dd4:	441a      	add	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	615a      	str	r2, [r3, #20]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dde:	492b      	ldr	r1, [pc, #172]	; (8001e8c <xTaskResumeAll+0x1c4>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	1c59      	adds	r1, r3, #1
 8001dee:	4827      	ldr	r0, [pc, #156]	; (8001e8c <xTaskResumeAll+0x1c4>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4403      	add	r3, r0
 8001dfa:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <xTaskResumeAll+0x1c8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d302      	bcc.n	8001e10 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <xTaskResumeAll+0x1cc>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <xTaskResumeAll+0x1bc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f47f af70 	bne.w	8001cfa <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001e20:	f000 fb68 	bl	80024f4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <xTaskResumeAll+0x1d0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001e30:	f000 f836 	bl	8001ea0 <xTaskIncrementTick>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <xTaskResumeAll+0x1cc>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f1      	bne.n	8001e30 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <xTaskResumeAll+0x1d0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <xTaskResumeAll+0x1cc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <xTaskResumeAll+0x1d4>)
 8001e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001e6e:	f000 fc7d 	bl	800276c <vPortExitCritical>

    return xAlreadyYielded;
 8001e72:	693b      	ldr	r3, [r7, #16]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000320 	.word	0x20000320
 8001e80:	200002f8 	.word	0x200002f8
 8001e84:	200002b8 	.word	0x200002b8
 8001e88:	20000300 	.word	0x20000300
 8001e8c:	20000224 	.word	0x20000224
 8001e90:	20000220 	.word	0x20000220
 8001e94:	2000030c 	.word	0x2000030c
 8001e98:	20000308 	.word	0x20000308
 8001e9c:	e000ed04 	.word	0xe000ed04

08001ea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eaa:	4b75      	ldr	r3, [pc, #468]	; (8002080 <xTaskIncrementTick+0x1e0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80dc 	bne.w	800206c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001eb4:	4b73      	ldr	r3, [pc, #460]	; (8002084 <xTaskIncrementTick+0x1e4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001ebc:	4a71      	ldr	r2, [pc, #452]	; (8002084 <xTaskIncrementTick+0x1e4>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d110      	bne.n	8001eea <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001ec8:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <xTaskIncrementTick+0x1e8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	4b6f      	ldr	r3, [pc, #444]	; (800208c <xTaskIncrementTick+0x1ec>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6d      	ldr	r2, [pc, #436]	; (8002088 <xTaskIncrementTick+0x1e8>)
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4a6d      	ldr	r2, [pc, #436]	; (800208c <xTaskIncrementTick+0x1ec>)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b6c      	ldr	r3, [pc, #432]	; (8002090 <xTaskIncrementTick+0x1f0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	4a6b      	ldr	r2, [pc, #428]	; (8002090 <xTaskIncrementTick+0x1f0>)
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	f000 fb05 	bl	80024f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001eea:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <xTaskIncrementTick+0x1f4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f0c0 80a6 	bcc.w	8002042 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ef6:	4b64      	ldr	r3, [pc, #400]	; (8002088 <xTaskIncrementTick+0x1e8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f00:	4b64      	ldr	r3, [pc, #400]	; (8002094 <xTaskIncrementTick+0x1f4>)
 8001f02:	f04f 32ff 	mov.w	r2, #4294967295
 8001f06:	601a      	str	r2, [r3, #0]
                    break;
 8001f08:	e09b      	b.n	8002042 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f0a:	4b5f      	ldr	r3, [pc, #380]	; (8002088 <xTaskIncrementTick+0x1e8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d203      	bcs.n	8001f2a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001f22:	4a5c      	ldr	r2, [pc, #368]	; (8002094 <xTaskIncrementTick+0x1f4>)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001f28:	e08b      	b.n	8002042 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68d2      	ldr	r2, [r2, #12]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	6892      	ldr	r2, [r2, #8]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d103      	bne.n	8001f58 <xTaskIncrementTick+0xb8>
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01e      	beq.n	8001fae <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	6a12      	ldr	r2, [r2, #32]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	69d2      	ldr	r2, [r2, #28]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	3318      	adds	r3, #24
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d103      	bne.n	8001f9e <xTaskIncrementTick+0xfe>
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	4b38      	ldr	r3, [pc, #224]	; (8002098 <xTaskIncrementTick+0x1f8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	4a36      	ldr	r2, [pc, #216]	; (8002098 <xTaskIncrementTick+0x1f8>)
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc4:	4935      	ldr	r1, [pc, #212]	; (800209c <xTaskIncrementTick+0x1fc>)
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	3204      	adds	r2, #4
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1d1a      	adds	r2, r3, #4
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4a26      	ldr	r2, [pc, #152]	; (800209c <xTaskIncrementTick+0x1fc>)
 8002004:	441a      	add	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	615a      	str	r2, [r3, #20]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200e:	4923      	ldr	r1, [pc, #140]	; (800209c <xTaskIncrementTick+0x1fc>)
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1c59      	adds	r1, r3, #1
 800201e:	481f      	ldr	r0, [pc, #124]	; (800209c <xTaskIncrementTick+0x1fc>)
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4403      	add	r3, r0
 800202a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <xTaskIncrementTick+0x200>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	429a      	cmp	r2, r3
 8002038:	f4ff af5d 	bcc.w	8001ef6 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 800203c:	2301      	movs	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002040:	e759      	b.n	8001ef6 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <xTaskIncrementTick+0x200>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002048:	4914      	ldr	r1, [pc, #80]	; (800209c <xTaskIncrementTick+0x1fc>)
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d901      	bls.n	800205e <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 800205a:	2301      	movs	r3, #1
 800205c:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <xTaskIncrementTick+0x204>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8002066:	2301      	movs	r3, #1
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e004      	b.n	8002076 <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <xTaskIncrementTick+0x208>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <xTaskIncrementTick+0x208>)
 8002074:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002076:	69fb      	ldr	r3, [r7, #28]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000320 	.word	0x20000320
 8002084:	200002fc 	.word	0x200002fc
 8002088:	200002b0 	.word	0x200002b0
 800208c:	200002b4 	.word	0x200002b4
 8002090:	20000310 	.word	0x20000310
 8002094:	20000318 	.word	0x20000318
 8002098:	20000300 	.word	0x20000300
 800209c:	20000224 	.word	0x20000224
 80020a0:	20000220 	.word	0x20000220
 80020a4:	2000030c 	.word	0x2000030c
 80020a8:	20000308 	.word	0x20000308

080020ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <vTaskSwitchContext+0x78>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <vTaskSwitchContext+0x7c>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80020c0:	e02a      	b.n	8002118 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <vTaskSwitchContext+0x7c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <vTaskSwitchContext+0x80>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f1c3 031f 	rsb	r3, r3, #31
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4a11      	ldr	r2, [pc, #68]	; (8002130 <vTaskSwitchContext+0x84>)
 80020ea:	4413      	add	r3, r2
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	3308      	adds	r3, #8
 8002100:	429a      	cmp	r2, r3
 8002102:	d104      	bne.n	800210e <vTaskSwitchContext+0x62>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <vTaskSwitchContext+0x88>)
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000320 	.word	0x20000320
 8002128:	2000030c 	.word	0x2000030c
 800212c:	20000300 	.word	0x20000300
 8002130:	20000224 	.word	0x20000224
 8002134:	20000220 	.word	0x20000220

08002138 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <vTaskPlaceOnEventList+0x28>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3318      	adds	r3, #24
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe ff85 	bl	800105a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002150:	2101      	movs	r1, #1
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f000 f9e8 	bl	8002528 <prvAddCurrentTaskToDelayedList>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000220 	.word	0x20000220

08002164 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	6a12      	ldr	r2, [r2, #32]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	69d2      	ldr	r2, [r2, #28]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	3318      	adds	r3, #24
 8002196:	429a      	cmp	r2, r3
 8002198:	d103      	bne.n	80021a2 <xTaskRemoveFromEventList+0x3e>
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6a1a      	ldr	r2, [r3, #32]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2200      	movs	r2, #0
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1e5a      	subs	r2, r3, #1
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021b2:	4b4a      	ldr	r3, [pc, #296]	; (80022dc <xTaskRemoveFromEventList+0x178>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d15e      	bne.n	8002278 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	68d2      	ldr	r2, [r2, #12]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	6892      	ldr	r2, [r2, #8]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	3304      	adds	r3, #4
 80021dc:	429a      	cmp	r2, r3
 80021de:	d103      	bne.n	80021e8 <xTaskRemoveFromEventList+0x84>
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	2201      	movs	r2, #1
 80021fe:	409a      	lsls	r2, r3
 8002200:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <xTaskRemoveFromEventList+0x17c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4313      	orrs	r3, r2
 8002206:	4a36      	ldr	r2, [pc, #216]	; (80022e0 <xTaskRemoveFromEventList+0x17c>)
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220e:	4935      	ldr	r1, [pc, #212]	; (80022e4 <xTaskRemoveFromEventList+0x180>)
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3304      	adds	r3, #4
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	3204      	adds	r2, #4
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	1d1a      	adds	r2, r3, #4
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4a25      	ldr	r2, [pc, #148]	; (80022e4 <xTaskRemoveFromEventList+0x180>)
 800224e:	441a      	add	r2, r3
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	615a      	str	r2, [r3, #20]
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002258:	4922      	ldr	r1, [pc, #136]	; (80022e4 <xTaskRemoveFromEventList+0x180>)
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1c59      	adds	r1, r3, #1
 8002268:	481e      	ldr	r0, [pc, #120]	; (80022e4 <xTaskRemoveFromEventList+0x180>)
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4403      	add	r3, r0
 8002274:	6019      	str	r1, [r3, #0]
 8002276:	e01b      	b.n	80022b0 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <xTaskRemoveFromEventList+0x184>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	61da      	str	r2, [r3, #28]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	621a      	str	r2, [r3, #32]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	3218      	adds	r2, #24
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f103 0218 	add.w	r2, r3, #24
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <xTaskRemoveFromEventList+0x184>)
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <xTaskRemoveFromEventList+0x184>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <xTaskRemoveFromEventList+0x184>)
 80022ae:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <xTaskRemoveFromEventList+0x188>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d905      	bls.n	80022ca <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80022be:	2301      	movs	r3, #1
 80022c0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <xTaskRemoveFromEventList+0x18c>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e001      	b.n	80022ce <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80022ce:	69fb      	ldr	r3, [r7, #28]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3724      	adds	r7, #36	; 0x24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000320 	.word	0x20000320
 80022e0:	20000300 	.word	0x20000300
 80022e4:	20000224 	.word	0x20000224
 80022e8:	200002b8 	.word	0x200002b8
 80022ec:	20000220 	.word	0x20000220
 80022f0:	2000030c 	.word	0x2000030c

080022f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <vTaskInternalSetTimeOutState+0x24>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <vTaskInternalSetTimeOutState+0x28>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	605a      	str	r2, [r3, #4]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000310 	.word	0x20000310
 800231c:	200002fc 	.word	0x200002fc

08002320 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800232a:	f000 fa07 	bl	800273c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <xTaskCheckForTimeOut+0x8c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002346:	d102      	bne.n	800234e <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e026      	b.n	800239c <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <xTaskCheckForTimeOut+0x90>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d00a      	beq.n	8002370 <xTaskCheckForTimeOut+0x50>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d305      	bcc.n	8002370 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002364:	2301      	movs	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e015      	b.n	800239c <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	429a      	cmp	r2, r3
 8002378:	d20b      	bcs.n	8002392 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad2      	subs	r2, r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ffb4 	bl	80022f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e004      	b.n	800239c <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002398:	2301      	movs	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800239c:	f000 f9e6 	bl	800276c <vPortExitCritical>

    return xReturn;
 80023a0:	697b      	ldr	r3, [r7, #20]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200002fc 	.word	0x200002fc
 80023b0:	20000310 	.word	0x20000310

080023b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <vTaskMissedYield+0x14>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	2000030c 	.word	0x2000030c

080023cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80023d4:	f000 f852 	bl	800247c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <prvIdleTask+0x28>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d9f9      	bls.n	80023d4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <prvIdleTask+0x2c>)
 80023e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80023f0:	e7f0      	b.n	80023d4 <prvIdleTask+0x8>
 80023f2:	bf00      	nop
 80023f4:	20000224 	.word	0x20000224
 80023f8:	e000ed04 	.word	0xe000ed04

080023fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	e00c      	b.n	8002422 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <prvInitialiseTaskLists+0x60>)
 8002414:	4413      	add	r3, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fdf4 	bl	8001004 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3301      	adds	r3, #1
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d9ef      	bls.n	8002408 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <prvInitialiseTaskLists+0x64>)
 800242a:	f7fe fdeb 	bl	8001004 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800242e:	480d      	ldr	r0, [pc, #52]	; (8002464 <prvInitialiseTaskLists+0x68>)
 8002430:	f7fe fde8 	bl	8001004 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <prvInitialiseTaskLists+0x6c>)
 8002436:	f7fe fde5 	bl	8001004 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800243a:	480c      	ldr	r0, [pc, #48]	; (800246c <prvInitialiseTaskLists+0x70>)
 800243c:	f7fe fde2 	bl	8001004 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002440:	480b      	ldr	r0, [pc, #44]	; (8002470 <prvInitialiseTaskLists+0x74>)
 8002442:	f7fe fddf 	bl	8001004 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <prvInitialiseTaskLists+0x78>)
 8002448:	4a05      	ldr	r2, [pc, #20]	; (8002460 <prvInitialiseTaskLists+0x64>)
 800244a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <prvInitialiseTaskLists+0x7c>)
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <prvInitialiseTaskLists+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000224 	.word	0x20000224
 8002460:	20000288 	.word	0x20000288
 8002464:	2000029c 	.word	0x2000029c
 8002468:	200002b8 	.word	0x200002b8
 800246c:	200002cc 	.word	0x200002cc
 8002470:	200002e4 	.word	0x200002e4
 8002474:	200002b0 	.word	0x200002b0
 8002478:	200002b4 	.word	0x200002b4

0800247c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002482:	e019      	b.n	80024b8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002484:	f000 f95a 	bl	800273c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <prvCheckTasksWaitingTermination+0x4c>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fe18 	bl	80010ca <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <prvCheckTasksWaitingTermination+0x50>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3b01      	subs	r3, #1
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <prvCheckTasksWaitingTermination+0x50>)
 80024a2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <prvCheckTasksWaitingTermination+0x54>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <prvCheckTasksWaitingTermination+0x54>)
 80024ac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80024ae:	f000 f95d 	bl	800276c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f80e 	bl	80024d4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <prvCheckTasksWaitingTermination+0x54>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1e1      	bne.n	8002484 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200002cc 	.word	0x200002cc
 80024cc:	200002f8 	.word	0x200002f8
 80024d0:	200002e0 	.word	0x200002e0

080024d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fa69 	bl	80029b8 <vPortFree>
                vPortFree( pxTCB );
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fa66 	bl	80029b8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <prvResetNextTaskUnblockTime+0x2c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <prvResetNextTaskUnblockTime+0x30>)
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800250a:	e005      	b.n	8002518 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <prvResetNextTaskUnblockTime+0x2c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a03      	ldr	r2, [pc, #12]	; (8002524 <prvResetNextTaskUnblockTime+0x30>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	200002b0 	.word	0x200002b0
 8002524:	20000318 	.word	0x20000318

08002528 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002532:	4b36      	ldr	r3, [pc, #216]	; (800260c <prvAddCurrentTaskToDelayedList+0xe4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3304      	adds	r3, #4
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fdc3 	bl	80010ca <uxListRemove>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10b      	bne.n	8002562 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	2201      	movs	r2, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <prvAddCurrentTaskToDelayedList+0xec>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4013      	ands	r3, r2
 800255e:	4a2d      	ldr	r2, [pc, #180]	; (8002614 <prvAddCurrentTaskToDelayedList+0xec>)
 8002560:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d124      	bne.n	80025b4 <prvAddCurrentTaskToDelayedList+0x8c>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d021      	beq.n	80025b4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002570:	4b29      	ldr	r3, [pc, #164]	; (8002618 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	6892      	ldr	r2, [r2, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe8>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	3204      	adds	r2, #4
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	1d1a      	adds	r2, r3, #4
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <prvAddCurrentTaskToDelayedList+0xf0>)
 80025a4:	615a      	str	r2, [r3, #20]
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <prvAddCurrentTaskToDelayedList+0xf0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <prvAddCurrentTaskToDelayedList+0xf0>)
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80025b2:	e026      	b.n	8002602 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d209      	bcs.n	80025e0 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <prvAddCurrentTaskToDelayedList+0xf4>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3304      	adds	r3, #4
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7fe fd3e 	bl	800105a <vListInsert>
}
 80025de:	e010      	b.n	8002602 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <prvAddCurrentTaskToDelayedList+0xf8>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3304      	adds	r3, #4
 80025ea:	4619      	mov	r1, r3
 80025ec:	4610      	mov	r0, r2
 80025ee:	f7fe fd34 	bl	800105a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <prvAddCurrentTaskToDelayedList+0xfc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d202      	bcs.n	8002602 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80025fc:	4a09      	ldr	r2, [pc, #36]	; (8002624 <prvAddCurrentTaskToDelayedList+0xfc>)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6013      	str	r3, [r2, #0]
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200002fc 	.word	0x200002fc
 8002610:	20000220 	.word	0x20000220
 8002614:	20000300 	.word	0x20000300
 8002618:	200002e4 	.word	0x200002e4
 800261c:	200002b4 	.word	0x200002b4
 8002620:	200002b0 	.word	0x200002b0
 8002624:	20000318 	.word	0x20000318

08002628 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3b04      	subs	r3, #4
 8002638:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002640:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3b04      	subs	r3, #4
 8002646:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f023 0201 	bic.w	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3b04      	subs	r3, #4
 8002656:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002658:	4a08      	ldr	r2, [pc, #32]	; (800267c <pxPortInitialiseStack+0x54>)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3b14      	subs	r3, #20
 8002662:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3b20      	subs	r3, #32
 800266e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002670:	68fb      	ldr	r3, [r7, #12]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	08002681 	.word	0x08002681

08002680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
        __asm volatile
 800268a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800269c:	bf00      	nop
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0fc      	beq.n	800269e <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80026b0:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <pxCurrentTCBConst2>)
 80026b2:	6819      	ldr	r1, [r3, #0]
 80026b4:	6808      	ldr	r0, [r1, #0]
 80026b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026ba:	f380 8809 	msr	PSP, r0
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f380 8811 	msr	BASEPRI, r0
 80026ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80026ce:	4770      	bx	lr

080026d0 <pxCurrentTCBConst2>:
 80026d0:	20000220 	.word	0x20000220
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop

080026d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80026d8:	4806      	ldr	r0, [pc, #24]	; (80026f4 <prvPortStartFirstTask+0x1c>)
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	6800      	ldr	r0, [r0, #0]
 80026de:	f380 8808 	msr	MSP, r0
 80026e2:	b662      	cpsie	i
 80026e4:	b661      	cpsie	f
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	df00      	svc	0
 80026f0:	bf00      	nop
 80026f2:	0000      	.short	0x0000
 80026f4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop

080026fc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <xPortStartScheduler+0x38>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <xPortStartScheduler+0x38>)
 8002706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800270a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <xPortStartScheduler+0x38>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a08      	ldr	r2, [pc, #32]	; (8002734 <xPortStartScheduler+0x38>)
 8002712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002716:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002718:	f000 f886 	bl	8002828 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <xPortStartScheduler+0x3c>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002722:	f7ff ffd9 	bl	80026d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002726:	f7ff fcc1 	bl	80020ac <vTaskSwitchContext>
    prvTaskExitError();
 800272a:	f7ff ffa9 	bl	8002680 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	e000ed20 	.word	0xe000ed20
 8002738:	20000004 	.word	0x20000004

0800273c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002746:	f383 8811 	msr	BASEPRI, r3
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	f3bf 8f4f 	dsb	sy
 8002752:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <vPortEnterCritical+0x2c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	4a03      	ldr	r2, [pc, #12]	; (8002768 <vPortEnterCritical+0x2c>)
 800275c:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	20000004 	.word	0x20000004

0800276c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <vPortExitCritical+0x2c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3b01      	subs	r3, #1
 8002778:	4a07      	ldr	r2, [pc, #28]	; (8002798 <vPortExitCritical+0x2c>)
 800277a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <vPortExitCritical+0x2c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d104      	bne.n	800278e <vPortExitCritical+0x22>
 8002784:	2300      	movs	r3, #0
 8002786:	607b      	str	r3, [r7, #4]
        __asm volatile
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000004 	.word	0x20000004
 800279c:	00000000 	.word	0x00000000

080027a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80027a0:	f3ef 8009 	mrs	r0, PSP
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <pxCurrentTCBConst>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027b0:	6010      	str	r0, [r2, #0]
 80027b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80027b6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80027ba:	f380 8811 	msr	BASEPRI, r0
 80027be:	f7ff fc75 	bl	80020ac <vTaskSwitchContext>
 80027c2:	f04f 0000 	mov.w	r0, #0
 80027c6:	f380 8811 	msr	BASEPRI, r0
 80027ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	6808      	ldr	r0, [r1, #0]
 80027d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027d6:	f380 8809 	msr	PSP, r0
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	4770      	bx	lr

080027e0 <pxCurrentTCBConst>:
 80027e0:	20000220 	.word	0x20000220
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop

080027e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
        __asm volatile
 80027ee:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002800:	f7ff fb4e 	bl	8001ea0 <xTaskIncrementTick>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <SysTick_Handler+0x3c>)
 800280c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <vPortSetupTimerInterrupt+0x28>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <vPortSetupTimerInterrupt+0x2c>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <vPortSetupTimerInterrupt+0x30>)
 800283a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800283e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <vPortSetupTimerInterrupt+0x28>)
 8002842:	2207      	movs	r2, #7
 8002844:	601a      	str	r2, [r3, #0]
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000e010 	.word	0xe000e010
 8002854:	e000e018 	.word	0xe000e018
 8002858:	e000e014 	.word	0xe000e014

0800285c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8002868:	f7ff fa20 	bl	8001cac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800286c:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <pvPortMalloc+0x144>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002874:	f000 f8e0 	bl	8002a38 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002878:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <pvPortMalloc+0x148>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	f040 8086 	bne.w	8002992 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01e      	beq.n	80028ca <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800288c:	2208      	movs	r2, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	d218      	bcs.n	80028ca <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8002898:	2208      	movs	r2, #8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d011      	beq.n	80028ce <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f023 0307 	bic.w	r3, r3, #7
 80028b0:	3308      	adds	r3, #8
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d205      	bcs.n	80028c4 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f023 0307 	bic.w	r3, r3, #7
 80028be:	3308      	adds	r3, #8
 80028c0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80028c2:	e004      	b.n	80028ce <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80028c8:	e001      	b.n	80028ce <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d05e      	beq.n	8002992 <pvPortMalloc+0x136>
 80028d4:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <pvPortMalloc+0x14c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d859      	bhi.n	8002992 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80028de:	4b33      	ldr	r3, [pc, #204]	; (80029ac <pvPortMalloc+0x150>)
 80028e0:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 80028e2:	4b32      	ldr	r3, [pc, #200]	; (80029ac <pvPortMalloc+0x150>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028e8:	e004      	b.n	80028f4 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d903      	bls.n	8002906 <pvPortMalloc+0xaa>
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f1      	bne.n	80028ea <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <pvPortMalloc+0x144>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	429a      	cmp	r2, r3
 800290e:	d040      	beq.n	8002992 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2208      	movs	r2, #8
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	1ad2      	subs	r2, r2, r3
 800292a:	2308      	movs	r3, #8
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	429a      	cmp	r2, r3
 8002930:	d90f      	bls.n	8002952 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	1ad2      	subs	r2, r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800294c:	68b8      	ldr	r0, [r7, #8]
 800294e:	f000 f8d5 	bl	8002afc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <pvPortMalloc+0x14c>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <pvPortMalloc+0x14c>)
 800295e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <pvPortMalloc+0x14c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <pvPortMalloc+0x154>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d203      	bcs.n	8002974 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <pvPortMalloc+0x14c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <pvPortMalloc+0x154>)
 8002972:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <pvPortMalloc+0x148>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <pvPortMalloc+0x158>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <pvPortMalloc+0x158>)
 8002990:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002992:	f7ff f999 	bl	8001cc8 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8002996:	68fb      	ldr	r3, [r7, #12]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000232c 	.word	0x2000232c
 80029a4:	20002340 	.word	0x20002340
 80029a8:	20002330 	.word	0x20002330
 80029ac:	20002324 	.word	0x20002324
 80029b0:	20002334 	.word	0x20002334
 80029b4:	20002338 	.word	0x20002338

080029b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d02c      	beq.n	8002a24 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80029ca:	2308      	movs	r3, #8
 80029cc:	425b      	negs	r3, r3
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <vPortFree+0x74>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01e      	beq.n	8002a24 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d11a      	bne.n	8002a24 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <vPortFree+0x74>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	401a      	ands	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80029fe:	f7ff f955 	bl	8001cac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <vPortFree+0x78>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <vPortFree+0x78>)
 8002a0e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a10:	68b8      	ldr	r0, [r7, #8]
 8002a12:	f000 f873 	bl	8002afc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <vPortFree+0x7c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <vPortFree+0x7c>)
 8002a1e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002a20:	f7ff f952 	bl	8001cc8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20002340 	.word	0x20002340
 8002a30:	20002330 	.word	0x20002330
 8002a34:	2000233c 	.word	0x2000233c

08002a38 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a42:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <prvHeapInit+0xac>)
 8002a46:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3307      	adds	r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0307 	bic.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <prvHeapInit+0xac>)
 8002a68:	4413      	add	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a70:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <prvHeapInit+0xb0>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <prvHeapInit+0xb0>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	4413      	add	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002a84:	2208      	movs	r2, #8
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0307 	bic.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a15      	ldr	r2, [pc, #84]	; (8002aec <prvHeapInit+0xb4>)
 8002a98:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <prvHeapInit+0xb4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <prvHeapInit+0xb4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	1ad2      	subs	r2, r2, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <prvHeapInit+0xb4>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <prvHeapInit+0xb8>)
 8002ac6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <prvHeapInit+0xbc>)
 8002ace:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <prvHeapInit+0xc0>)
 8002ad2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ad6:	601a      	str	r2, [r3, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000324 	.word	0x20000324
 8002ae8:	20002324 	.word	0x20002324
 8002aec:	2000232c 	.word	0x2000232c
 8002af0:	20002334 	.word	0x20002334
 8002af4:	20002330 	.word	0x20002330
 8002af8:	20002340 	.word	0x20002340

08002afc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002b04:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <prvInsertBlockIntoFreeList+0xa8>)
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e002      	b.n	8002b10 <prvInsertBlockIntoFreeList+0x14>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d8f7      	bhi.n	8002b0a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4413      	add	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d108      	bne.n	8002b3e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	441a      	add	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	441a      	add	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d118      	bne.n	8002b84 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <prvInsertBlockIntoFreeList+0xac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d00d      	beq.n	8002b7a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	441a      	add	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e008      	b.n	8002b8c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <prvInsertBlockIntoFreeList+0xac>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e003      	b.n	8002b8c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d002      	beq.n	8002b9a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	20002324 	.word	0x20002324
 8002ba8:	2000232c 	.word	0x2000232c

08002bac <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <case_insensitive_strcmp+0x16>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e05e      	b.n	8002c84 <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d10d      	bne.n	8002bea <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e058      	b.n	8002c84 <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <case_insensitive_strcmp+0x32>
        {
            return 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e052      	b.n	8002c84 <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3301      	adds	r3, #1
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	3301      	adds	r3, #1
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	f002 fe52 	bl	8005898 <__locale_ctype_ptr>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d103      	bne.n	8002c0e <case_insensitive_strcmp+0x62>
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	f103 0420 	add.w	r4, r3, #32
 8002c0c:	e000      	b.n	8002c10 <case_insensitive_strcmp+0x64>
 8002c0e:	7bfc      	ldrb	r4, [r7, #15]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	73bb      	strb	r3, [r7, #14]
 8002c16:	f002 fe3f 	bl	8005898 <__locale_ctype_ptr>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	7bbb      	ldrb	r3, [r7, #14]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <case_insensitive_strcmp+0x86>
 8002c2c:	7bbb      	ldrb	r3, [r7, #14]
 8002c2e:	3320      	adds	r3, #32
 8002c30:	e000      	b.n	8002c34 <case_insensitive_strcmp+0x88>
 8002c32:	7bbb      	ldrb	r3, [r7, #14]
 8002c34:	429c      	cmp	r4, r3
 8002c36:	d0cc      	beq.n	8002bd2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	737b      	strb	r3, [r7, #13]
 8002c3e:	f002 fe2b 	bl	8005898 <__locale_ctype_ptr>
 8002c42:	4602      	mov	r2, r0
 8002c44:	7b7b      	ldrb	r3, [r7, #13]
 8002c46:	3301      	adds	r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d103      	bne.n	8002c5c <case_insensitive_strcmp+0xb0>
 8002c54:	7b7b      	ldrb	r3, [r7, #13]
 8002c56:	f103 0420 	add.w	r4, r3, #32
 8002c5a:	e000      	b.n	8002c5e <case_insensitive_strcmp+0xb2>
 8002c5c:	7b7c      	ldrb	r4, [r7, #13]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	733b      	strb	r3, [r7, #12]
 8002c64:	f002 fe18 	bl	8005898 <__locale_ctype_ptr>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	7b3b      	ldrb	r3, [r7, #12]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d102      	bne.n	8002c80 <case_insensitive_strcmp+0xd4>
 8002c7a:	7b3b      	ldrb	r3, [r7, #12]
 8002c7c:	3320      	adds	r3, #32
 8002c7e:	e000      	b.n	8002c82 <case_insensitive_strcmp+0xd6>
 8002c80:	7b3b      	ldrb	r3, [r7, #12]
 8002c82:	1ae3      	subs	r3, r4, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}

08002c8c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2028      	movs	r0, #40	; 0x28
 8002c9a:	4798      	blx	r3
 8002c9c:	60f8      	str	r0, [r7, #12]
    if (node)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d004      	beq.n	8002cae <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8002ca4:	2228      	movs	r2, #40	; 0x28
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f002 fe30 	bl	800590e <memset>
    }

    return node;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8002cc4:	e03d      	b.n	8002d42 <cJSON_Delete+0x8a>
    {
        next = item->next;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d108      	bne.n	8002cea <cJSON_Delete+0x32>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ffe7 	bl	8002cb8 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <cJSON_Delete+0x58>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <cJSON_Delete+0x98>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6912      	ldr	r2, [r2, #16]
 8002d06:	4610      	mov	r0, r2
 8002d08:	4798      	blx	r3
            item->valuestring = NULL;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10c      	bne.n	8002d36 <cJSON_Delete+0x7e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <cJSON_Delete+0x98>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6a12      	ldr	r2, [r2, #32]
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4798      	blx	r3
            item->string = NULL;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <cJSON_Delete+0x98>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
        item = next;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1be      	bne.n	8002cc6 <cJSON_Delete+0xe>
    }
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000008 	.word	0x20000008

08002d54 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8002d58:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	0000      	movs	r0, r0
 8002d64:	0000      	movs	r0, r0
	...

08002d68 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b099      	sub	sp, #100	; 0x64
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
    double number = 0;
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	f04f 0400 	mov.w	r4, #0
 8002d7a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8002d82:	f7ff ffe7 	bl	8002d54 <get_decimal_point>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <parse_number+0x36>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <parse_number+0x3a>
    {
        return false;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e104      	b.n	8002fac <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002da6:	e09f      	b.n	8002ee8 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6899      	ldr	r1, [r3, #8]
 8002db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db2:	440b      	add	r3, r1
 8002db4:	4413      	add	r3, r2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	3b2b      	subs	r3, #43	; 0x2b
 8002dba:	2b3a      	cmp	r3, #58	; 0x3a
 8002dbc:	f200 80a4 	bhi.w	8002f08 <parse_number+0x1a0>
 8002dc0:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <parse_number+0x60>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002eb5 	.word	0x08002eb5
 8002dcc:	08002f09 	.word	0x08002f09
 8002dd0:	08002eb5 	.word	0x08002eb5
 8002dd4:	08002ed3 	.word	0x08002ed3
 8002dd8:	08002f09 	.word	0x08002f09
 8002ddc:	08002eb5 	.word	0x08002eb5
 8002de0:	08002eb5 	.word	0x08002eb5
 8002de4:	08002eb5 	.word	0x08002eb5
 8002de8:	08002eb5 	.word	0x08002eb5
 8002dec:	08002eb5 	.word	0x08002eb5
 8002df0:	08002eb5 	.word	0x08002eb5
 8002df4:	08002eb5 	.word	0x08002eb5
 8002df8:	08002eb5 	.word	0x08002eb5
 8002dfc:	08002eb5 	.word	0x08002eb5
 8002e00:	08002eb5 	.word	0x08002eb5
 8002e04:	08002f09 	.word	0x08002f09
 8002e08:	08002f09 	.word	0x08002f09
 8002e0c:	08002f09 	.word	0x08002f09
 8002e10:	08002f09 	.word	0x08002f09
 8002e14:	08002f09 	.word	0x08002f09
 8002e18:	08002f09 	.word	0x08002f09
 8002e1c:	08002f09 	.word	0x08002f09
 8002e20:	08002f09 	.word	0x08002f09
 8002e24:	08002f09 	.word	0x08002f09
 8002e28:	08002f09 	.word	0x08002f09
 8002e2c:	08002f09 	.word	0x08002f09
 8002e30:	08002eb5 	.word	0x08002eb5
 8002e34:	08002f09 	.word	0x08002f09
 8002e38:	08002f09 	.word	0x08002f09
 8002e3c:	08002f09 	.word	0x08002f09
 8002e40:	08002f09 	.word	0x08002f09
 8002e44:	08002f09 	.word	0x08002f09
 8002e48:	08002f09 	.word	0x08002f09
 8002e4c:	08002f09 	.word	0x08002f09
 8002e50:	08002f09 	.word	0x08002f09
 8002e54:	08002f09 	.word	0x08002f09
 8002e58:	08002f09 	.word	0x08002f09
 8002e5c:	08002f09 	.word	0x08002f09
 8002e60:	08002f09 	.word	0x08002f09
 8002e64:	08002f09 	.word	0x08002f09
 8002e68:	08002f09 	.word	0x08002f09
 8002e6c:	08002f09 	.word	0x08002f09
 8002e70:	08002f09 	.word	0x08002f09
 8002e74:	08002f09 	.word	0x08002f09
 8002e78:	08002f09 	.word	0x08002f09
 8002e7c:	08002f09 	.word	0x08002f09
 8002e80:	08002f09 	.word	0x08002f09
 8002e84:	08002f09 	.word	0x08002f09
 8002e88:	08002f09 	.word	0x08002f09
 8002e8c:	08002f09 	.word	0x08002f09
 8002e90:	08002f09 	.word	0x08002f09
 8002e94:	08002f09 	.word	0x08002f09
 8002e98:	08002f09 	.word	0x08002f09
 8002e9c:	08002f09 	.word	0x08002f09
 8002ea0:	08002f09 	.word	0x08002f09
 8002ea4:	08002f09 	.word	0x08002f09
 8002ea8:	08002f09 	.word	0x08002f09
 8002eac:	08002f09 	.word	0x08002f09
 8002eb0:	08002eb5 	.word	0x08002eb5
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	6899      	ldr	r1, [r3, #8]
 8002ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ebe:	440b      	add	r3, r1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	7819      	ldrb	r1, [r3, #0]
 8002ec4:	f107 0208 	add.w	r2, r7, #8
 8002ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eca:	4413      	add	r3, r2
 8002ecc:	460a      	mov	r2, r1
 8002ece:	701a      	strb	r2, [r3, #0]
                break;
 8002ed0:	e007      	b.n	8002ee2 <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 8002ed2:	f107 0208 	add.w	r2, r7, #8
 8002ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed8:	4413      	add	r3, r2
 8002eda:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002ede:	701a      	strb	r2, [r3, #0]
                break;
 8002ee0:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8002ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eea:	2b3e      	cmp	r3, #62	; 0x3e
 8002eec:	d80e      	bhi.n	8002f0c <parse_number+0x1a4>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <parse_number+0x1a4>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efa:	441a      	add	r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	f4ff af51 	bcc.w	8002da8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8002f06:	e001      	b.n	8002f0c <parse_number+0x1a4>
                goto loop_end;
 8002f08:	bf00      	nop
 8002f0a:	e000      	b.n	8002f0e <parse_number+0x1a6>
loop_end:
 8002f0c:	bf00      	nop
    number_c_string[i] = '\0';
 8002f0e:	f107 0208 	add.w	r2, r7, #8
 8002f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f14:	4413      	add	r3, r2
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8002f1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f004 f887 	bl	8007038 <strtod>
 8002f2a:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8002f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f30:	f107 0308 	add.w	r3, r7, #8
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d101      	bne.n	8002f3c <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e037      	b.n	8002fac <parse_number+0x244>
    }

    item->valuedouble = number;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002f42:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8002f46:	a31c      	add	r3, pc, #112	; (adr r3, 8002fb8 <parse_number+0x250>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f50:	f7fd fd62 	bl	8000a18 <__aeabi_dcmpge>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d004      	beq.n	8002f64 <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002f60:	615a      	str	r2, [r3, #20]
 8002f62:	e015      	b.n	8002f90 <parse_number+0x228>
    }
    else if (number <= (double)INT_MIN)
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <parse_number+0x258>)
 8002f6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f6e:	f7fd fd49 	bl	8000a04 <__aeabi_dcmple>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d004      	beq.n	8002f82 <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f7e:	615a      	str	r2, [r3, #20]
 8002f80:	e006      	b.n	8002f90 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 8002f82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f86:	f7fd fd71 	bl	8000a6c <__aeabi_d2iz>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2208      	movs	r2, #8
 8002f94:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	f107 0208 	add.w	r2, r7, #8
 8002fa2:	1a8a      	subs	r2, r1, r2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	609a      	str	r2, [r3, #8]
    return true;
 8002faa:	2301      	movs	r3, #1
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3764      	adds	r7, #100	; 0x64
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	ffc00000 	.word	0xffc00000
 8002fbc:	41dfffff 	.word	0x41dfffff
 8002fc0:	c1e00000 	.word	0xc1e00000

08002fc4 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	e04c      	b.n	8003074 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b2f      	cmp	r3, #47	; 0x2f
 8002fe4:	d90f      	bls.n	8003006 <parse_hex4+0x42>
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4413      	add	r3, r2
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b39      	cmp	r3, #57	; 0x39
 8002ff0:	d809      	bhi.n	8003006 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	3b30      	subs	r3, #48	; 0x30
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e02d      	b.n	8003062 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d90f      	bls.n	8003032 <parse_hex4+0x6e>
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b46      	cmp	r3, #70	; 0x46
 800301c:	d809      	bhi.n	8003032 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4413      	add	r3, r2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	3b37      	subs	r3, #55	; 0x37
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e017      	b.n	8003062 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b60      	cmp	r3, #96	; 0x60
 800303c:	d90f      	bls.n	800305e <parse_hex4+0x9a>
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4413      	add	r3, r2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b66      	cmp	r3, #102	; 0x66
 8003048:	d809      	bhi.n	800305e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4413      	add	r3, r2
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	3b57      	subs	r3, #87	; 0x57
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e001      	b.n	8003062 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800305e:	2300      	movs	r3, #0
 8003060:	e00c      	b.n	800307c <parse_hex4+0xb8>
        }

        if (i < 3)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d802      	bhi.n	800306e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	3301      	adds	r3, #1
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d9af      	bls.n	8002fda <parse_hex4+0x16>
        }
    }

    return h;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
	...

08003088 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b05      	cmp	r3, #5
 80030c0:	f340 80b7 	ble.w	8003232 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	3302      	adds	r3, #2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff7b 	bl	8002fc4 <parse_hex4>
 80030ce:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80030d6:	d304      	bcc.n	80030e2 <utf16_literal_to_utf8+0x5a>
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80030de:	f0c0 80aa 	bcc.w	8003236 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80030e8:	d337      	bcc.n	800315a <utf16_literal_to_utf8+0xd2>
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80030f0:	d233      	bcs.n	800315a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	3306      	adds	r3, #6
 80030f6:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80030fc:	230c      	movs	r3, #12
 80030fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b05      	cmp	r3, #5
 800310a:	f340 8096 	ble.w	800323a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b5c      	cmp	r3, #92	; 0x5c
 8003114:	f040 8093 	bne.w	800323e <utf16_literal_to_utf8+0x1b6>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3301      	adds	r3, #1
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b75      	cmp	r3, #117	; 0x75
 8003120:	f040 808d 	bne.w	800323e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3302      	adds	r3, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff4b 	bl	8002fc4 <parse_hex4>
 800312e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8003136:	f0c0 8082 	bcc.w	800323e <utf16_literal_to_utf8+0x1b6>
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8003140:	d27d      	bcs.n	800323e <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	029a      	lsls	r2, r3, #10
 8003146:	4b42      	ldr	r3, [pc, #264]	; (8003250 <utf16_literal_to_utf8+0x1c8>)
 8003148:	4013      	ands	r3, r2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003150:	4313      	orrs	r3, r2
 8003152:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8003158:	e004      	b.n	8003164 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800315a:	2306      	movs	r3, #6
 800315c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	2b7f      	cmp	r3, #127	; 0x7f
 8003168:	d803      	bhi.n	8003172 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003170:	e01f      	b.n	80031b2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003178:	d206      	bcs.n	8003188 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800317a:	2302      	movs	r3, #2
 800317c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8003180:	23c0      	movs	r3, #192	; 0xc0
 8003182:	f887 3020 	strb.w	r3, [r7, #32]
 8003186:	e014      	b.n	80031b2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d206      	bcs.n	800319e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8003190:	2303      	movs	r3, #3
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8003196:	23e0      	movs	r3, #224	; 0xe0
 8003198:	f887 3020 	strb.w	r3, [r7, #32]
 800319c:	e009      	b.n	80031b2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80031a4:	d24d      	bcs.n	8003242 <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80031a6:	2304      	movs	r3, #4
 80031a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80031ac:	23f0      	movs	r3, #240	; 0xf0
 80031ae:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80031b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b6:	3b01      	subs	r3, #1
 80031b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031bc:	e015      	b.n	80031ea <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80031d0:	440b      	add	r3, r1
 80031d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80031e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80031e4:	3b01      	subs	r3, #1
 80031e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80031f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d909      	bls.n	800320e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	b2d9      	uxtb	r1, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003206:	430a      	orrs	r2, r1
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e007      	b.n	800321e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	b2da      	uxtb	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003226:	441a      	add	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800322c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003230:	e009      	b.n	8003246 <utf16_literal_to_utf8+0x1be>
        goto fail;
 8003232:	bf00      	nop
 8003234:	e006      	b.n	8003244 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8003236:	bf00      	nop
 8003238:	e004      	b.n	8003244 <utf16_literal_to_utf8+0x1bc>
            goto fail;
 800323a:	bf00      	nop
 800323c:	e002      	b.n	8003244 <utf16_literal_to_utf8+0x1bc>

fail:
 800323e:	bf00      	nop
 8003240:	e000      	b.n	8003244 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8003242:	bf00      	nop
    return 0;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3728      	adds	r7, #40	; 0x28
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	000ffc00 	.word	0x000ffc00

08003254 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	3301      	adds	r3, #1
 8003268:	4413      	add	r3, r2
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	3301      	adds	r3, #1
 8003276:	4413      	add	r3, r2
 8003278:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	4413      	add	r3, r2
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b22      	cmp	r3, #34	; 0x22
 8003290:	f040 816c 	bne.w	800356c <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800329c:	e018      	b.n	80032d0 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b5c      	cmp	r3, #92	; 0x5c
 80032a4:	d111      	bne.n	80032ca <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	3301      	adds	r3, #1
 80032aa:	461a      	mov	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	f080 8159 	bcs.w	8003570 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	3301      	adds	r3, #1
 80032c2:	61bb      	str	r3, [r7, #24]
                input_end++;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	3301      	adds	r3, #1
 80032c8:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	3301      	adds	r3, #1
 80032ce:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	461a      	mov	r2, r3
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d203      	bcs.n	80032ea <parse_string+0x96>
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b22      	cmp	r3, #34	; 0x22
 80032e8:	d1d9      	bne.n	800329e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	461a      	mov	r2, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f080 813b 	bcs.w	8003574 <parse_string+0x320>
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b22      	cmp	r3, #34	; 0x22
 8003304:	f040 8136 	bne.w	8003574 <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	6811      	ldr	r1, [r2, #0]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	6892      	ldr	r2, [r2, #8]
 8003312:	440a      	add	r2, r1
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	461a      	mov	r2, r3
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	3201      	adds	r2, #1
 8003326:	4610      	mov	r0, r2
 8003328:	4798      	blx	r3
 800332a:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8122 	beq.w	8003578 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8003338:	e0fc      	b.n	8003534 <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b5c      	cmp	r3, #92	; 0x5c
 8003340:	d008      	beq.n	8003354 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	1c53      	adds	r3, r2, #1
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	60f9      	str	r1, [r7, #12]
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e0ef      	b.n	8003534 <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8003354:	2302      	movs	r3, #2
 8003356:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	f340 810c 	ble.w	800357c <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	3301      	adds	r3, #1
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	3b22      	subs	r3, #34	; 0x22
 800336c:	2b53      	cmp	r3, #83	; 0x53
 800336e:	f200 8107 	bhi.w	8003580 <parse_string+0x32c>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <parse_string+0x124>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	08003505 	.word	0x08003505
 800337c:	08003581 	.word	0x08003581
 8003380:	08003581 	.word	0x08003581
 8003384:	08003581 	.word	0x08003581
 8003388:	08003581 	.word	0x08003581
 800338c:	08003581 	.word	0x08003581
 8003390:	08003581 	.word	0x08003581
 8003394:	08003581 	.word	0x08003581
 8003398:	08003581 	.word	0x08003581
 800339c:	08003581 	.word	0x08003581
 80033a0:	08003581 	.word	0x08003581
 80033a4:	08003581 	.word	0x08003581
 80033a8:	08003581 	.word	0x08003581
 80033ac:	08003505 	.word	0x08003505
 80033b0:	08003581 	.word	0x08003581
 80033b4:	08003581 	.word	0x08003581
 80033b8:	08003581 	.word	0x08003581
 80033bc:	08003581 	.word	0x08003581
 80033c0:	08003581 	.word	0x08003581
 80033c4:	08003581 	.word	0x08003581
 80033c8:	08003581 	.word	0x08003581
 80033cc:	08003581 	.word	0x08003581
 80033d0:	08003581 	.word	0x08003581
 80033d4:	08003581 	.word	0x08003581
 80033d8:	08003581 	.word	0x08003581
 80033dc:	08003581 	.word	0x08003581
 80033e0:	08003581 	.word	0x08003581
 80033e4:	08003581 	.word	0x08003581
 80033e8:	08003581 	.word	0x08003581
 80033ec:	08003581 	.word	0x08003581
 80033f0:	08003581 	.word	0x08003581
 80033f4:	08003581 	.word	0x08003581
 80033f8:	08003581 	.word	0x08003581
 80033fc:	08003581 	.word	0x08003581
 8003400:	08003581 	.word	0x08003581
 8003404:	08003581 	.word	0x08003581
 8003408:	08003581 	.word	0x08003581
 800340c:	08003581 	.word	0x08003581
 8003410:	08003581 	.word	0x08003581
 8003414:	08003581 	.word	0x08003581
 8003418:	08003581 	.word	0x08003581
 800341c:	08003581 	.word	0x08003581
 8003420:	08003581 	.word	0x08003581
 8003424:	08003581 	.word	0x08003581
 8003428:	08003581 	.word	0x08003581
 800342c:	08003581 	.word	0x08003581
 8003430:	08003581 	.word	0x08003581
 8003434:	08003581 	.word	0x08003581
 8003438:	08003581 	.word	0x08003581
 800343c:	08003581 	.word	0x08003581
 8003440:	08003581 	.word	0x08003581
 8003444:	08003581 	.word	0x08003581
 8003448:	08003581 	.word	0x08003581
 800344c:	08003581 	.word	0x08003581
 8003450:	08003581 	.word	0x08003581
 8003454:	08003581 	.word	0x08003581
 8003458:	08003581 	.word	0x08003581
 800345c:	08003581 	.word	0x08003581
 8003460:	08003505 	.word	0x08003505
 8003464:	08003581 	.word	0x08003581
 8003468:	08003581 	.word	0x08003581
 800346c:	08003581 	.word	0x08003581
 8003470:	08003581 	.word	0x08003581
 8003474:	08003581 	.word	0x08003581
 8003478:	080034c9 	.word	0x080034c9
 800347c:	08003581 	.word	0x08003581
 8003480:	08003581 	.word	0x08003581
 8003484:	08003581 	.word	0x08003581
 8003488:	080034d5 	.word	0x080034d5
 800348c:	08003581 	.word	0x08003581
 8003490:	08003581 	.word	0x08003581
 8003494:	08003581 	.word	0x08003581
 8003498:	08003581 	.word	0x08003581
 800349c:	08003581 	.word	0x08003581
 80034a0:	08003581 	.word	0x08003581
 80034a4:	08003581 	.word	0x08003581
 80034a8:	080034e1 	.word	0x080034e1
 80034ac:	08003581 	.word	0x08003581
 80034b0:	08003581 	.word	0x08003581
 80034b4:	08003581 	.word	0x08003581
 80034b8:	080034ed 	.word	0x080034ed
 80034bc:	08003581 	.word	0x08003581
 80034c0:	080034f9 	.word	0x080034f9
 80034c4:	08003513 	.word	0x08003513
            {
                case 'b':
                    *output_pointer++ = '\b';
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	60fa      	str	r2, [r7, #12]
 80034ce:	2208      	movs	r2, #8
 80034d0:	701a      	strb	r2, [r3, #0]
                    break;
 80034d2:	e02b      	b.n	800352c <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	60fa      	str	r2, [r7, #12]
 80034da:	220c      	movs	r2, #12
 80034dc:	701a      	strb	r2, [r3, #0]
                    break;
 80034de:	e025      	b.n	800352c <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	60fa      	str	r2, [r7, #12]
 80034e6:	220a      	movs	r2, #10
 80034e8:	701a      	strb	r2, [r3, #0]
                    break;
 80034ea:	e01f      	b.n	800352c <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	60fa      	str	r2, [r7, #12]
 80034f2:	220d      	movs	r2, #13
 80034f4:	701a      	strb	r2, [r3, #0]
                    break;
 80034f6:	e019      	b.n	800352c <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	60fa      	str	r2, [r7, #12]
 80034fe:	2209      	movs	r2, #9
 8003500:	701a      	strb	r2, [r3, #0]
                    break;
 8003502:	e013      	b.n	800352c <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	60fa      	str	r2, [r7, #12]
 800350a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350c:	7852      	ldrb	r2, [r2, #1]
 800350e:	701a      	strb	r2, [r3, #0]
                    break;
 8003510:	e00c      	b.n	800352c <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8003512:	f107 030c 	add.w	r3, r7, #12
 8003516:	461a      	mov	r2, r3
 8003518:	6a39      	ldr	r1, [r7, #32]
 800351a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800351c:	f7ff fdb4 	bl	8003088 <utf16_literal_to_utf8>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8003524:	7dfb      	ldrb	r3, [r7, #23]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02c      	beq.n	8003584 <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 800352a:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003530:	4413      	add	r3, r2
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	429a      	cmp	r2, r3
 800353a:	f4ff aefe 	bcc.w	800333a <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2210      	movs	r2, #16
 8003548:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	461a      	mov	r2, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	609a      	str	r2, [r3, #8]

    return true;
 8003568:	2301      	movs	r3, #1
 800356a:	e020      	b.n	80035ae <parse_string+0x35a>
        goto fail;
 800356c:	bf00      	nop
 800356e:	e00a      	b.n	8003586 <parse_string+0x332>
                    goto fail;
 8003570:	bf00      	nop
 8003572:	e008      	b.n	8003586 <parse_string+0x332>

fail:
 8003574:	bf00      	nop
 8003576:	e006      	b.n	8003586 <parse_string+0x332>
            goto fail; /* allocation failure */
 8003578:	bf00      	nop
 800357a:	e004      	b.n	8003586 <parse_string+0x332>
                goto fail;
 800357c:	bf00      	nop
 800357e:	e002      	b.n	8003586 <parse_string+0x332>
                    goto fail;
 8003580:	bf00      	nop
 8003582:	e000      	b.n	8003586 <parse_string+0x332>
                        goto fail;
 8003584:	bf00      	nop
    if (output != NULL)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <parse_string+0x344>
    {
        input_buffer->hooks.deallocate(output);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	69f8      	ldr	r0, [r7, #28]
 8003592:	4798      	blx	r3
        output = NULL;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <parse_string+0x358>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	461a      	mov	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	609a      	str	r2, [r3, #8]
    }

    return false;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3728      	adds	r7, #40	; 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop

080035b8 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <buffer_skip_whitespace+0x16>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e02c      	b.n	800362c <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <buffer_skip_whitespace+0x2c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d306      	bcc.n	80035f2 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	e021      	b.n	800362c <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <buffer_skip_whitespace+0x5c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d207      	bcs.n	8003614 <buffer_skip_whitespace+0x5c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4413      	add	r3, r2
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b20      	cmp	r3, #32
 8003612:	d9e9      	bls.n	80035e8 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d104      	bne.n	800362a <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	1e5a      	subs	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800362a:	687b      	ldr	r3, [r7, #4]
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
	...

08003638 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <skip_utf8_bom+0x1e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <skip_utf8_bom+0x1e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <skip_utf8_bom+0x22>
    {
        return NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	e01c      	b.n	8003694 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d018      	beq.n	8003692 <skip_utf8_bom+0x5a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	1d1a      	adds	r2, r3, #4
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	d211      	bcs.n	8003692 <skip_utf8_bom+0x5a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	4413      	add	r3, r2
 8003678:	2203      	movs	r2, #3
 800367a:	4908      	ldr	r1, [pc, #32]	; (800369c <skip_utf8_bom+0x64>)
 800367c:	4618      	mov	r0, r3
 800367e:	f002 fe91 	bl	80063a4 <strncmp>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d104      	bne.n	8003692 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	1cda      	adds	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8003692:	687b      	ldr	r3, [r7, #4]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	08009048 	.word	0x08009048

080036a0 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e00c      	b.n	80036d0 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7fc fd64 	bl	8000184 <strlen>
 80036bc:	4603      	mov	r3, r0
 80036be:	3301      	adds	r3, #1
 80036c0:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	6979      	ldr	r1, [r7, #20]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f805 	bl	80036d8 <cJSON_ParseWithLengthOpts>
 80036ce:	4603      	mov	r3, r0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80036e6:	f107 0318 	add.w	r3, r7, #24
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	60da      	str	r2, [r3, #12]
 80036f4:	611a      	str	r2, [r3, #16]
 80036f6:	615a      	str	r2, [r3, #20]
 80036f8:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80036fe:	4b40      	ldr	r3, [pc, #256]	; (8003800 <cJSON_ParseWithLengthOpts+0x128>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8003704:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <cJSON_ParseWithLengthOpts+0x128>)
 8003706:	2200      	movs	r2, #0
 8003708:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d042      	beq.n	8003796 <cJSON_ParseWithLengthOpts+0xbe>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d03f      	beq.n	8003796 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8003722:	4a38      	ldr	r2, [pc, #224]	; (8003804 <cJSON_ParseWithLengthOpts+0x12c>)
 8003724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003728:	ca07      	ldmia	r2, {r0, r1, r2}
 800372a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800372e:	4835      	ldr	r0, [pc, #212]	; (8003804 <cJSON_ParseWithLengthOpts+0x12c>)
 8003730:	f7ff faac 	bl	8002c8c <cJSON_New_Item>
 8003734:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8003736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003738:	2b00      	cmp	r3, #0
 800373a:	d02e      	beq.n	800379a <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800373c:	f107 0318 	add.w	r3, r7, #24
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff79 	bl	8003638 <skip_utf8_bom>
 8003746:	4603      	mov	r3, r0
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff35 	bl	80035b8 <buffer_skip_whitespace>
 800374e:	4603      	mov	r3, r0
 8003750:	4619      	mov	r1, r3
 8003752:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003754:	f000 f866 	bl	8003824 <parse_value>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01f      	beq.n	800379e <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8003764:	f107 0318 	add.w	r3, r7, #24
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff25 	bl	80035b8 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800376e:	6a3a      	ldr	r2, [r7, #32]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	429a      	cmp	r2, r3
 8003774:	d20f      	bcs.n	8003796 <cJSON_ParseWithLengthOpts+0xbe>
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	4413      	add	r3, r2
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <cJSON_ParseWithLengthOpts+0xbe>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	601a      	str	r2, [r3, #0]
    }

    return item;
 8003792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003794:	e02f      	b.n	80037f6 <cJSON_ParseWithLengthOpts+0x11e>

fail:
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 800379e:	bf00      	nop
    if (item != NULL)
 80037a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <cJSON_ParseWithLengthOpts+0xd4>
    {
        cJSON_Delete(item);
 80037a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037a8:	f7ff fa86 	bl	8002cb8 <cJSON_Delete>
    }

    if (value != NULL)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d020      	beq.n	80037f4 <cJSON_ParseWithLengthOpts+0x11c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d202      	bcs.n	80037c8 <cJSON_ParseWithLengthOpts+0xf0>
        {
            local_error.position = buffer.offset;
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e005      	b.n	80037d4 <cJSON_ParseWithLengthOpts+0xfc>
        }
        else if (buffer.length > 0)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <cJSON_ParseWithLengthOpts+0xfc>
        {
            local_error.position = buffer.length - 1;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <cJSON_ParseWithLengthOpts+0x10c>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	441a      	add	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <cJSON_ParseWithLengthOpts+0x128>)
 80037e6:	461a      	mov	r2, r3
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037f0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3738      	adds	r7, #56	; 0x38
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20002344 	.word	0x20002344
 8003804:	20000008 	.word	0x20000008

08003808 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8003810:	2200      	movs	r2, #0
 8003812:	2100      	movs	r1, #0
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff43 	bl	80036a0 <cJSON_ParseWithOpts>
 800381a:	4603      	mov	r3, r0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <parse_value+0x18>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <parse_value+0x1c>
    {
        return false; /* no input */
 800383c:	2300      	movs	r3, #0
 800383e:	e0d2      	b.n	80039e6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01d      	beq.n	8003882 <parse_value+0x5e>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	1d1a      	adds	r2, r3, #4
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d816      	bhi.n	8003882 <parse_value+0x5e>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4413      	add	r3, r2
 800385e:	2204      	movs	r2, #4
 8003860:	4963      	ldr	r1, [pc, #396]	; (80039f0 <parse_value+0x1cc>)
 8003862:	4618      	mov	r0, r3
 8003864:	f002 fd9e 	bl	80063a4 <strncmp>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2204      	movs	r2, #4
 8003872:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	1d1a      	adds	r2, r3, #4
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	609a      	str	r2, [r3, #8]
        return true;
 800387e:	2301      	movs	r3, #1
 8003880:	e0b1      	b.n	80039e6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01d      	beq.n	80038c4 <parse_value+0xa0>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	1d5a      	adds	r2, r3, #5
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d816      	bhi.n	80038c4 <parse_value+0xa0>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	4413      	add	r3, r2
 80038a0:	2205      	movs	r2, #5
 80038a2:	4954      	ldr	r1, [pc, #336]	; (80039f4 <parse_value+0x1d0>)
 80038a4:	4618      	mov	r0, r3
 80038a6:	f002 fd7d 	bl	80063a4 <strncmp>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	1d5a      	adds	r2, r3, #5
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	609a      	str	r2, [r3, #8]
        return true;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e090      	b.n	80039e6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d020      	beq.n	800390c <parse_value+0xe8>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	1d1a      	adds	r2, r3, #4
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d819      	bhi.n	800390c <parse_value+0xe8>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4413      	add	r3, r2
 80038e2:	2204      	movs	r2, #4
 80038e4:	4944      	ldr	r1, [pc, #272]	; (80039f8 <parse_value+0x1d4>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f002 fd5c 	bl	80063a4 <strncmp>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10c      	bne.n	800390c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	1d1a      	adds	r2, r3, #4
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	609a      	str	r2, [r3, #8]
        return true;
 8003908:	2301      	movs	r3, #1
 800390a:	e06c      	b.n	80039e6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d013      	beq.n	800393a <parse_value+0x116>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d20d      	bcs.n	800393a <parse_value+0x116>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4413      	add	r3, r2
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b22      	cmp	r3, #34	; 0x22
 800392c:	d105      	bne.n	800393a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fc8f 	bl	8003254 <parse_string>
 8003936:	4603      	mov	r3, r0
 8003938:	e055      	b.n	80039e6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d023      	beq.n	8003988 <parse_value+0x164>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d21d      	bcs.n	8003988 <parse_value+0x164>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4413      	add	r3, r2
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b2d      	cmp	r3, #45	; 0x2d
 800395a:	d00f      	beq.n	800397c <parse_value+0x158>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4413      	add	r3, r2
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b2f      	cmp	r3, #47	; 0x2f
 800396a:	d90d      	bls.n	8003988 <parse_value+0x164>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4413      	add	r3, r2
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b39      	cmp	r3, #57	; 0x39
 800397a:	d805      	bhi.n	8003988 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800397c:	6839      	ldr	r1, [r7, #0]
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff f9f2 	bl	8002d68 <parse_number>
 8003984:	4603      	mov	r3, r0
 8003986:	e02e      	b.n	80039e6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d013      	beq.n	80039b6 <parse_value+0x192>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d20d      	bcs.n	80039b6 <parse_value+0x192>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	4413      	add	r3, r2
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b5b      	cmp	r3, #91	; 0x5b
 80039a8:	d105      	bne.n	80039b6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80039aa:	6839      	ldr	r1, [r7, #0]
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f825 	bl	80039fc <parse_array>
 80039b2:	4603      	mov	r3, r0
 80039b4:	e017      	b.n	80039e6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d013      	beq.n	80039e4 <parse_value+0x1c0>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d20d      	bcs.n	80039e4 <parse_value+0x1c0>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4413      	add	r3, r2
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b7b      	cmp	r3, #123	; 0x7b
 80039d6:	d105      	bne.n	80039e4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80039d8:	6839      	ldr	r1, [r7, #0]
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8d2 	bl	8003b84 <parse_object>
 80039e0:	4603      	mov	r3, r0
 80039e2:	e000      	b.n	80039e6 <parse_value+0x1c2>
    }

    return false;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	0800901c 	.word	0x0800901c
 80039f4:	0800904c 	.word	0x0800904c
 80039f8:	08009054 	.word	0x08009054

080039fc <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a16:	d301      	bcc.n	8003a1c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e0af      	b.n	8003b7c <parse_array+0x180>
    }
    input_buffer->depth++;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4413      	add	r3, r2
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b5b      	cmp	r3, #91	; 0x5b
 8003a34:	f040 8094 	bne.w	8003b60 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8003a42:	6838      	ldr	r0, [r7, #0]
 8003a44:	f7ff fdb8 	bl	80035b8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <parse_array+0x6e>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d207      	bcs.n	8003a6a <parse_array+0x6e>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	4413      	add	r3, r2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b5d      	cmp	r3, #93	; 0x5d
 8003a68:	d061      	beq.n	8003b2e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <parse_array+0x80>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d305      	bcc.n	8003a88 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	1e5a      	subs	r2, r3, #1
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	609a      	str	r2, [r3, #8]
        goto fail;
 8003a86:	e072      	b.n	8003b6e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	3310      	adds	r3, #16
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff f8f8 	bl	8002c8c <cJSON_New_Item>
 8003a9c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d05f      	beq.n	8003b64 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	e007      	b.n	8003ac4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003ace:	6838      	ldr	r0, [r7, #0]
 8003ad0:	f7ff fd72 	bl	80035b8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8003ad4:	6839      	ldr	r1, [r7, #0]
 8003ad6:	6938      	ldr	r0, [r7, #16]
 8003ad8:	f7ff fea4 	bl	8003824 <parse_value>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d042      	beq.n	8003b68 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8003ae2:	6838      	ldr	r0, [r7, #0]
 8003ae4:	f7ff fd68 	bl	80035b8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <parse_array+0x10e>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d207      	bcs.n	8003b0a <parse_array+0x10e>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	4413      	add	r3, r2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b2c      	cmp	r3, #44	; 0x2c
 8003b08:	d0c3      	beq.n	8003a92 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d02d      	beq.n	8003b6c <parse_array+0x170>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d227      	bcs.n	8003b6c <parse_array+0x170>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4413      	add	r3, r2
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b5d      	cmp	r3, #93	; 0x5d
 8003b2a:	d11f      	bne.n	8003b6c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8003b2c:	e000      	b.n	8003b30 <parse_array+0x134>
        goto success;
 8003b2e:	bf00      	nop
    input_buffer->depth--;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	1e5a      	subs	r2, r3, #1
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <parse_array+0x14a>
        head->prev = current_item;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	609a      	str	r2, [r3, #8]

    return true;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e00d      	b.n	8003b7c <parse_array+0x180>
        goto fail;
 8003b60:	bf00      	nop
 8003b62:	e004      	b.n	8003b6e <parse_array+0x172>
            goto fail; /* allocation failure */
 8003b64:	bf00      	nop
 8003b66:	e002      	b.n	8003b6e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8003b68:	bf00      	nop
 8003b6a:	e000      	b.n	8003b6e <parse_array+0x172>

fail:
 8003b6c:	bf00      	nop
    if (head != NULL)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8003b74:	6978      	ldr	r0, [r7, #20]
 8003b76:	f7ff f89f 	bl	8002cb8 <cJSON_Delete>
    }

    return false;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b9e:	d301      	bcc.n	8003ba4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e0f0      	b.n	8003d86 <parse_object+0x202>
    }
    input_buffer->depth++;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80da 	beq.w	8003d6a <parse_object+0x1e6>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	f080 80d3 	bcs.w	8003d6a <parse_object+0x1e6>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4413      	add	r3, r2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b7b      	cmp	r3, #123	; 0x7b
 8003bd2:	f040 80ca 	bne.w	8003d6a <parse_object+0x1e6>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8003be0:	6838      	ldr	r0, [r7, #0]
 8003be2:	f7ff fce9 	bl	80035b8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <parse_object+0x86>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d208      	bcs.n	8003c0a <parse_object+0x86>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4413      	add	r3, r2
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b7d      	cmp	r3, #125	; 0x7d
 8003c06:	f000 8097 	beq.w	8003d38 <parse_object+0x1b4>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <parse_object+0x98>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d305      	bcc.n	8003c28 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	1e5a      	subs	r2, r3, #1
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	609a      	str	r2, [r3, #8]
        goto fail;
 8003c26:	e0a7      	b.n	8003d78 <parse_object+0x1f4>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	3310      	adds	r3, #16
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff f828 	bl	8002c8c <cJSON_New_Item>
 8003c3c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8094 	beq.w	8003d6e <parse_object+0x1ea>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d104      	bne.n	8003c56 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	e007      	b.n	8003c66 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d07e      	beq.n	8003d6a <parse_object+0x1e6>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d277      	bcs.n	8003d6a <parse_object+0x1e6>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003c84:	6838      	ldr	r0, [r7, #0]
 8003c86:	f7ff fc97 	bl	80035b8 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8003c8a:	6839      	ldr	r1, [r7, #0]
 8003c8c:	6938      	ldr	r0, [r7, #16]
 8003c8e:	f7ff fae1 	bl	8003254 <parse_string>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d06c      	beq.n	8003d72 <parse_object+0x1ee>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8003c98:	6838      	ldr	r0, [r7, #0]
 8003c9a:	f7ff fc8d 	bl	80035b8 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d05b      	beq.n	8003d6a <parse_object+0x1e6>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d255      	bcs.n	8003d6a <parse_object+0x1e6>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b3a      	cmp	r3, #58	; 0x3a
 8003ccc:	d14d      	bne.n	8003d6a <parse_object+0x1e6>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003cd8:	6838      	ldr	r0, [r7, #0]
 8003cda:	f7ff fc6d 	bl	80035b8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	6938      	ldr	r0, [r7, #16]
 8003ce2:	f7ff fd9f 	bl	8003824 <parse_value>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d044      	beq.n	8003d76 <parse_object+0x1f2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	f7ff fc63 	bl	80035b8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <parse_object+0x190>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d207      	bcs.n	8003d14 <parse_object+0x190>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b2c      	cmp	r3, #44	; 0x2c
 8003d12:	d08e      	beq.n	8003c32 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d027      	beq.n	8003d6a <parse_object+0x1e6>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d221      	bcs.n	8003d6a <parse_object+0x1e6>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	4413      	add	r3, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b7d      	cmp	r3, #125	; 0x7d
 8003d34:	d119      	bne.n	8003d6a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8003d36:	e000      	b.n	8003d3a <parse_object+0x1b6>
        goto success; /* empty object */
 8003d38:	bf00      	nop
    input_buffer->depth--;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	1e5a      	subs	r2, r3, #1
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <parse_object+0x1cc>
        head->prev = current_item;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2240      	movs	r2, #64	; 0x40
 8003d54:	60da      	str	r2, [r3, #12]
    item->child = head;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	609a      	str	r2, [r3, #8]
    return true;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e00d      	b.n	8003d86 <parse_object+0x202>

fail:
 8003d6a:	bf00      	nop
 8003d6c:	e004      	b.n	8003d78 <parse_object+0x1f4>
            goto fail; /* allocation failure */
 8003d6e:	bf00      	nop
 8003d70:	e002      	b.n	8003d78 <parse_object+0x1f4>
            goto fail; /* failed to parse name */
 8003d72:	bf00      	nop
 8003d74:	e000      	b.n	8003d78 <parse_object+0x1f4>
            goto fail; /* failed to parse value */
 8003d76:	bf00      	nop
    if (head != NULL)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <parse_object+0x200>
    {
        cJSON_Delete(head);
 8003d7e:	6978      	ldr	r0, [r7, #20]
 8003d80:	f7fe ff9a 	bl	8002cb8 <cJSON_Delete>
    }

    return false;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <get_object_item+0x1c>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <get_object_item+0x20>
    {
        return NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e033      	b.n	8003e16 <get_object_item+0x88>
    }

    current_element = object->child;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d017      	beq.n	8003dea <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003dba:	e002      	b.n	8003dc2 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01c      	beq.n	8003e02 <get_object_item+0x74>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d018      	beq.n	8003e02 <get_object_item+0x74>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	68b8      	ldr	r0, [r7, #8]
 8003dd8:	f7fc f9ca 	bl	8000170 <strcmp>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1ec      	bne.n	8003dbc <get_object_item+0x2e>
 8003de2:	e00e      	b.n	8003e02 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <get_object_item+0x74>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4619      	mov	r1, r3
 8003df6:	68b8      	ldr	r0, [r7, #8]
 8003df8:	f7fe fed8 	bl	8002bac <case_insensitive_strcmp>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <get_object_item+0x82>
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <get_object_item+0x86>
        return NULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <get_object_item+0x88>
    }

    return current_element;
 8003e14:	697b      	ldr	r3, [r7, #20]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8003e28:	2201      	movs	r2, #1
 8003e2a:	6839      	ldr	r1, [r7, #0]
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ffae 	bl	8003d8e <get_object_item>
 8003e32:	4603      	mov	r3, r0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <cJSON_IsNumber+0x12>
    {
        return false;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e007      	b.n	8003e5e <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <cJSON_IsString+0x12>
    {
        return false;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e007      	b.n	8003e8a <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <adc_init>:
 */




char adc_init(ADC_REGISTERS_t *ADCx, short port, short pin){
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	803b      	strh	r3, [r7, #0]
	char channel;
	char result = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	77bb      	strb	r3, [r7, #30]
	if(port == PA)
 8003ea8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d108      	bne.n	8003ec2 <adc_init+0x2e>
	{
		if(pin < 8)
 8003eb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003eb4:	2b07      	cmp	r3, #7
 8003eb6:	dc21      	bgt.n	8003efc <adc_init+0x68>
		{
			result = 1;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	77bb      	strb	r3, [r7, #30]
			channel = pin;
 8003ebc:	883b      	ldrh	r3, [r7, #0]
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e01c      	b.n	8003efc <adc_init+0x68>
		}
	}
	else if (port == PB)
 8003ec2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d10a      	bne.n	8003ee0 <adc_init+0x4c>
	{
		if(pin<2)
 8003eca:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	dc14      	bgt.n	8003efc <adc_init+0x68>
		{
			result = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	77bb      	strb	r3, [r7, #30]
			channel = 8 + pin;
 8003ed6:	883b      	ldrh	r3, [r7, #0]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	3308      	adds	r3, #8
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e00d      	b.n	8003efc <adc_init+0x68>
		}
	}
	else if (port == PC)
 8003ee0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d109      	bne.n	8003efc <adc_init+0x68>
	{
		if(pin<6)
 8003ee8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	dc05      	bgt.n	8003efc <adc_init+0x68>
		{
			result = 1;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	77bb      	strb	r3, [r7, #30]
			channel = 10 + pin;
 8003ef4:	883b      	ldrh	r3, [r7, #0]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	330a      	adds	r3, #10
 8003efa:	77fb      	strb	r3, [r7, #31]
		}
	}
	if(result)
 8003efc:	7fbb      	ldrb	r3, [r7, #30]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d05b      	beq.n	8003fba <adc_init+0x126>
	{
		Pin_Config_t GPIO_Pin_CNFG_s;
		GPIO_Pin_CNFG_s.Pin_Num = pin;
 8003f02:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f06:	613b      	str	r3, [r7, #16]
		GPIO_Pin_CNFG_s.mode = Input_Analog;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]

		if (port == PB) {
 8003f0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d106      	bne.n	8003f22 <adc_init+0x8e>
			MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG_s);
 8003f14:	f107 0310 	add.w	r3, r7, #16
 8003f18:	4619      	mov	r1, r3
 8003f1a:	482a      	ldr	r0, [pc, #168]	; (8003fc4 <adc_init+0x130>)
 8003f1c:	f000 fa24 	bl	8004368 <MCAL_GPIO_Init>
 8003f20:	e014      	b.n	8003f4c <adc_init+0xb8>
		}
		else if (port == PA) {
 8003f22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d106      	bne.n	8003f38 <adc_init+0xa4>
			MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 8003f2a:	f107 0310 	add.w	r3, r7, #16
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4825      	ldr	r0, [pc, #148]	; (8003fc8 <adc_init+0x134>)
 8003f32:	f000 fa19 	bl	8004368 <MCAL_GPIO_Init>
 8003f36:	e009      	b.n	8003f4c <adc_init+0xb8>
		}
		else if (port == PC) {
 8003f38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d105      	bne.n	8003f4c <adc_init+0xb8>
			MCAL_GPIO_Init(GPIOC, &GPIO_Pin_CNFG_s);
 8003f40:	f107 0310 	add.w	r3, r7, #16
 8003f44:	4619      	mov	r1, r3
 8003f46:	4821      	ldr	r0, [pc, #132]	; (8003fcc <adc_init+0x138>)
 8003f48:	f000 fa0e 	bl	8004368 <MCAL_GPIO_Init>
		}

		if(ADCx == ADC1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <adc_init+0x13c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d106      	bne.n	8003f62 <adc_init+0xce>
		{
			ADC1_CLOCK_EN();
 8003f54:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <adc_init+0x140>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <adc_init+0x140>)
 8003f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f5e:	6193      	str	r3, [r2, #24]
 8003f60:	e009      	b.n	8003f76 <adc_init+0xe2>
		}
		else if(ADCx == ADC2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a1c      	ldr	r2, [pc, #112]	; (8003fd8 <adc_init+0x144>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d105      	bne.n	8003f76 <adc_init+0xe2>
		{
			ADC2_CLOCK_EN();
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <adc_init+0x140>)
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <adc_init+0x140>)
 8003f70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f74:	6193      	str	r3, [r2, #24]
		}

		// ADC Configuration
		ADCx->ADC_CR2 = 0;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	609a      	str	r2, [r3, #8]
		ADCx->ADC_SQR3 = channel;               // Select channel (e.g., channel 0 for PA0)
 8003f7c:	7ffa      	ldrb	r2, [r7, #31]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	635a      	str	r2, [r3, #52]	; 0x34
		ADCx->ADC_CR2 |= (1 << 0);              // Enable ADC (ADON)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	609a      	str	r2, [r3, #8]

		// Allow stabilization time
		for (volatile int i = 0; i < 1000; i++);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e002      	b.n	8003f9a <adc_init+0x106>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3301      	adds	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa0:	dbf8      	blt.n	8003f94 <adc_init+0x100>
		ADCx->ADC_CR2 |= (1 << 0);              // Enable ADC (ADON)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f043 0201 	orr.w	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	609a      	str	r2, [r3, #8]

		ADCx->ADC_CR2 |= (1 << 1);              // Enable continuous conversion mode (CONT)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f043 0202 	orr.w	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	609a      	str	r2, [r3, #8]

	}
	return result ;
 8003fba:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3720      	adds	r7, #32
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40010c00 	.word	0x40010c00
 8003fc8:	40010800 	.word	0x40010800
 8003fcc:	40011000 	.word	0x40011000
 8003fd0:	40012400 	.word	0x40012400
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40012800 	.word	0x40012800

08003fdc <adc_Deinit>:

char adc_Deinit(ADC_REGISTERS_t *ADCx, short port, short pin){
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	807b      	strh	r3, [r7, #2]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	803b      	strh	r3, [r7, #0]


	// ADC Configuration
	ADCx->ADC_CR2 = 0;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
	ADCx->ADC_SQR3 = 0;               // Select channel (e.g., channel 0 for PA0)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	635a      	str	r2, [r3, #52]	; 0x34


	if (port == PB) {
 8003ff8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d106      	bne.n	800400e <adc_Deinit+0x32>
		MCAL_GPIO_DeInit(GPIOB, pin);
 8004000:	883b      	ldrh	r3, [r7, #0]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	4619      	mov	r1, r3
 8004006:	480f      	ldr	r0, [pc, #60]	; (8004044 <adc_Deinit+0x68>)
 8004008:	f000 fa56 	bl	80044b8 <MCAL_GPIO_DeInit>
 800400c:	e014      	b.n	8004038 <adc_Deinit+0x5c>
	}
	else if (port == PA) {
 800400e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d106      	bne.n	8004024 <adc_Deinit+0x48>
		MCAL_GPIO_DeInit(GPIOA, pin);
 8004016:	883b      	ldrh	r3, [r7, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	480a      	ldr	r0, [pc, #40]	; (8004048 <adc_Deinit+0x6c>)
 800401e:	f000 fa4b 	bl	80044b8 <MCAL_GPIO_DeInit>
 8004022:	e009      	b.n	8004038 <adc_Deinit+0x5c>
	}
	else if (port == PC) {
 8004024:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d105      	bne.n	8004038 <adc_Deinit+0x5c>
		MCAL_GPIO_DeInit(GPIOC, pin);
 800402c:	883b      	ldrh	r3, [r7, #0]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	4619      	mov	r1, r3
 8004032:	4806      	ldr	r0, [pc, #24]	; (800404c <adc_Deinit+0x70>)
 8004034:	f000 fa40 	bl	80044b8 <MCAL_GPIO_DeInit>
	}
}
 8004038:	bf00      	nop
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40010c00 	.word	0x40010c00
 8004048:	40010800 	.word	0x40010800
 800404c:	40011000 	.word	0x40011000

08004050 <adc_check>:




char adc_check(ADC_REGISTERS_t *ADCx){
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

	char check = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]

	if(ADCx->ADC_SR & 2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <adc_check+0x1c>
	{
		check  = 1;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
	}


	return check;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <adc_rx>:
int adc_rx(ADC_REGISTERS_t *ADCx, short port, short pin){
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	803b      	strh	r3, [r7, #0]

	int data;
	// Read ADC value
	data = ADCx->ADC_DR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408c:	60fb      	str	r3, [r7, #12]
	return data; // Return temperature in Celsius
 800408e:	68fb      	ldr	r3, [r7, #12]

}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr
	...

0800409c <EXTI0_IRQHandler>:
// ISR functions
//-----------------------------


void EXTI0_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<0); //WRITE 1 TO CLEAR
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <EXTI0_IRQHandler+0x1c>)
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <EXTI0_IRQHandler+0x1c>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <EXTI0_IRQHandler+0x20>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4798      	blx	r3
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40010400 	.word	0x40010400
 80040bc:	20002384 	.word	0x20002384

080040c0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<1); //WRITE 1 TO CLEAR
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <EXTI1_IRQHandler+0x1c>)
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	4a04      	ldr	r2, [pc, #16]	; (80040dc <EXTI1_IRQHandler+0x1c>)
 80040ca:	f043 0302 	orr.w	r3, r3, #2
 80040ce:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80040d0:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <EXTI1_IRQHandler+0x20>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4798      	blx	r3
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40010400 	.word	0x40010400
 80040e0:	20002384 	.word	0x20002384

080040e4 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<2); //WRITE 1 TO CLEAR
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <EXTI2_IRQHandler+0x1c>)
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	4a04      	ldr	r2, [pc, #16]	; (8004100 <EXTI2_IRQHandler+0x1c>)
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <EXTI2_IRQHandler+0x20>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4798      	blx	r3
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40010400 	.word	0x40010400
 8004104:	20002384 	.word	0x20002384

08004108 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<3); //WRITE 1 TO CLEAR
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <EXTI3_IRQHandler+0x1c>)
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <EXTI3_IRQHandler+0x1c>)
 8004112:	f043 0308 	orr.w	r3, r3, #8
 8004116:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <EXTI3_IRQHandler+0x20>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4798      	blx	r3
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40010400 	.word	0x40010400
 8004128:	20002384 	.word	0x20002384

0800412c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<4); //WRITE 1 TO CLEAR
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <EXTI4_IRQHandler+0x1c>)
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <EXTI4_IRQHandler+0x1c>)
 8004136:	f043 0310 	orr.w	r3, r3, #16
 800413a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <EXTI4_IRQHandler+0x20>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	4798      	blx	r3
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40010400 	.word	0x40010400
 800414c:	20002384 	.word	0x20002384

08004150 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<5))
 8004154:	4b26      	ldr	r3, [pc, #152]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->EXTI_PR |= (1<<5); //WRITE 1 TO CLEAR
 8004160:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 8004166:	f043 0320 	orr.w	r3, r3, #32
 800416a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <EXTI9_5_IRQHandler+0xa4>)
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<6))
 8004172:	4b1f      	ldr	r3, [pc, #124]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->EXTI_PR |= (1<<6); //WRITE 1 TO CLEAR
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 8004184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004188:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[6]();
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <EXTI9_5_IRQHandler+0xa4>)
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<7))
 8004190:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->EXTI_PR |= (1<<7); //WRITE 1 TO CLEAR
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 80041a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[7]();
 80041a8:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <EXTI9_5_IRQHandler+0xa4>)
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<8))
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->EXTI_PR |= (1<<8); //WRITE 1 TO CLEAR
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[8]();
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <EXTI9_5_IRQHandler+0xa4>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<9))
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <EXTI9_5_IRQHandler+0x9a>
	{
		EXTI->EXTI_PR |= (1<<9); //WRITE 1 TO CLEAR
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <EXTI9_5_IRQHandler+0xa0>)
 80041de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041e2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[9]();
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <EXTI9_5_IRQHandler+0xa4>)
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	4798      	blx	r3
	}
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40010400 	.word	0x40010400
 80041f4:	20002384 	.word	0x20002384

080041f8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<10))
 80041fc:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <EXTI15_10_IRQHandler+0x24>
	{
		EXTI->EXTI_PR |= (1<<10); //WRITE 1 TO CLEAR
 8004208:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4a2c      	ldr	r2, [pc, #176]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800420e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004212:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[10]();
 8004214:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <EXTI15_10_IRQHandler+0xcc>)
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	4798      	blx	r3
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
		GP_IRQ_CallBack[15]();
	}


}
 800421a:	e04e      	b.n	80042ba <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<11))
 800421c:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <EXTI15_10_IRQHandler+0x44>
		EXTI->EXTI_PR |= (1<<11); //WRITE 1 TO CLEAR
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800422e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004232:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[11]();
 8004234:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <EXTI15_10_IRQHandler+0xcc>)
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	4798      	blx	r3
}
 800423a:	e03e      	b.n	80042ba <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<12))
 800423c:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <EXTI15_10_IRQHandler+0x64>
		EXTI->EXTI_PR |= (1<<12); //WRITE 1 TO CLEAR
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	4a1c      	ldr	r2, [pc, #112]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800424e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004252:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[12]();
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <EXTI15_10_IRQHandler+0xcc>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	4798      	blx	r3
}
 800425a:	e02e      	b.n	80042ba <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<13))
 800425c:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <EXTI15_10_IRQHandler+0x84>
		EXTI->EXTI_PR |= (1<<13); //WRITE 1 TO CLEAR
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	4a14      	ldr	r2, [pc, #80]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800426e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004272:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[13]();
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <EXTI15_10_IRQHandler+0xcc>)
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	4798      	blx	r3
}
 800427a:	e01e      	b.n	80042ba <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<14))
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <EXTI15_10_IRQHandler+0xa4>
		EXTI->EXTI_PR |= (1<<14); //WRITE 1 TO CLEAR
 8004288:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800428e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004292:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[14]();
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <EXTI15_10_IRQHandler+0xcc>)
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	4798      	blx	r3
}
 800429a:	e00e      	b.n	80042ba <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<15))
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <EXTI15_10_IRQHandler+0xc2>
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <EXTI15_10_IRQHandler+0xc8>)
 80042ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[15]();
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <EXTI15_10_IRQHandler+0xcc>)
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	4798      	blx	r3
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40010400 	.word	0x40010400
 80042c4:	20002384 	.word	0x20002384

080042c8 <get_CRLH_position>:
 *  ENG-TERA
 */
#include "GPIO_DRIVER.h"


int get_CRLH_position(uint32_t pin_num){
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

	switch(pin_num)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b0f      	cmp	r3, #15
 80042d4:	d842      	bhi.n	800435c <get_CRLH_position+0x94>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <get_CRLH_position+0x14>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	0800431d 	.word	0x0800431d
 80042e0:	08004321 	.word	0x08004321
 80042e4:	08004325 	.word	0x08004325
 80042e8:	08004329 	.word	0x08004329
 80042ec:	0800432d 	.word	0x0800432d
 80042f0:	08004331 	.word	0x08004331
 80042f4:	08004335 	.word	0x08004335
 80042f8:	08004339 	.word	0x08004339
 80042fc:	0800433d 	.word	0x0800433d
 8004300:	08004341 	.word	0x08004341
 8004304:	08004345 	.word	0x08004345
 8004308:	08004349 	.word	0x08004349
 800430c:	0800434d 	.word	0x0800434d
 8004310:	08004351 	.word	0x08004351
 8004314:	08004355 	.word	0x08004355
 8004318:	08004359 	.word	0x08004359
	{
	case 0:
		return 0;
 800431c:	2300      	movs	r3, #0
 800431e:	e01e      	b.n	800435e <get_CRLH_position+0x96>
	case 1:
		return 4;
 8004320:	2304      	movs	r3, #4
 8004322:	e01c      	b.n	800435e <get_CRLH_position+0x96>
	case 2:
		return 8;
 8004324:	2308      	movs	r3, #8
 8004326:	e01a      	b.n	800435e <get_CRLH_position+0x96>
	case 3:
		return 12;
 8004328:	230c      	movs	r3, #12
 800432a:	e018      	b.n	800435e <get_CRLH_position+0x96>
	case 4:
		return 16;
 800432c:	2310      	movs	r3, #16
 800432e:	e016      	b.n	800435e <get_CRLH_position+0x96>
	case 5:
		return 20;
 8004330:	2314      	movs	r3, #20
 8004332:	e014      	b.n	800435e <get_CRLH_position+0x96>
	case 6:
		return 24;
 8004334:	2318      	movs	r3, #24
 8004336:	e012      	b.n	800435e <get_CRLH_position+0x96>
	case 7:
		return 28;
 8004338:	231c      	movs	r3, #28
 800433a:	e010      	b.n	800435e <get_CRLH_position+0x96>
	case 8:
		return 0;
 800433c:	2300      	movs	r3, #0
 800433e:	e00e      	b.n	800435e <get_CRLH_position+0x96>
	case 9:
		return 4;
 8004340:	2304      	movs	r3, #4
 8004342:	e00c      	b.n	800435e <get_CRLH_position+0x96>
	case 10:
		return 8;
 8004344:	2308      	movs	r3, #8
 8004346:	e00a      	b.n	800435e <get_CRLH_position+0x96>
	case 11:
		return 12;
 8004348:	230c      	movs	r3, #12
 800434a:	e008      	b.n	800435e <get_CRLH_position+0x96>
	case 12:
		return 16;
 800434c:	2310      	movs	r3, #16
 800434e:	e006      	b.n	800435e <get_CRLH_position+0x96>
	case 13:
		return 20;
 8004350:	2314      	movs	r3, #20
 8004352:	e004      	b.n	800435e <get_CRLH_position+0x96>
	case 14:
		return 24;
 8004354:	2318      	movs	r3, #24
 8004356:	e002      	b.n	800435e <get_CRLH_position+0x96>
	case 15:
		return 28;
 8004358:	231c      	movs	r3, #28
 800435a:	e000      	b.n	800435e <get_CRLH_position+0x96>
	}
	return 0;
 800435c:	2300      	movs	r3, #0

}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <MCAL_GPIO_Init>:
 * @param [in]	-Pin_config_s: Is a pointer to the structure that contains the information of the pin we want to configure
 * @retval		-none
 * Note			-In Our package LQFP48 we have only GPIOA and GPIOB
 */

void MCAL_GPIO_Init(GPIO_REGISTERS_t *GPIOx, Pin_Config_t * Pin_config_s){
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]


	if(GPIOx == GPIOA)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a4c      	ldr	r2, [pc, #304]	; (80044a8 <MCAL_GPIO_Init+0x140>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d106      	bne.n	8004388 <MCAL_GPIO_Init+0x20>
	{
		GPIOA_CLOCK_EN();
 800437a:	4b4c      	ldr	r3, [pc, #304]	; (80044ac <MCAL_GPIO_Init+0x144>)
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	4a4b      	ldr	r2, [pc, #300]	; (80044ac <MCAL_GPIO_Init+0x144>)
 8004380:	f043 0304 	orr.w	r3, r3, #4
 8004384:	6193      	str	r3, [r2, #24]
 8004386:	e014      	b.n	80043b2 <MCAL_GPIO_Init+0x4a>
	}
	else if(GPIOx == GPIOB)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a49      	ldr	r2, [pc, #292]	; (80044b0 <MCAL_GPIO_Init+0x148>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d106      	bne.n	800439e <MCAL_GPIO_Init+0x36>
	{
		GPIOB_CLOCK_EN();
 8004390:	4b46      	ldr	r3, [pc, #280]	; (80044ac <MCAL_GPIO_Init+0x144>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	4a45      	ldr	r2, [pc, #276]	; (80044ac <MCAL_GPIO_Init+0x144>)
 8004396:	f043 0308 	orr.w	r3, r3, #8
 800439a:	6193      	str	r3, [r2, #24]
 800439c:	e009      	b.n	80043b2 <MCAL_GPIO_Init+0x4a>
	}
	else if(GPIOx == GPIOC)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a44      	ldr	r2, [pc, #272]	; (80044b4 <MCAL_GPIO_Init+0x14c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d105      	bne.n	80043b2 <MCAL_GPIO_Init+0x4a>
	{
		GPIOC_CLOCK_EN();
 80043a6:	4b41      	ldr	r3, [pc, #260]	; (80044ac <MCAL_GPIO_Init+0x144>)
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	4a40      	ldr	r2, [pc, #256]	; (80044ac <MCAL_GPIO_Init+0x144>)
 80043ac:	f043 0310 	orr.w	r3, r3, #16
 80043b0:	6193      	str	r3, [r2, #24]
	}
	volatile uint32_t *configRegister = NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
	uint32_t pinConfig = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]

	configRegister = (Pin_config_s->Pin_Num < 8)? &GPIOx->GPIOx_CRL : &GPIOx->GPIOx_CRH;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b07      	cmp	r3, #7
 80043c0:	d801      	bhi.n	80043c6 <MCAL_GPIO_Init+0x5e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	e001      	b.n	80043ca <MCAL_GPIO_Init+0x62>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3304      	adds	r3, #4
 80043ca:	60bb      	str	r3, [r7, #8]
	(*configRegister) &= ~(0x000F << get_CRLH_position(Pin_config_s->Pin_Num));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff ff79 	bl	80042c8 <get_CRLH_position>
 80043d6:	4602      	mov	r2, r0
 80043d8:	230f      	movs	r3, #15
 80043da:	4093      	lsls	r3, r2
 80043dc:	43da      	mvns	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	401a      	ands	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	601a      	str	r2, [r3, #0]

	/* IF OUTPUT */

	if( (Pin_config_s->mode == Output_ALF_Push_pull) || (Pin_config_s->mode == Output_ALF_Open_drain) || (Pin_config_s->mode == Output_Open_drain) || (Pin_config_s->mode == Output_Push_pull) )
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d00b      	beq.n	8004408 <MCAL_GPIO_Init+0xa0>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b07      	cmp	r3, #7
 80043f6:	d007      	beq.n	8004408 <MCAL_GPIO_Init+0xa0>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	d003      	beq.n	8004408 <MCAL_GPIO_Init+0xa0>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d10a      	bne.n	800441e <MCAL_GPIO_Init+0xb6>
	{
		pinConfig = ( ( ( (Pin_config_s->mode - 4 )<< 2 ) | (Pin_config_s->Speed_Output) ) & 0x0F );
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	3b04      	subs	r3, #4
 800440e:	009a      	lsls	r2, r3, #2
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	e031      	b.n	8004482 <MCAL_GPIO_Init+0x11a>
	}

	else // IF INPUT
	{
		if( (Pin_config_s->mode == Input_Analog) || (Pin_config_s ->mode == Input_floating) )
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <MCAL_GPIO_Init+0xc6>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d106      	bne.n	800443c <MCAL_GPIO_Init+0xd4>
		{
			pinConfig =( ( (Pin_config_s->mode << 2) | 0x00 ) & 0x0F );
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e022      	b.n	8004482 <MCAL_GPIO_Init+0x11a>
		}
		else if(Pin_config_s->mode == Input_AF)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d102      	bne.n	800444a <MCAL_GPIO_Init+0xe2>
		{
			pinConfig =( ( (Input_floating << 2 ) | 0x00 ) & 0x0F );
 8004444:	2304      	movs	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e01b      	b.n	8004482 <MCAL_GPIO_Init+0x11a>
		}
		else // IF INPUT PULLUP\PULLDOWN
		{
			pinConfig = ( ( (Input_PullUp << 2 ) | 0x00 ) & 0x0F );
 800444a:	2308      	movs	r3, #8
 800444c:	60fb      	str	r3, [r7, #12]
			if(Pin_config_s->mode == Input_PullUp) // IF PULL UP
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d10a      	bne.n	800446c <MCAL_GPIO_Init+0x104>
			{
				GPIOx->GPIOx_ODR |= (1<<Pin_config_s->Pin_Num) ;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	2101      	movs	r1, #1
 8004460:	fa01 f202 	lsl.w	r2, r1, r2
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	e00a      	b.n	8004482 <MCAL_GPIO_Init+0x11a>
			}
			else // IF PULL DOWN
			{
				GPIOx->GPIOx_ODR &= ~(1<<Pin_config_s->Pin_Num) ;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f202 	lsl.w	r2, r1, r2
 800447a:	43d2      	mvns	r2, r2
 800447c:	401a      	ands	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60da      	str	r2, [r3, #12]

			}
		}
	}
	(*configRegister) |=( (pinConfig) << get_CRLH_position(Pin_config_s->Pin_Num) );
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff ff1e 	bl	80042c8 <get_CRLH_position>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	fa03 f202 	lsl.w	r2, r3, r2
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	431a      	orrs	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	601a      	str	r2, [r3, #0]
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40010800 	.word	0x40010800
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40010c00 	.word	0x40010c00
 80044b4:	40011000 	.word	0x40011000

080044b8 <MCAL_GPIO_DeInit>:
 * @param [in]	-GPIOx: Where x could be from A >> E depending on the Package
 * @param [in]	-Pin_num: The pin number which we want to reset
 * @retval		-None
 * Note			-None
 */
void MCAL_GPIO_DeInit(GPIO_REGISTERS_t *GPIOx,uint8_t Pin_num){
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]

	//	GPIOx->GPIOx_CRH = 0x44444444;
	//	GPIOx->GPIOx_CRL = 0x44444444;
	//	GPIOx->GPIOx_ODR = 0;

	volatile uint32_t *configRegister = NULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

	configRegister = (Pin_num < 8)? &GPIOx->GPIOx_CRL : &GPIOx->GPIOx_CRH;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	2b07      	cmp	r3, #7
 80044cc:	d801      	bhi.n	80044d2 <MCAL_GPIO_DeInit+0x1a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	e001      	b.n	80044d6 <MCAL_GPIO_DeInit+0x1e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]
	(*configRegister) &= ~(0x000F << get_CRLH_position(Pin_num));
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fef4 	bl	80042c8 <get_CRLH_position>
 80044e0:	4602      	mov	r2, r0
 80044e2:	230f      	movs	r3, #15
 80044e4:	4093      	lsls	r3, r2
 80044e6:	43da      	mvns	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	401a      	ands	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	601a      	str	r2, [r3, #0]
	(*configRegister) |= (0x0004 << get_CRLH_position(Pin_num));
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fee7 	bl	80042c8 <get_CRLH_position>
 80044fa:	4602      	mov	r2, r0
 80044fc:	2304      	movs	r3, #4
 80044fe:	fa03 f202 	lsl.w	r2, r3, r2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	431a      	orrs	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	601a      	str	r2, [r3, #0]

	GPIOx->GPIOx_ODR &= ~(1<<Pin_num) ;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	2101      	movs	r1, #1
 8004514:	fa01 f202 	lsl.w	r2, r1, r2
 8004518:	43d2      	mvns	r2, r2
 800451a:	401a      	ands	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]


}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <MCAL_GPIO_WritePin>:
 * @param [in]	-Value: 1 for output high or 0 for output low
 * @param [in]	-Pin_Num: Variable contains the output pin number
 * @retval		-None
 * Note			-None
 */
void MCAL_GPIO_WritePin(GPIO_REGISTERS_t *GPIOx,uint32_t Pin_Num,uint32_t Value){
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]

	GPIOx->GPIOx_ODR &= ~(1<<Pin_Num);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2101      	movs	r1, #1
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	fa01 f202 	lsl.w	r2, r1, r2
 8004540:	43d2      	mvns	r2, r2
 8004542:	401a      	ands	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	60da      	str	r2, [r3, #12]
	GPIOx->GPIOx_ODR |= (Value<<Pin_Num);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	431a      	orrs	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	60da      	str	r2, [r3, #12]

}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <I2C1_ER_IRQHandler>:
 * ======================================================================================================================
 */

//Not supported
void I2C1_ER_IRQHandler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0


}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0

}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0


}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0

}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <RCC_Get_SYSCLK>:
#include "RCC_DRIVER.h"
uint8_t AHB_Prescaler[] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};
uint8_t APB2_Prescaler[] = {0,0,0,0,1,2,3,4};


uint32_t RCC_Get_SYSCLK(void){
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0

	int x;
	x = ( (RCC->RCC_CFGR)  & (0b11 << 2) ) >> 2;
 800459a:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <RCC_Get_SYSCLK+0x38>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	607b      	str	r3, [r7, #4]
	switch (x)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d005      	beq.n	80045b8 <RCC_Get_SYSCLK+0x24>
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d005      	beq.n	80045bc <RCC_Get_SYSCLK+0x28>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <RCC_Get_SYSCLK+0x2c>
	{
	case 0:
		return HSI;
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <RCC_Get_SYSCLK+0x3c>)
 80045b6:	e004      	b.n	80045c2 <RCC_Get_SYSCLK+0x2e>
		break;
	case 1:
		return HSE;
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <RCC_Get_SYSCLK+0x40>)
 80045ba:	e002      	b.n	80045c2 <RCC_Get_SYSCLK+0x2e>
		break;
	case 2:
		return PLL;
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <RCC_Get_SYSCLK+0x40>)
 80045be:	e000      	b.n	80045c2 <RCC_Get_SYSCLK+0x2e>
		break;
	}
return 0;
 80045c0:	2300      	movs	r3, #0

}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	40021000 	.word	0x40021000
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	00f42400 	.word	0x00f42400

080045d8 <RCC_Get_HCLK>:
uint32_t RCC_Get_HCLK(void){
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0

	return RCC_Get_SYSCLK() >> AHB_Prescaler[ ( (RCC->RCC_CFGR) & (0b111 << 4) ) >> 4 ];
 80045dc:	f7ff ffda 	bl	8004594 <RCC_Get_SYSCLK>
 80045e0:	4601      	mov	r1, r0
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <RCC_Get_HCLK+0x20>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	091b      	lsrs	r3, r3, #4
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4a03      	ldr	r2, [pc, #12]	; (80045fc <RCC_Get_HCLK+0x24>)
 80045ee:	5cd3      	ldrb	r3, [r2, r3]
 80045f0:	fa21 f303 	lsr.w	r3, r1, r3


}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000
 80045fc:	20000014 	.word	0x20000014

08004600 <RCC_Get_PCLK2>:
uint32_t RCC_Get_PCLK2(void){
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0

	return RCC_Get_HCLK() >> APB2_Prescaler[ ( (RCC->RCC_CFGR) & (0b111 << 11) ) >> 11 ];
 8004604:	f7ff ffe8 	bl	80045d8 <RCC_Get_HCLK>
 8004608:	4601      	mov	r1, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <RCC_Get_PCLK2+0x20>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	0adb      	lsrs	r3, r3, #11
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4a03      	ldr	r2, [pc, #12]	; (8004624 <RCC_Get_PCLK2+0x24>)
 8004616:	5cd3      	ldrb	r3, [r2, r3]
 8004618:	fa21 f303 	lsr.w	r3, r1, r3

}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40021000 	.word	0x40021000
 8004624:	20000024 	.word	0x20000024

08004628 <SPI1_IRQHandler>:
//------------------<< ISR >>--------------------
//-----------------------------------------------


void SPI1_IRQHandler(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI1->SPI_SR & (1<<0) ) >> 0 );
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <SPI1_IRQHandler+0x40>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	b2da      	uxtb	r2, r3
 8004638:	793b      	ldrb	r3, [r7, #4]
 800463a:	f362 0300 	bfi	r3, r2, #0, #1
 800463e:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI1->SPI_SR & (1<<1) ) >> 1 );
 8004640:	4b09      	ldr	r3, [pc, #36]	; (8004668 <SPI1_IRQHandler+0x40>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	b2da      	uxtb	r2, r3
 800464c:	793b      	ldrb	r3, [r7, #4]
 800464e:	f362 0341 	bfi	r3, r2, #1, #1
 8004652:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <SPI1_IRQHandler+0x44>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	1d3a      	adds	r2, r7, #4
 800465c:	4610      	mov	r0, r2
 800465e:	4798      	blx	r3



}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40013000 	.word	0x40013000
 800466c:	200023c0 	.word	0x200023c0

08004670 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI2->SPI_SR & (1<<0) ) >> 0 );
 8004676:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <SPI2_IRQHandler+0x40>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	793b      	ldrb	r3, [r7, #4]
 8004682:	f362 0300 	bfi	r3, r2, #0, #1
 8004686:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI2->SPI_SR & (1<<1) ) >> 1 );
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <SPI2_IRQHandler+0x40>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	b2da      	uxtb	r2, r3
 8004694:	793b      	ldrb	r3, [r7, #4]
 8004696:	f362 0341 	bfi	r3, r2, #1, #1
 800469a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <SPI2_IRQHandler+0x44>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	1d3a      	adds	r2, r7, #4
 80046a4:	4610      	mov	r0, r2
 80046a6:	4798      	blx	r3

}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40003800 	.word	0x40003800
 80046b4:	200023c0 	.word	0x200023c0

080046b8 <MCAL_USART_Init>:
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @param [in]	-USART_Config_s: Is a pointer to the structure that contains the information of the SPI we want to configure
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 and USART2
 */
void    MCAL_USART_Init(USART_REGISTERS_t * USARTx,USART_Config_t * USART_Config_s){
 80046b8:	b5b0      	push	{r4, r5, r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]

	Global_USART_Config_s[0] = *USART_Config_s;
 80046c2:	4a7c      	ldr	r2, [pc, #496]	; (80048b4 <MCAL_USART_Init+0x1fc>)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	4614      	mov	r4, r2
 80046c8:	461d      	mov	r5, r3
 80046ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046d2:	e884 0003 	stmia.w	r4, {r0, r1}
	if(USARTx == USART1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a77      	ldr	r2, [pc, #476]	; (80048b8 <MCAL_USART_Init+0x200>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10a      	bne.n	80046f4 <MCAL_USART_Init+0x3c>
	{
		Global_USART_Config_s[0] = *USART_Config_s;
 80046de:	4a75      	ldr	r2, [pc, #468]	; (80048b4 <MCAL_USART_Init+0x1fc>)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	4614      	mov	r4, r2
 80046e4:	461d      	mov	r5, r3
 80046e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80046f2:	e01e      	b.n	8004732 <MCAL_USART_Init+0x7a>
	}
	else if(USARTx == USART2)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a71      	ldr	r2, [pc, #452]	; (80048bc <MCAL_USART_Init+0x204>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d10b      	bne.n	8004714 <MCAL_USART_Init+0x5c>
	{
		Global_USART_Config_s[1] = *USART_Config_s;
 80046fc:	4b6d      	ldr	r3, [pc, #436]	; (80048b4 <MCAL_USART_Init+0x1fc>)
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	f103 0418 	add.w	r4, r3, #24
 8004704:	4615      	mov	r5, r2
 8004706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800470a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800470e:	e884 0003 	stmia.w	r4, {r0, r1}
 8004712:	e00e      	b.n	8004732 <MCAL_USART_Init+0x7a>
	}
	else if(USARTx == USART3)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a6a      	ldr	r2, [pc, #424]	; (80048c0 <MCAL_USART_Init+0x208>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d10a      	bne.n	8004732 <MCAL_USART_Init+0x7a>
	{
		Global_USART_Config_s[2] = *USART_Config_s;
 800471c:	4b65      	ldr	r3, [pc, #404]	; (80048b4 <MCAL_USART_Init+0x1fc>)
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8004724:	4615      	mov	r5, r2
 8004726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800472a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800472e:	e884 0003 	stmia.w	r4, {r0, r1}
	}
	if(USART_Config_s->Sync_EN == USART_Enable)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d106      	bne.n	8004748 <MCAL_USART_Init+0x90>
	{
		// 1- Bit 11 CLKEN: Clock enable

		USARTx->USART_CR2 |= (1<<11);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	611a      	str	r2, [r3, #16]
 8004746:	e05e      	b.n	8004806 <MCAL_USART_Init+0x14e>

	}
	else if(USART_Config_s->Async_EN == USART_Enable)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d15a      	bne.n	8004806 <MCAL_USART_Init+0x14e>
	{

		// 1- USART ENABLE
		USARTx->USART_CR1 |= (1<<13);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	60da      	str	r2, [r3, #12]

		// 2- TX and RX ENABLE

		USARTx->USART_CR1 |= ( (1<<2) | (1<<3) );
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f043 020c 	orr.w	r2, r3, #12
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60da      	str	r2, [r3, #12]

		// 3- Program the M bit in USART_CR1 to define the word length.

		USARTx->USART_CR1 |= USART_Config_s->Async_Config_s.Word_Length;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	7912      	ldrb	r2, [r2, #4]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60da      	str	r2, [r3, #12]

		// 4- Program the number of stop bits in USART_CR2.

		USARTx->USART_CR2 |= USART_Config_s->Async_Config_s.Stop_Bits;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	7952      	ldrb	r2, [r2, #5]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	611a      	str	r2, [r3, #16]

		// 5 - Select the desired baud rate using the USART_BRR register.

		USARTx->USART_BRR |= USART_BRR_Register(RCC_Get_PCLK2(),USART_Config_s->Async_Config_s.Baud_Rate);
 8004784:	f7ff ff3c 	bl	8004600 <RCC_Get_PCLK2>
 8004788:	4602      	mov	r2, r0
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	011c      	lsls	r4, r3, #4
 8004796:	f7ff ff33 	bl	8004600 <RCC_Get_PCLK2>
 800479a:	4602      	mov	r2, r0
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009a      	lsls	r2, r3, #2
 80047a4:	441a      	add	r2, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80047b0:	f7ff ff26 	bl	8004600 <RCC_Get_PCLK2>
 80047b4:	4602      	mov	r2, r0
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	2264      	movs	r2, #100	; 0x64
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	1aeb      	subs	r3, r5, r3
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	4a3e      	ldr	r2, [pc, #248]	; (80048c4 <MCAL_USART_Init+0x20c>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	ea44 0203 	orr.w	r2, r4, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	609a      	str	r2, [r3, #8]

		// 6 - Set Parity Configurations

		if(USART_Config_s->Async_Config_s.Parity.Parity_Enable == USART_Enable)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	7b1b      	ldrb	r3, [r3, #12]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d10c      	bne.n	8004806 <MCAL_USART_Init+0x14e>
		{

			USARTx->USART_CR1 |= (1<<10);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	60da      	str	r2, [r3, #12]
			USARTx->USART_CR1 |= USART_Config_s->Async_Config_s.Parity.Parity_Even_Odd;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	7b52      	ldrb	r2, [r2, #13]
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	60da      	str	r2, [r3, #12]
		}
	}

	if( (USART_Config_s->interrupts_CNFG.TX_Interrupt_Enable_Or_Disable) == USART_Enable )
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	7c1b      	ldrb	r3, [r3, #16]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d108      	bne.n	8004820 <MCAL_USART_Init+0x168>
	{
		USARTx->USART_CR1 |= (1<<7);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60da      	str	r2, [r3, #12]
		TX_flag1 =1;
 800481a:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <MCAL_USART_Init+0x210>)
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
	}
	if( (USART_Config_s->interrupts_CNFG.RX_Interrupt_Enable_Or_Disable) == USART_Enable )
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	7c5b      	ldrb	r3, [r3, #17]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d108      	bne.n	800483a <MCAL_USART_Init+0x182>
	{
		USARTx->USART_CR1 |= (1<<5);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]
		RX_flag2=1;
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <MCAL_USART_Init+0x214>)
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
	}
	if( (USART_Config_s->interrupts_CNFG.TC_Interrupt_Enable_Or_Disable) == USART_Enable )
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	7c9b      	ldrb	r3, [r3, #18]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d108      	bne.n	8004854 <MCAL_USART_Init+0x19c>
	{
		USARTx->USART_CR1 |= (1<<6);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60da      	str	r2, [r3, #12]
		TC_flag3=1;
 800484e:	4b20      	ldr	r3, [pc, #128]	; (80048d0 <MCAL_USART_Init+0x218>)
 8004850:	2201      	movs	r2, #1
 8004852:	701a      	strb	r2, [r3, #0]
	}

	if( (TX_flag1 || RX_flag2 || TC_flag3) )
 8004854:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <MCAL_USART_Init+0x210>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <MCAL_USART_Init+0x1b4>
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <MCAL_USART_Init+0x214>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d103      	bne.n	800486c <MCAL_USART_Init+0x1b4>
 8004864:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <MCAL_USART_Init+0x218>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01f      	beq.n	80048ac <MCAL_USART_Init+0x1f4>
	{

		if(USARTx == USART1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <MCAL_USART_Init+0x200>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d106      	bne.n	8004882 <MCAL_USART_Init+0x1ca>
		{
			NVIC->NVIC_ISER1 |= (1<< 5 );
 8004874:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <MCAL_USART_Init+0x21c>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <MCAL_USART_Init+0x21c>)
 800487a:	f043 0320 	orr.w	r3, r3, #32
 800487e:	6053      	str	r3, [r2, #4]
		else if(USARTx == USART3)
		{
			NVIC->NVIC_ISER1 |= (1<<7);
		}
	}
}
 8004880:	e014      	b.n	80048ac <MCAL_USART_Init+0x1f4>
		else if(USARTx == USART2)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a0d      	ldr	r2, [pc, #52]	; (80048bc <MCAL_USART_Init+0x204>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d106      	bne.n	8004898 <MCAL_USART_Init+0x1e0>
			NVIC->NVIC_ISER1 |= (1<<6);
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <MCAL_USART_Init+0x21c>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4a11      	ldr	r2, [pc, #68]	; (80048d4 <MCAL_USART_Init+0x21c>)
 8004890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004894:	6053      	str	r3, [r2, #4]
}
 8004896:	e009      	b.n	80048ac <MCAL_USART_Init+0x1f4>
		else if(USARTx == USART3)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <MCAL_USART_Init+0x208>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d105      	bne.n	80048ac <MCAL_USART_Init+0x1f4>
			NVIC->NVIC_ISER1 |= (1<<7);
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <MCAL_USART_Init+0x21c>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <MCAL_USART_Init+0x21c>)
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	6053      	str	r3, [r2, #4]
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bdb0      	pop	{r4, r5, r7, pc}
 80048b4:	200023c4 	.word	0x200023c4
 80048b8:	40013800 	.word	0x40013800
 80048bc:	40004400 	.word	0x40004400
 80048c0:	40004800 	.word	0x40004800
 80048c4:	51eb851f 	.word	0x51eb851f
 80048c8:	2000234c 	.word	0x2000234c
 80048cc:	2000234d 	.word	0x2000234d
 80048d0:	2000234e 	.word	0x2000234e
 80048d4:	e000e100 	.word	0xe000e100

080048d8 <Which_UART>:


/*
 * This functions is used by uart driver to get the index of the global array for the used instance
 * */
static uint8_t Which_UART(USART_REGISTERS_t * USARTx){
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a0b      	ldr	r2, [pc, #44]	; (8004910 <Which_UART+0x38>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <Which_UART+0x14>
	{
		return 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	e00c      	b.n	8004906 <Which_UART+0x2e>
	}
	else if(USARTx == USART2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a09      	ldr	r2, [pc, #36]	; (8004914 <Which_UART+0x3c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <Which_UART+0x20>
	{
		return 1;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e006      	b.n	8004906 <Which_UART+0x2e>
	}
	else if(USARTx == USART3)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a07      	ldr	r2, [pc, #28]	; (8004918 <Which_UART+0x40>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <Which_UART+0x2c>
	{
		return 3;
 8004900:	2303      	movs	r3, #3
 8004902:	e000      	b.n	8004906 <Which_UART+0x2e>
	}
	return 4;		//will cause error for user when he uses wrong address for USARTx
 8004904:	2304      	movs	r3, #4
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	40013800 	.word	0x40013800
 8004914:	40004400 	.word	0x40004400
 8004918:	40004800 	.word	0x40004800

0800491c <MCAL_USART_SendChar>:
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @param [in]	-Buffer: Is a pointer to the buffer that we want to send
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 and USART2
 */
void    MCAL_USART_SendChar(USART_REGISTERS_t * USARTx,char Buffer){
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]

	if(!(  (TX_flag1)||(TC_flag3) ))
 8004928:	4b12      	ldr	r3, [pc, #72]	; (8004974 <MCAL_USART_SendChar+0x58>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <MCAL_USART_SendChar+0x2a>
 8004930:	4b11      	ldr	r3, [pc, #68]	; (8004978 <MCAL_USART_SendChar+0x5c>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <MCAL_USART_SendChar+0x2a>
	{
		while(!( USARTx->USART_SR & (1<<7) ) );
 8004938:	bf00      	nop
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f9      	beq.n	800493a <MCAL_USART_SendChar+0x1e>

	}

	uint8_t Gindex=Which_UART(USARTx);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff ffc6 	bl	80048d8 <Which_UART>
 800494c:	4603      	mov	r3, r0
 800494e:	73fb      	strb	r3, [r7, #15]

	if(Global_USART_Config_s[Gindex].Async_Config_s.Word_Length == Nine_bits)
	{
		USARTx->USART_DR = ( Buffer  & 0x01FF );
	}
	else if(Global_USART_Config_s[Gindex].Async_Config_s.Word_Length == Eight_bits)
 8004950:	7bfa      	ldrb	r2, [r7, #15]
 8004952:	490a      	ldr	r1, [pc, #40]	; (800497c <MCAL_USART_SendChar+0x60>)
 8004954:	4613      	mov	r3, r2
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4413      	add	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	440b      	add	r3, r1
 800495e:	3304      	adds	r3, #4
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d102      	bne.n	800496c <MCAL_USART_SendChar+0x50>
	{
		USARTx->USART_DR = ( Buffer  & 0xFF );
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	605a      	str	r2, [r3, #4]
	}




}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	2000234c 	.word	0x2000234c
 8004978:	2000234e 	.word	0x2000234e
 800497c:	200023c4 	.word	0x200023c4

08004980 <MCAL_USART_ReceiveChar>:
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @param [in]	-Buffer: Is a pointer to the buffer where we want to save the received value
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 and USART2
 */
void MCAL_USART_ReceiveChar(USART_REGISTERS_t * USARTx,char* Buffer){
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]

	if( !(  (TX_flag1)||(RX_flag2)||(TC_flag3) )  )
 800498a:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <MCAL_USART_ReceiveChar+0x8c>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10e      	bne.n	80049b0 <MCAL_USART_ReceiveChar+0x30>
 8004992:	4b1f      	ldr	r3, [pc, #124]	; (8004a10 <MCAL_USART_ReceiveChar+0x90>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <MCAL_USART_ReceiveChar+0x30>
 800499a:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <MCAL_USART_ReceiveChar+0x94>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <MCAL_USART_ReceiveChar+0x30>
	{
		while(!( USARTx->USART_SR & (1<<5) ) );
 80049a2:	bf00      	nop
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f9      	beq.n	80049a4 <MCAL_USART_ReceiveChar+0x24>

	}
	uint8_t Gindex=Which_UART(USARTx);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff91 	bl	80048d8 <Which_UART>
 80049b6:	4603      	mov	r3, r0
 80049b8:	73fb      	strb	r3, [r7, #15]
		else
		{
			*Buffer = USARTx->USART_DR & 0x01FF;
		}
	}
	else if(Global_USART_Config_s[Gindex].Async_Config_s.Word_Length == Eight_bits)
 80049ba:	7bfa      	ldrb	r2, [r7, #15]
 80049bc:	4916      	ldr	r1, [pc, #88]	; (8004a18 <MCAL_USART_ReceiveChar+0x98>)
 80049be:	4613      	mov	r3, r2
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	4413      	add	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	440b      	add	r3, r1
 80049c8:	3304      	adds	r3, #4
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d118      	bne.n	8004a02 <MCAL_USART_ReceiveChar+0x82>
	{
		if(Global_USART_Config_s[Gindex].Async_Config_s.Parity.Parity_Enable)
 80049d0:	7bfa      	ldrb	r2, [r7, #15]
 80049d2:	4911      	ldr	r1, [pc, #68]	; (8004a18 <MCAL_USART_ReceiveChar+0x98>)
 80049d4:	4613      	mov	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4413      	add	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	440b      	add	r3, r1
 80049de:	330c      	adds	r3, #12
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <MCAL_USART_ReceiveChar+0x78>
		{
			*Buffer = USARTx->USART_DR   & 0x7F ;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	701a      	strb	r2, [r3, #0]
		{
			*Buffer = USARTx->USART_DR & 0x0FF;
		}
	}

}
 80049f6:	e004      	b.n	8004a02 <MCAL_USART_ReceiveChar+0x82>
			*Buffer = USARTx->USART_DR & 0x0FF;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	701a      	strb	r2, [r3, #0]
}
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	2000234c 	.word	0x2000234c
 8004a10:	2000234d 	.word	0x2000234d
 8004a14:	2000234e 	.word	0x2000234e
 8004a18:	200023c4 	.word	0x200023c4

08004a1c <MCAL_USART_GPIO_Pins_Config>:
 * @brief 		-This Function is to configure the USART pins to its alternative function
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 AND USART2
 */
void 	MCAL_USART_GPIO_Pins_Config(USART_REGISTERS_t * USARTx){
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08c      	sub	sp, #48	; 0x30
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

	// USARTx_RX Full duplex Input floating / Input pull-up
	// USARTx_TX(1) Full duplex Alternate function push-pull
	if(USARTx == USART1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a29      	ldr	r2, [pc, #164]	; (8004acc <MCAL_USART_GPIO_Pins_Config+0xb0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d116      	bne.n	8004a5a <MCAL_USART_GPIO_Pins_Config+0x3e>
	{
		// USART1_TX PA9
		//USART1_RX PA10
		Pin_Config_t GPIO_Pin_CNFG_s;
		GPIO_Pin_CNFG_s.Pin_Num = 9;
 8004a2c:	2309      	movs	r3, #9
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_Pin_CNFG_s.mode = Output_ALF_Push_pull;
 8004a30:	2306      	movs	r3, #6
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_Pin_CNFG_s.Speed_Output = speed_10;
 8004a34:	2301      	movs	r3, #1
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 8004a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4824      	ldr	r0, [pc, #144]	; (8004ad0 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 8004a40:	f7ff fc92 	bl	8004368 <MCAL_GPIO_Init>

		GPIO_Pin_CNFG_s.Pin_Num = 10;
 8004a44:	230a      	movs	r3, #10
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_Pin_CNFG_s.mode = Input_AF;
 8004a48:	2308      	movs	r3, #8
 8004a4a:	62bb      	str	r3, [r7, #40]	; 0x28
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 8004a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a50:	4619      	mov	r1, r3
 8004a52:	481f      	ldr	r0, [pc, #124]	; (8004ad0 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 8004a54:	f7ff fc88 	bl	8004368 <MCAL_GPIO_Init>
		GPIO_Pin_CNFG_s.Pin_Num = 11;
		GPIO_Pin_CNFG_s.mode = Input_AF;
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG_s);

	}
}
 8004a58:	e034      	b.n	8004ac4 <MCAL_USART_GPIO_Pins_Config+0xa8>
	else if(USARTx == USART2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <MCAL_USART_GPIO_Pins_Config+0xb8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d116      	bne.n	8004a90 <MCAL_USART_GPIO_Pins_Config+0x74>
		GPIO_Pin_CNFG_s.Pin_Num = 2;
 8004a62:	2302      	movs	r3, #2
 8004a64:	61bb      	str	r3, [r7, #24]
		GPIO_Pin_CNFG_s.mode = Output_ALF_Push_pull;
 8004a66:	2306      	movs	r3, #6
 8004a68:	61fb      	str	r3, [r7, #28]
		GPIO_Pin_CNFG_s.Speed_Output = speed_10;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	623b      	str	r3, [r7, #32]
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 8004a6e:	f107 0318 	add.w	r3, r7, #24
 8004a72:	4619      	mov	r1, r3
 8004a74:	4816      	ldr	r0, [pc, #88]	; (8004ad0 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 8004a76:	f7ff fc77 	bl	8004368 <MCAL_GPIO_Init>
		GPIO_Pin_CNFG_s.Pin_Num = 3;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	61bb      	str	r3, [r7, #24]
		GPIO_Pin_CNFG_s.mode = Input_AF;
 8004a7e:	2308      	movs	r3, #8
 8004a80:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 8004a82:	f107 0318 	add.w	r3, r7, #24
 8004a86:	4619      	mov	r1, r3
 8004a88:	4811      	ldr	r0, [pc, #68]	; (8004ad0 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 8004a8a:	f7ff fc6d 	bl	8004368 <MCAL_GPIO_Init>
}
 8004a8e:	e019      	b.n	8004ac4 <MCAL_USART_GPIO_Pins_Config+0xa8>
	else if(USARTx == USART3)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a11      	ldr	r2, [pc, #68]	; (8004ad8 <MCAL_USART_GPIO_Pins_Config+0xbc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d115      	bne.n	8004ac4 <MCAL_USART_GPIO_Pins_Config+0xa8>
		GPIO_Pin_CNFG_s.Pin_Num = 10;
 8004a98:	230a      	movs	r3, #10
 8004a9a:	60fb      	str	r3, [r7, #12]
		GPIO_Pin_CNFG_s.mode = Output_ALF_Push_pull;
 8004a9c:	2306      	movs	r3, #6
 8004a9e:	613b      	str	r3, [r7, #16]
		GPIO_Pin_CNFG_s.Speed_Output = speed_10;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG_s);
 8004aa4:	f107 030c 	add.w	r3, r7, #12
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	480c      	ldr	r0, [pc, #48]	; (8004adc <MCAL_USART_GPIO_Pins_Config+0xc0>)
 8004aac:	f7ff fc5c 	bl	8004368 <MCAL_GPIO_Init>
		GPIO_Pin_CNFG_s.Pin_Num = 11;
 8004ab0:	230b      	movs	r3, #11
 8004ab2:	60fb      	str	r3, [r7, #12]
		GPIO_Pin_CNFG_s.mode = Input_AF;
 8004ab4:	2308      	movs	r3, #8
 8004ab6:	613b      	str	r3, [r7, #16]
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG_s);
 8004ab8:	f107 030c 	add.w	r3, r7, #12
 8004abc:	4619      	mov	r1, r3
 8004abe:	4807      	ldr	r0, [pc, #28]	; (8004adc <MCAL_USART_GPIO_Pins_Config+0xc0>)
 8004ac0:	f7ff fc52 	bl	8004368 <MCAL_GPIO_Init>
}
 8004ac4:	bf00      	nop
 8004ac6:	3730      	adds	r7, #48	; 0x30
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40013800 	.word	0x40013800
 8004ad0:	40010800 	.word	0x40010800
 8004ad4:	40004400 	.word	0x40004400
 8004ad8:	40004800 	.word	0x40004800
 8004adc:	40010c00 	.word	0x40010c00

08004ae0 <USART1_IRQHandler>:

//-----------------------------------------------
//------------------<< ISR >>--------------------
//-----------------------------------------------
void USART1_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
	interrupts_Bits IRQ = { ( (USART1->USART_SR) & (0b1<<5) ) >> 5 , ( (USART1->USART_SR) & (0b1<<6) ) >> 6 , ( (USART1->USART_SR) & (0b1<<7) ) >> 7};
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	713b      	strb	r3, [r7, #4]
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <USART1_IRQHandler+0x58>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	793b      	ldrb	r3, [r7, #4]
 8004af8:	f362 0300 	bfi	r3, r2, #0, #1
 8004afc:	713b      	strb	r3, [r7, #4]
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <USART1_IRQHandler+0x58>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	099b      	lsrs	r3, r3, #6
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	793b      	ldrb	r3, [r7, #4]
 8004b0c:	f362 0341 	bfi	r3, r2, #1, #1
 8004b10:	713b      	strb	r3, [r7, #4]
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <USART1_IRQHandler+0x58>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	09db      	lsrs	r3, r3, #7
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	793b      	ldrb	r3, [r7, #4]
 8004b20:	f362 0382 	bfi	r3, r2, #2, #1
 8004b24:	713b      	strb	r3, [r7, #4]
	Global_USART_Config_s[0].CallBack_FN (&IRQ);
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <USART1_IRQHandler+0x5c>)
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	1d3a      	adds	r2, r7, #4
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4798      	blx	r3
}\
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40013800 	.word	0x40013800
 8004b3c:	200023c4 	.word	0x200023c4

08004b40 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
	interrupts_Bits IRQ = { ( (USART2->USART_SR) & (0b1<<5) ) >> 5 , ( (USART2->USART_SR) & (0b1<<6) ) >> 6 , ( (USART2->USART_SR) & (0b1<<7) ) >> 7};
 8004b46:	2300      	movs	r3, #0
 8004b48:	713b      	strb	r3, [r7, #4]
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <USART2_IRQHandler+0x58>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	793b      	ldrb	r3, [r7, #4]
 8004b58:	f362 0300 	bfi	r3, r2, #0, #1
 8004b5c:	713b      	strb	r3, [r7, #4]
 8004b5e:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <USART2_IRQHandler+0x58>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	099b      	lsrs	r3, r3, #6
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	793b      	ldrb	r3, [r7, #4]
 8004b6c:	f362 0341 	bfi	r3, r2, #1, #1
 8004b70:	713b      	strb	r3, [r7, #4]
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <USART2_IRQHandler+0x58>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	09db      	lsrs	r3, r3, #7
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	793b      	ldrb	r3, [r7, #4]
 8004b80:	f362 0382 	bfi	r3, r2, #2, #1
 8004b84:	713b      	strb	r3, [r7, #4]
	Global_USART_Config_s[1].CallBack_FN (&IRQ);
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <USART2_IRQHandler+0x5c>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	1d3a      	adds	r2, r7, #4
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4798      	blx	r3
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40004400 	.word	0x40004400
 8004b9c:	200023c4 	.word	0x200023c4

08004ba0 <main>:
void lightsensorTask(void *pvParameters); // Task for light sensor data collection
void relayTask(void *pvParameters); // Task to manage relay control
void JsonProcessingTask(void *pvParameters); // Task for processing JSON data

// Main entry point for the application
int main(void) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af02      	add	r7, sp, #8
	AFIO_CLOCK_EN(); // Enable AFIO clock for alternate function I/O
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	; (8004ca0 <main+0x100>)
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	4a3d      	ldr	r2, [pc, #244]	; (8004ca0 <main+0x100>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6193      	str	r3, [r2, #24]
	USART1_CLOCK_EN(); // Enable USART1 clock
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <main+0x100>)
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	4a3a      	ldr	r2, [pc, #232]	; (8004ca0 <main+0x100>)
 8004bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bbc:	6193      	str	r3, [r2, #24]

	// Initialize UART for communication
	UART_Init(USART_1);
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f000 f8e2 	bl	8004d88 <UART_Init>

	// Create binary semaphores for synchronization between tasks
	xJsonSemaphore = xSemaphoreCreateBinary();
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	2001      	movs	r0, #1
 8004bca:	f7fc fb21 	bl	8001210 <xQueueGenericCreate>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <main+0x104>)
 8004bd2:	601a      	str	r2, [r3, #0]
	USARTSemaphore = xSemaphoreCreateBinary();
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	2001      	movs	r0, #1
 8004bda:	f7fc fb19 	bl	8001210 <xQueueGenericCreate>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <main+0x108>)
 8004be2:	601a      	str	r2, [r3, #0]
	relaySemaphore = xSemaphoreCreateBinary();
 8004be4:	2203      	movs	r2, #3
 8004be6:	2100      	movs	r1, #0
 8004be8:	2001      	movs	r0, #1
 8004bea:	f7fc fb11 	bl	8001210 <xQueueGenericCreate>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	4b2e      	ldr	r3, [pc, #184]	; (8004cac <main+0x10c>)
 8004bf2:	601a      	str	r2, [r3, #0]
	tempSensorSemaphore = xSemaphoreCreateBinary();
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f7fc fb09 	bl	8001210 <xQueueGenericCreate>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	4b2b      	ldr	r3, [pc, #172]	; (8004cb0 <main+0x110>)
 8004c02:	601a      	str	r2, [r3, #0]
	lightSensorSemaphore = xSemaphoreCreateBinary();
 8004c04:	2203      	movs	r2, #3
 8004c06:	2100      	movs	r1, #0
 8004c08:	2001      	movs	r0, #1
 8004c0a:	f7fc fb01 	bl	8001210 <xQueueGenericCreate>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <main+0x114>)
 8004c12:	601a      	str	r2, [r3, #0]

	xSemaphoreGive(USARTSemaphore); // Give the USART semaphore to allow UART communication
 8004c14:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <main+0x108>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	f7fc fb5b 	bl	80012d8 <xQueueGenericSend>

	// Create a queue to hold JSON messages with specified length and item size
	xJsonQueue = xQueueCreate(QUEUE_LENGTH, QUEUE_ITEM_SIZE);
 8004c22:	2200      	movs	r2, #0
 8004c24:	2164      	movs	r1, #100	; 0x64
 8004c26:	200a      	movs	r0, #10
 8004c28:	f7fc faf2 	bl	8001210 <xQueueGenericCreate>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <main+0x118>)
 8004c30:	601a      	str	r2, [r3, #0]

	// Create tasks for UART communication, JSON processing, and sensor reading
	xTaskCreate(uartTask, "UART_Task", 450, NULL, 3, &xUartTaskHandle);
 8004c32:	4b22      	ldr	r3, [pc, #136]	; (8004cbc <main+0x11c>)
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	2303      	movs	r3, #3
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8004c40:	491f      	ldr	r1, [pc, #124]	; (8004cc0 <main+0x120>)
 8004c42:	4820      	ldr	r0, [pc, #128]	; (8004cc4 <main+0x124>)
 8004c44:	f7fc fe88 	bl	8001958 <xTaskCreate>
	xTaskCreate(JsonProcessingTask, "JSON Processor", 400, NULL, 3, NULL);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	2300      	movs	r3, #0
 8004c52:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004c56:	491c      	ldr	r1, [pc, #112]	; (8004cc8 <main+0x128>)
 8004c58:	481c      	ldr	r0, [pc, #112]	; (8004ccc <main+0x12c>)
 8004c5a:	f7fc fe7d 	bl	8001958 <xTaskCreate>
	xTaskCreate(sensorTask, "Sensor_Task", 200, NULL, 2, &xTempTaskHandle);
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <main+0x130>)
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	2302      	movs	r3, #2
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	2300      	movs	r3, #0
 8004c68:	22c8      	movs	r2, #200	; 0xc8
 8004c6a:	491a      	ldr	r1, [pc, #104]	; (8004cd4 <main+0x134>)
 8004c6c:	481a      	ldr	r0, [pc, #104]	; (8004cd8 <main+0x138>)
 8004c6e:	f7fc fe73 	bl	8001958 <xTaskCreate>
	xTaskCreate(lightsensorTask, "Light_Sensor_Task", 200, NULL, 2, NULL);
 8004c72:	2300      	movs	r3, #0
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	2302      	movs	r3, #2
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	22c8      	movs	r2, #200	; 0xc8
 8004c7e:	4917      	ldr	r1, [pc, #92]	; (8004cdc <main+0x13c>)
 8004c80:	4817      	ldr	r0, [pc, #92]	; (8004ce0 <main+0x140>)
 8004c82:	f7fc fe69 	bl	8001958 <xTaskCreate>
	xTaskCreate(relayTask, "Relay_Task", 128, NULL, 1, NULL); // Reduced stack size for relay task
 8004c86:	2300      	movs	r3, #0
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2280      	movs	r2, #128	; 0x80
 8004c92:	4914      	ldr	r1, [pc, #80]	; (8004ce4 <main+0x144>)
 8004c94:	4814      	ldr	r0, [pc, #80]	; (8004ce8 <main+0x148>)
 8004c96:	f7fc fe5f 	bl	8001958 <xTaskCreate>

	// Start the FreeRTOS scheduler to begin task execution
	vTaskStartScheduler();
 8004c9a:	f7fc ffcd 	bl	8001c38 <vTaskStartScheduler>

	// Main loop should never be reached if FreeRTOS scheduler is working correctly
	while (1) { /* Infinite loop to keep the main function alive */ }
 8004c9e:	e7fe      	b.n	8004c9e <main+0xfe>
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	20002460 	.word	0x20002460
 8004ca8:	20002350 	.word	0x20002350
 8004cac:	20002354 	.word	0x20002354
 8004cb0:	20002358 	.word	0x20002358
 8004cb4:	2000235c 	.word	0x2000235c
 8004cb8:	2000245c 	.word	0x2000245c
 8004cbc:	20002364 	.word	0x20002364
 8004cc0:	0800905c 	.word	0x0800905c
 8004cc4:	080050e1 	.word	0x080050e1
 8004cc8:	08009068 	.word	0x08009068
 8004ccc:	08005699 	.word	0x08005699
 8004cd0:	20002360 	.word	0x20002360
 8004cd4:	08009078 	.word	0x08009078
 8004cd8:	08004eb9 	.word	0x08004eb9
 8004cdc:	08009084 	.word	0x08009084
 8004ce0:	08005005 	.word	0x08005005
 8004ce4:	08009098 	.word	0x08009098
 8004ce8:	0800563d 	.word	0x0800563d

08004cec <Usart_callback>:
}

// USART callback function for handling incoming data
void Usart_callback(interrupts_Bits * irq) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	// Receive a character from USART and store it in the buffer
	MCAL_USART_ReceiveChar(USART1, jsonBuffer + counter);
 8004cf4:	4b1f      	ldr	r3, [pc, #124]	; (8004d74 <Usart_callback+0x88>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <Usart_callback+0x8c>)
 8004cfc:	4413      	add	r3, r2
 8004cfe:	4619      	mov	r1, r3
 8004d00:	481e      	ldr	r0, [pc, #120]	; (8004d7c <Usart_callback+0x90>)
 8004d02:	f7ff fe3d 	bl	8004980 <MCAL_USART_ReceiveChar>

	// Handle the case when the received buffer is not a valid JSON message
	if (jsonBuffer[0] != '{') {
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <Usart_callback+0x8c>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b7b      	cmp	r3, #123	; 0x7b
 8004d0c:	d003      	beq.n	8004d16 <Usart_callback+0x2a>
		counter = 0; // Reset counter if not a JSON start character
 8004d0e:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <Usart_callback+0x88>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
	else {
		counter++; // Increment counter to store the next character in the buffer
	}
}
 8004d14:	e029      	b.n	8004d6a <Usart_callback+0x7e>
	else if (jsonBuffer[counter] == '}') {
 8004d16:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <Usart_callback+0x88>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a17      	ldr	r2, [pc, #92]	; (8004d78 <Usart_callback+0x8c>)
 8004d1c:	5cd3      	ldrb	r3, [r2, r3]
 8004d1e:	2b7d      	cmp	r3, #125	; 0x7d
 8004d20:	d11e      	bne.n	8004d60 <Usart_callback+0x74>
		jsonBuffer[counter + 1] = '\0'; // Null-terminate the string
 8004d22:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <Usart_callback+0x88>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3301      	adds	r3, #1
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <Usart_callback+0x8c>)
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	54d1      	strb	r1, [r2, r3]
		counter = 0; // Reset counter for next message
 8004d2e:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <Usart_callback+0x88>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(xJsonSemaphore, &xHigherPriorityTaskWoken);
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <Usart_callback+0x94>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f107 020c 	add.w	r2, r7, #12
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fc fb72 	bl	800142c <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00d      	beq.n	8004d6a <Usart_callback+0x7e>
 8004d4e:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <Usart_callback+0x98>)
 8004d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	f3bf 8f6f 	isb	sy
}
 8004d5e:	e004      	b.n	8004d6a <Usart_callback+0x7e>
		counter++; // Increment counter to store the next character in the buffer
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <Usart_callback+0x88>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	4a03      	ldr	r2, [pc, #12]	; (8004d74 <Usart_callback+0x88>)
 8004d68:	6013      	str	r3, [r2, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20002368 	.word	0x20002368
 8004d78:	2000240c 	.word	0x2000240c
 8004d7c:	40013800 	.word	0x40013800
 8004d80:	20002460 	.word	0x20002460
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <UART_Init>:

// UART Initialization function
void UART_Init(USART_NUM_t uart_num) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	71fb      	strb	r3, [r7, #7]
	USART_Config_t UART_CNFG_s;
	UART_CNFG_s.Async_EN = USART_Enable;
 8004d92:	2301      	movs	r3, #1
 8004d94:	723b      	strb	r3, [r7, #8]
	UART_CNFG_s.Async_Config_s.Baud_Rate = 9600; // Set baud rate to 9600
 8004d96:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004d9a:	613b      	str	r3, [r7, #16]
	UART_CNFG_s.Async_Config_s.Stop_Bits = Stop_1; // 1 stop bit
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	737b      	strb	r3, [r7, #13]
	UART_CNFG_s.Async_Config_s.Word_Length = Eight_bits; // 8-bit word length
 8004da0:	2300      	movs	r3, #0
 8004da2:	733b      	strb	r3, [r7, #12]
	UART_CNFG_s.interrupts_CNFG.RX_Interrupt_Enable_Or_Disable = USART_Enable; // Enable RX interrupt
 8004da4:	2301      	movs	r3, #1
 8004da6:	767b      	strb	r3, [r7, #25]
	UART_CNFG_s.CallBack_FN = Usart_callback; // Set callback function for USART interrupts
 8004da8:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <UART_Init+0x60>)
 8004daa:	61fb      	str	r3, [r7, #28]

	// Initialize USART1 or USART2 depending on the selected USART
	if (uart_num == USART_1) {
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <UART_Init+0x3e>
		MCAL_USART_Init(USART1, &UART_CNFG_s);
 8004db2:	f107 0308 	add.w	r3, r7, #8
 8004db6:	4619      	mov	r1, r3
 8004db8:	480c      	ldr	r0, [pc, #48]	; (8004dec <UART_Init+0x64>)
 8004dba:	f7ff fc7d 	bl	80046b8 <MCAL_USART_Init>
		MCAL_USART_GPIO_Pins_Config(USART1); // Configure USART1 GPIO pins
 8004dbe:	480b      	ldr	r0, [pc, #44]	; (8004dec <UART_Init+0x64>)
 8004dc0:	f7ff fe2c 	bl	8004a1c <MCAL_USART_GPIO_Pins_Config>
	}
	else if (uart_num == USART_2) {
		MCAL_USART_Init(USART2, &UART_CNFG_s);
		MCAL_USART_GPIO_Pins_Config(USART2); // Configure USART2 GPIO pins
	}
}
 8004dc4:	e00b      	b.n	8004dde <UART_Init+0x56>
	else if (uart_num == USART_2) {
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d108      	bne.n	8004dde <UART_Init+0x56>
		MCAL_USART_Init(USART2, &UART_CNFG_s);
 8004dcc:	f107 0308 	add.w	r3, r7, #8
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4807      	ldr	r0, [pc, #28]	; (8004df0 <UART_Init+0x68>)
 8004dd4:	f7ff fc70 	bl	80046b8 <MCAL_USART_Init>
		MCAL_USART_GPIO_Pins_Config(USART2); // Configure USART2 GPIO pins
 8004dd8:	4805      	ldr	r0, [pc, #20]	; (8004df0 <UART_Init+0x68>)
 8004dda:	f7ff fe1f 	bl	8004a1c <MCAL_USART_GPIO_Pins_Config>
}
 8004dde:	bf00      	nop
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	08004ced 	.word	0x08004ced
 8004dec:	40013800 	.word	0x40013800
 8004df0:	40004400 	.word	0x40004400

08004df4 <RELAY_Init>:

// Relay Initialization function
void RELAY_Init(RELAY_GPIO_PORT_t port, char pin_num_signal) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	71fb      	strb	r3, [r7, #7]
 8004e00:	4613      	mov	r3, r2
 8004e02:	71bb      	strb	r3, [r7, #6]
	Pin_Config_t GPIO_Pin_CNFG;
	GPIO_Pin_CNFG.mode = Output_Open_drain; // Set the mode to open-drain for relay control
 8004e04:	2305      	movs	r3, #5
 8004e06:	613b      	str	r3, [r7, #16]
	GPIO_Pin_CNFG.Speed_Output = speed_10; // Set output speed to low
 8004e08:	2301      	movs	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
	GPIO_Pin_CNFG.Pin_Num = pin_num_signal; // Set the pin number for relay control
 8004e0c:	79bb      	ldrb	r3, [r7, #6]
 8004e0e:	60fb      	str	r3, [r7, #12]

	// Initialize GPIO port A, B, or C based on the selected port
	if (port == PORTA) {
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <RELAY_Init+0x30>
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG);
 8004e16:	f107 030c 	add.w	r3, r7, #12
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	480d      	ldr	r0, [pc, #52]	; (8004e54 <RELAY_Init+0x60>)
 8004e1e:	f7ff faa3 	bl	8004368 <MCAL_GPIO_Init>
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG);
	}
	else if (port == PORTC) {
		MCAL_GPIO_Init(GPIOC, &GPIO_Pin_CNFG);
	}
}
 8004e22:	e012      	b.n	8004e4a <RELAY_Init+0x56>
	else if (port == PORTB) {
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d106      	bne.n	8004e38 <RELAY_Init+0x44>
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG);
 8004e2a:	f107 030c 	add.w	r3, r7, #12
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4809      	ldr	r0, [pc, #36]	; (8004e58 <RELAY_Init+0x64>)
 8004e32:	f7ff fa99 	bl	8004368 <MCAL_GPIO_Init>
}
 8004e36:	e008      	b.n	8004e4a <RELAY_Init+0x56>
	else if (port == PORTC) {
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d105      	bne.n	8004e4a <RELAY_Init+0x56>
		MCAL_GPIO_Init(GPIOC, &GPIO_Pin_CNFG);
 8004e3e:	f107 030c 	add.w	r3, r7, #12
 8004e42:	4619      	mov	r1, r3
 8004e44:	4805      	ldr	r0, [pc, #20]	; (8004e5c <RELAY_Init+0x68>)
 8004e46:	f7ff fa8f 	bl	8004368 <MCAL_GPIO_Init>
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40010800 	.word	0x40010800
 8004e58:	40010c00 	.word	0x40010c00
 8004e5c:	40011000 	.word	0x40011000

08004e60 <RELAY_DeInit>:

// Relay De-Initialization function
void RELAY_DeInit(RELAY_GPIO_PORT_t port, char pin_num_signal) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	460a      	mov	r2, r1
 8004e6a:	71fb      	strb	r3, [r7, #7]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	71bb      	strb	r3, [r7, #6]
	// Deinitialize the relay pin on the selected GPIO port
	if (port == PORTA) {
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d105      	bne.n	8004e82 <RELAY_DeInit+0x22>
		MCAL_GPIO_DeInit(GPIOA, pin_num_signal);
 8004e76:	79bb      	ldrb	r3, [r7, #6]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	480c      	ldr	r0, [pc, #48]	; (8004eac <RELAY_DeInit+0x4c>)
 8004e7c:	f7ff fb1c 	bl	80044b8 <MCAL_GPIO_DeInit>
		MCAL_GPIO_DeInit(GPIOB, pin_num_signal);
	}
	else if (port == PORTC) {
		MCAL_GPIO_DeInit(GPIOC, pin_num_signal);
	}
}
 8004e80:	e010      	b.n	8004ea4 <RELAY_DeInit+0x44>
	else if (port == PORTB) {
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <RELAY_DeInit+0x34>
		MCAL_GPIO_DeInit(GPIOB, pin_num_signal);
 8004e88:	79bb      	ldrb	r3, [r7, #6]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4808      	ldr	r0, [pc, #32]	; (8004eb0 <RELAY_DeInit+0x50>)
 8004e8e:	f7ff fb13 	bl	80044b8 <MCAL_GPIO_DeInit>
}
 8004e92:	e007      	b.n	8004ea4 <RELAY_DeInit+0x44>
	else if (port == PORTC) {
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d104      	bne.n	8004ea4 <RELAY_DeInit+0x44>
		MCAL_GPIO_DeInit(GPIOC, pin_num_signal);
 8004e9a:	79bb      	ldrb	r3, [r7, #6]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4805      	ldr	r0, [pc, #20]	; (8004eb4 <RELAY_DeInit+0x54>)
 8004ea0:	f7ff fb0a 	bl	80044b8 <MCAL_GPIO_DeInit>
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40010800 	.word	0x40010800
 8004eb0:	40010c00 	.word	0x40010c00
 8004eb4:	40011000 	.word	0x40011000

08004eb8 <sensorTask>:

// Sensor Task for reading temperature and light sensor data
void sensorTask(void *pvParameters) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b0a4      	sub	sp, #144	; 0x90
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	6078      	str	r0, [r7, #4]
	while (1) {
		// Wait for the semaphore indicating that the sensor is enabled
		if (xSemaphoreTake(tempSensorSemaphore, portMAX_DELAY) == pdTRUE) {
 8004ec0:	4b45      	ldr	r3, [pc, #276]	; (8004fd8 <sensorTask+0x120>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fc fba5 	bl	8001618 <xQueueSemaphoreTake>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d1f5      	bne.n	8004ec0 <sensorTask+0x8>
			// Perform temperature sensor reading
			if (adc_check(ADC1)) {
 8004ed4:	4841      	ldr	r0, [pc, #260]	; (8004fdc <sensorTask+0x124>)
 8004ed6:	f7ff f8bb 	bl	8004050 <adc_check>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d069      	beq.n	8004fb4 <sensorTask+0xfc>
				int data = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				float temperature = 0.0f;
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	67fb      	str	r3, [r7, #124]	; 0x7c
				const float Vref_measured = 3.27f; // Measured Vref for ADC
 8004eec:	4b3c      	ldr	r3, [pc, #240]	; (8004fe0 <sensorTask+0x128>)
 8004eee:	67bb      	str	r3, [r7, #120]	; 0x78
				const float offset = -10.0f; // Calibration offset for temperature
 8004ef0:	4b3c      	ldr	r3, [pc, #240]	; (8004fe4 <sensorTask+0x12c>)
 8004ef2:	677b      	str	r3, [r7, #116]	; 0x74
				data = adc_rx(ADC1, PA, 0); // Read ADC value from temperature sensor
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4838      	ldr	r0, [pc, #224]	; (8004fdc <sensorTask+0x124>)
 8004efa:	f7ff f8bd 	bl	8004078 <adc_rx>
 8004efe:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

				// Convert ADC value to voltage
				float voltage = (float)data * Vref_measured / 4095.0f;
 8004f02:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004f06:	f7fb feb3 	bl	8000c70 <__aeabi_i2f>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fb ff02 	bl	8000d18 <__aeabi_fmul>
 8004f14:	4603      	mov	r3, r0
 8004f16:	4934      	ldr	r1, [pc, #208]	; (8004fe8 <sensorTask+0x130>)
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb ffb1 	bl	8000e80 <__aeabi_fdiv>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	673b      	str	r3, [r7, #112]	; 0x70

				// Convert voltage to temperature
				temperature = (voltage / 0.01f) + offset;
 8004f22:	4932      	ldr	r1, [pc, #200]	; (8004fec <sensorTask+0x134>)
 8004f24:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004f26:	f7fb ffab 	bl	8000e80 <__aeabi_fdiv>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004f30:	f7fb fdea 	bl	8000b08 <__addsf3>
 8004f34:	4603      	mov	r3, r0
 8004f36:	67fb      	str	r3, [r7, #124]	; 0x7c
				analog_rx_temperature = (int)temperature;
 8004f38:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004f3a:	f7fc f83d 	bl	8000fb8 <__aeabi_f2iz>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <sensorTask+0x138>)
 8004f42:	601a      	str	r2, [r3, #0]

				// Send the temperature data as a JSON message over UART
				if (xSemaphoreTake(USARTSemaphore, portMAX_DELAY) == pdTRUE) {
 8004f44:	4b2b      	ldr	r3, [pc, #172]	; (8004ff4 <sensorTask+0x13c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f04f 31ff 	mov.w	r1, #4294967295
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fc fb63 	bl	8001618 <xQueueSemaphoreTake>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d12d      	bne.n	8004fb4 <sensorTask+0xfc>
					char jsonString[100];
					snprintf(jsonString, sizeof(jsonString), "{\"nodeType\":\"NS\", \"nodeID\": %d, \"data\": \"%d°C\"}", TEMP_SENSOR_NODE_ID, analog_rx_temperature);
 8004f58:	4b25      	ldr	r3, [pc, #148]	; (8004ff0 <sensorTask+0x138>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f107 000c 	add.w	r0, r7, #12
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	4a24      	ldr	r2, [pc, #144]	; (8004ff8 <sensorTask+0x140>)
 8004f66:	2164      	movs	r1, #100	; 0x64
 8004f68:	f001 f9e8 	bl	800633c <sniprintf>

					// Send the JSON string byte by byte over USART
					for (int i = 0; i < strlen(jsonString); i++) {
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f72:	e00e      	b.n	8004f92 <sensorTask+0xda>
						MCAL_USART_SendChar(USART1, jsonString[i]);
 8004f74:	f107 020c 	add.w	r2, r7, #12
 8004f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f7c:	4413      	add	r3, r2
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	4619      	mov	r1, r3
 8004f82:	481e      	ldr	r0, [pc, #120]	; (8004ffc <sensorTask+0x144>)
 8004f84:	f7ff fcca 	bl	800491c <MCAL_USART_SendChar>
					for (int i = 0; i < strlen(jsonString); i++) {
 8004f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f92:	f107 030c 	add.w	r3, r7, #12
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fb f8f4 	bl	8000184 <strlen>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d8e6      	bhi.n	8004f74 <sensorTask+0xbc>
					}

					xSemaphoreGive(USARTSemaphore); // Release the USART semaphore
 8004fa6:	4b13      	ldr	r3, [pc, #76]	; (8004ff4 <sensorTask+0x13c>)
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	2300      	movs	r3, #0
 8004fac:	2200      	movs	r2, #0
 8004fae:	2100      	movs	r1, #0
 8004fb0:	f7fc f992 	bl	80012d8 <xQueueGenericSend>
				}
			}
			vTaskDelay(tempSensorDuration * 1000); // Delay for the next reading
 8004fb4:	4b12      	ldr	r3, [pc, #72]	; (8005000 <sensorTask+0x148>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fbc:	fb02 f303 	mul.w	r3, r2, r3
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fc fe15 	bl	8001bf0 <vTaskDelay>
			xSemaphoreGive(tempSensorSemaphore); // Release the semaphore after the task is complete
 8004fc6:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <sensorTask+0x120>)
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2100      	movs	r1, #0
 8004fd0:	f7fc f982 	bl	80012d8 <xQueueGenericSend>
		if (xSemaphoreTake(tempSensorSemaphore, portMAX_DELAY) == pdTRUE) {
 8004fd4:	e774      	b.n	8004ec0 <sensorTask+0x8>
 8004fd6:	bf00      	nop
 8004fd8:	20002358 	.word	0x20002358
 8004fdc:	40012400 	.word	0x40012400
 8004fe0:	405147ae 	.word	0x405147ae
 8004fe4:	c1200000 	.word	0xc1200000
 8004fe8:	457ff000 	.word	0x457ff000
 8004fec:	3c23d70a 	.word	0x3c23d70a
 8004ff0:	20002370 	.word	0x20002370
 8004ff4:	20002350 	.word	0x20002350
 8004ff8:	080090a4 	.word	0x080090a4
 8004ffc:	40013800 	.word	0x40013800
 8005000:	2000002c 	.word	0x2000002c

08005004 <lightsensorTask>:
		}
	}
}
// Light Sensor Task
void lightsensorTask(void *pvParameters) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b09e      	sub	sp, #120	; 0x78
 8005008:	af02      	add	r7, sp, #8
 800500a:	6078      	str	r0, [r7, #4]
    // Infinite loop to continuously monitor light sensor status
    while (1) {
        // Wait for the sensor to be enabled (sensorEnabled flag is set)
        if (xSemaphoreTake(lightSensorSemaphore, portMAX_DELAY) == pdTRUE) {
 800500c:	4b2d      	ldr	r3, [pc, #180]	; (80050c4 <lightsensorTask+0xc0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f04f 31ff 	mov.w	r1, #4294967295
 8005014:	4618      	mov	r0, r3
 8005016:	f7fc faff 	bl	8001618 <xQueueSemaphoreTake>
 800501a:	4603      	mov	r3, r0
 800501c:	2b01      	cmp	r3, #1
 800501e:	d1f5      	bne.n	800500c <lightsensorTask+0x8>
            // Perform sensor reading if enabled
            if(adc_check(ADC2)) {
 8005020:	4829      	ldr	r0, [pc, #164]	; (80050c8 <lightsensorTask+0xc4>)
 8005022:	f7ff f815 	bl	8004050 <adc_check>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d03a      	beq.n	80050a2 <lightsensorTask+0x9e>
                // Read light sensor data from ADC2
                analog_rx_light = adc_rx(ADC2, PA, 1);
 800502c:	2201      	movs	r2, #1
 800502e:	2101      	movs	r1, #1
 8005030:	4825      	ldr	r0, [pc, #148]	; (80050c8 <lightsensorTask+0xc4>)
 8005032:	f7ff f821 	bl	8004078 <adc_rx>
 8005036:	4602      	mov	r2, r0
 8005038:	4b24      	ldr	r3, [pc, #144]	; (80050cc <lightsensorTask+0xc8>)
 800503a:	601a      	str	r2, [r3, #0]

                // Check if USART semaphore is available for communication
                if (xSemaphoreTake(USARTSemaphore, portMAX_DELAY) == pdTRUE) {
 800503c:	4b24      	ldr	r3, [pc, #144]	; (80050d0 <lightsensorTask+0xcc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f04f 31ff 	mov.w	r1, #4294967295
 8005044:	4618      	mov	r0, r3
 8005046:	f7fc fae7 	bl	8001618 <xQueueSemaphoreTake>
 800504a:	4603      	mov	r3, r0
 800504c:	2b01      	cmp	r3, #1
 800504e:	d128      	bne.n	80050a2 <lightsensorTask+0x9e>
                    // Prepare a JSON string to send light sensor data
                    char jsonString[100];
                    snprintf(jsonString, sizeof(jsonString), "{\"nodeType\":\"NS\", \"nodeID\": %d, \"data\": \"%d\"}", LIGHT_SENSOR_NODE_ID, analog_rx_light);
 8005050:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <lightsensorTask+0xc8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f107 0008 	add.w	r0, r7, #8
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	2381      	movs	r3, #129	; 0x81
 800505c:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <lightsensorTask+0xd0>)
 800505e:	2164      	movs	r1, #100	; 0x64
 8005060:	f001 f96c 	bl	800633c <sniprintf>

                    // Send the JSON string character by character via USART
                    for (int i = 0; i < strlen(jsonString); i++) {
 8005064:	2300      	movs	r3, #0
 8005066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005068:	e00b      	b.n	8005082 <lightsensorTask+0x7e>
                        MCAL_USART_SendChar(USART1, jsonString[i]);
 800506a:	f107 0208 	add.w	r2, r7, #8
 800506e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005070:	4413      	add	r3, r2
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	4619      	mov	r1, r3
 8005076:	4818      	ldr	r0, [pc, #96]	; (80050d8 <lightsensorTask+0xd4>)
 8005078:	f7ff fc50 	bl	800491c <MCAL_USART_SendChar>
                    for (int i = 0; i < strlen(jsonString); i++) {
 800507c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507e:	3301      	adds	r3, #1
 8005080:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005082:	f107 0308 	add.w	r3, r7, #8
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb f87c 	bl	8000184 <strlen>
 800508c:	4602      	mov	r2, r0
 800508e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005090:	429a      	cmp	r2, r3
 8005092:	d8ea      	bhi.n	800506a <lightsensorTask+0x66>
                    }

                    // Release USART semaphore after transmission
                    xSemaphoreGive(USARTSemaphore);
 8005094:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <lightsensorTask+0xcc>)
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	2300      	movs	r3, #0
 800509a:	2200      	movs	r2, #0
 800509c:	2100      	movs	r1, #0
 800509e:	f7fc f91b 	bl	80012d8 <xQueueGenericSend>
                }
            }
            // Delay for the light sensor reading interval (in seconds)
            vTaskDelay(lightSensorDuration * 1000);
 80050a2:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <lightsensorTask+0xd8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fc fd9e 	bl	8001bf0 <vTaskDelay>
            // Release light sensor semaphore
            xSemaphoreGive(lightSensorSemaphore);
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <lightsensorTask+0xc0>)
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	2200      	movs	r2, #0
 80050bc:	2100      	movs	r1, #0
 80050be:	f7fc f90b 	bl	80012d8 <xQueueGenericSend>
        if (xSemaphoreTake(lightSensorSemaphore, portMAX_DELAY) == pdTRUE) {
 80050c2:	e7a3      	b.n	800500c <lightsensorTask+0x8>
 80050c4:	2000235c 	.word	0x2000235c
 80050c8:	40012800 	.word	0x40012800
 80050cc:	20002374 	.word	0x20002374
 80050d0:	20002350 	.word	0x20002350
 80050d4:	080090d8 	.word	0x080090d8
 80050d8:	40013800 	.word	0x40013800
 80050dc:	20000030 	.word	0x20000030

080050e0 <uartTask>:
        }
    }
}

// UART Task to handle receiving and processing commands
void uartTask(void *pvParameters) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b0be      	sub	sp, #248	; 0xf8
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	6078      	str	r0, [r7, #4]
    JsonMessage jsonMsg;

    // Infinite loop to continuously receive commands from UART
    while (1) {
        // Wait for a message in the queue
        if (xQueueReceive(xJsonQueue, &jsonMsg, portMAX_DELAY) == pdTRUE) {
 80050e8:	4bcd      	ldr	r3, [pc, #820]	; (8005420 <uartTask+0x340>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80050f0:	f04f 32ff 	mov.w	r2, #4294967295
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fc f9ed 	bl	80014d4 <xQueueReceive>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d1f3      	bne.n	80050e8 <uartTask+0x8>
            // Command handling for enabling sensors or actuators
            if (strcmp(jsonMsg.command, "ENA") == 0) {
 8005100:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005104:	49c7      	ldr	r1, [pc, #796]	; (8005424 <uartTask+0x344>)
 8005106:	4618      	mov	r0, r3
 8005108:	f7fb f832 	bl	8000170 <strcmp>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	f040 80cb 	bne.w	80052aa <uartTask+0x1ca>
                // Enable temperature sensor if node ID matches
                if(jsonMsg.nodeID == TEMP_SENSOR_NODE_ID) {
 8005114:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005118:	2b80      	cmp	r3, #128	; 0x80
 800511a:	d13b      	bne.n	8005194 <uartTask+0xb4>
                    // Prepare and send "DONE" message in JSON format
                    char jsonString[100];
                    snprintf(jsonString, sizeof(jsonString), "{\"nodeType\":\"NS\", \"nodeID\": %d, \"data\": \"DONE\"}", jsonMsg.nodeID);
 800511c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005120:	f107 000c 	add.w	r0, r7, #12
 8005124:	4ac0      	ldr	r2, [pc, #768]	; (8005428 <uartTask+0x348>)
 8005126:	2164      	movs	r1, #100	; 0x64
 8005128:	f001 f908 	bl	800633c <sniprintf>
                    if (xSemaphoreTake(USARTSemaphore, portMAX_DELAY) == pdTRUE) {
 800512c:	4bbf      	ldr	r3, [pc, #764]	; (800542c <uartTask+0x34c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f04f 31ff 	mov.w	r1, #4294967295
 8005134:	4618      	mov	r0, r3
 8005136:	f7fc fa6f 	bl	8001618 <xQueueSemaphoreTake>
 800513a:	4603      	mov	r3, r0
 800513c:	2b01      	cmp	r3, #1
 800513e:	d123      	bne.n	8005188 <uartTask+0xa8>
                        // Send JSON string over USART
                        for (int i = 0; i < strlen(jsonString); i++) {
 8005140:	2300      	movs	r3, #0
 8005142:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005146:	e00e      	b.n	8005166 <uartTask+0x86>
                            MCAL_USART_SendChar(USART1, jsonString[i]);
 8005148:	f107 020c 	add.w	r2, r7, #12
 800514c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005150:	4413      	add	r3, r2
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	4619      	mov	r1, r3
 8005156:	48b6      	ldr	r0, [pc, #728]	; (8005430 <uartTask+0x350>)
 8005158:	f7ff fbe0 	bl	800491c <MCAL_USART_SendChar>
                        for (int i = 0; i < strlen(jsonString); i++) {
 800515c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005160:	3301      	adds	r3, #1
 8005162:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005166:	f107 030c 	add.w	r3, r7, #12
 800516a:	4618      	mov	r0, r3
 800516c:	f7fb f80a 	bl	8000184 <strlen>
 8005170:	4602      	mov	r2, r0
 8005172:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005176:	429a      	cmp	r2, r3
 8005178:	d8e6      	bhi.n	8005148 <uartTask+0x68>
                        }
                        xSemaphoreGive(USARTSemaphore);
 800517a:	4bac      	ldr	r3, [pc, #688]	; (800542c <uartTask+0x34c>)
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	2300      	movs	r3, #0
 8005180:	2200      	movs	r2, #0
 8005182:	2100      	movs	r1, #0
 8005184:	f7fc f8a8 	bl	80012d8 <xQueueGenericSend>
                    }
                    // Initialize ADC for temperature sensor
                    adc_init(ADC1, PA, 0);
 8005188:	2200      	movs	r2, #0
 800518a:	2101      	movs	r1, #1
 800518c:	48a9      	ldr	r0, [pc, #676]	; (8005434 <uartTask+0x354>)
 800518e:	f7fe fe81 	bl	8003e94 <adc_init>
 8005192:	e7a9      	b.n	80050e8 <uartTask+0x8>
                }
                // Enable light sensor if node ID matches
                else if(jsonMsg.nodeID == LIGHT_SENSOR_NODE_ID) {
 8005194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005198:	2b81      	cmp	r3, #129	; 0x81
 800519a:	d13b      	bne.n	8005214 <uartTask+0x134>
                    // Prepare and send "DONE" message in JSON format
                    char jsonString[100];
                    snprintf(jsonString, sizeof(jsonString), "{\"nodeType\":\"NS\", \"nodeID\": %d, \"data\": \"DONE\"}", jsonMsg.nodeID);
 800519c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80051a0:	f107 000c 	add.w	r0, r7, #12
 80051a4:	4aa0      	ldr	r2, [pc, #640]	; (8005428 <uartTask+0x348>)
 80051a6:	2164      	movs	r1, #100	; 0x64
 80051a8:	f001 f8c8 	bl	800633c <sniprintf>
                    if (xSemaphoreTake(USARTSemaphore, portMAX_DELAY) == pdTRUE) {
 80051ac:	4b9f      	ldr	r3, [pc, #636]	; (800542c <uartTask+0x34c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f04f 31ff 	mov.w	r1, #4294967295
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fc fa2f 	bl	8001618 <xQueueSemaphoreTake>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d123      	bne.n	8005208 <uartTask+0x128>
                        // Send JSON string over USART
                        for (int i = 0; i < strlen(jsonString); i++) {
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051c6:	e00e      	b.n	80051e6 <uartTask+0x106>
                            MCAL_USART_SendChar(USART1, jsonString[i]);
 80051c8:	f107 020c 	add.w	r2, r7, #12
 80051cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051d0:	4413      	add	r3, r2
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	4619      	mov	r1, r3
 80051d6:	4896      	ldr	r0, [pc, #600]	; (8005430 <uartTask+0x350>)
 80051d8:	f7ff fba0 	bl	800491c <MCAL_USART_SendChar>
                        for (int i = 0; i < strlen(jsonString); i++) {
 80051dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051e0:	3301      	adds	r3, #1
 80051e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051e6:	f107 030c 	add.w	r3, r7, #12
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fa ffca 	bl	8000184 <strlen>
 80051f0:	4602      	mov	r2, r0
 80051f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d8e6      	bhi.n	80051c8 <uartTask+0xe8>
                        }
                        xSemaphoreGive(USARTSemaphore);
 80051fa:	4b8c      	ldr	r3, [pc, #560]	; (800542c <uartTask+0x34c>)
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	2300      	movs	r3, #0
 8005200:	2200      	movs	r2, #0
 8005202:	2100      	movs	r1, #0
 8005204:	f7fc f868 	bl	80012d8 <xQueueGenericSend>
                    }
                    // Initialize ADC for light sensor
                    adc_init(ADC2, PA, 1);
 8005208:	2201      	movs	r2, #1
 800520a:	2101      	movs	r1, #1
 800520c:	488a      	ldr	r0, [pc, #552]	; (8005438 <uartTask+0x358>)
 800520e:	f7fe fe41 	bl	8003e94 <adc_init>
 8005212:	e769      	b.n	80050e8 <uartTask+0x8>
                }
                // Enable relay actuator if node ID matches
                else if(jsonMsg.nodeID == RELAY_ACTUATOR_NODE_ID) {
 8005214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005218:	2b50      	cmp	r3, #80	; 0x50
 800521a:	f47f af65 	bne.w	80050e8 <uartTask+0x8>
                    // Prepare and send "DONE" message in JSON format
                    char jsonString[100];
                    snprintf(jsonString, sizeof(jsonString), "{\"nodeType\":\"NA\", \"nodeID\": %d, \"data\": \"DONE\"}", jsonMsg.nodeID);
 800521e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005222:	f107 000c 	add.w	r0, r7, #12
 8005226:	4a85      	ldr	r2, [pc, #532]	; (800543c <uartTask+0x35c>)
 8005228:	2164      	movs	r1, #100	; 0x64
 800522a:	f001 f887 	bl	800633c <sniprintf>
                    if (xSemaphoreTake(USARTSemaphore, portMAX_DELAY) == pdTRUE) {
 800522e:	4b7f      	ldr	r3, [pc, #508]	; (800542c <uartTask+0x34c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f04f 31ff 	mov.w	r1, #4294967295
 8005236:	4618      	mov	r0, r3
 8005238:	f7fc f9ee 	bl	8001618 <xQueueSemaphoreTake>
 800523c:	4603      	mov	r3, r0
 800523e:	2b01      	cmp	r3, #1
 8005240:	d123      	bne.n	800528a <uartTask+0x1aa>
                        // Send JSON string over USART
                        for (int i = 0; i < strlen(jsonString); i++) {
 8005242:	2300      	movs	r3, #0
 8005244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005248:	e00e      	b.n	8005268 <uartTask+0x188>
                            MCAL_USART_SendChar(USART1, jsonString[i]);
 800524a:	f107 020c 	add.w	r2, r7, #12
 800524e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005252:	4413      	add	r3, r2
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	4619      	mov	r1, r3
 8005258:	4875      	ldr	r0, [pc, #468]	; (8005430 <uartTask+0x350>)
 800525a:	f7ff fb5f 	bl	800491c <MCAL_USART_SendChar>
                        for (int i = 0; i < strlen(jsonString); i++) {
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	3301      	adds	r3, #1
 8005264:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005268:	f107 030c 	add.w	r3, r7, #12
 800526c:	4618      	mov	r0, r3
 800526e:	f7fa ff89 	bl	8000184 <strlen>
 8005272:	4602      	mov	r2, r0
 8005274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005278:	429a      	cmp	r2, r3
 800527a:	d8e6      	bhi.n	800524a <uartTask+0x16a>
                        }
                        xSemaphoreGive(USARTSemaphore);
 800527c:	4b6b      	ldr	r3, [pc, #428]	; (800542c <uartTask+0x34c>)
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	2300      	movs	r3, #0
 8005282:	2200      	movs	r2, #0
 8005284:	2100      	movs	r1, #0
 8005286:	f7fc f827 	bl	80012d8 <xQueueGenericSend>
                    }
                    // Initialize relay actuator
                    RELAY_Init(PORTB, 5);
 800528a:	2105      	movs	r1, #5
 800528c:	2001      	movs	r0, #1
 800528e:	f7ff fdb1 	bl	8004df4 <RELAY_Init>
                    relayStatus = relayLastStatus;
 8005292:	4b6b      	ldr	r3, [pc, #428]	; (8005440 <uartTask+0x360>)
 8005294:	781a      	ldrb	r2, [r3, #0]
 8005296:	4b6b      	ldr	r3, [pc, #428]	; (8005444 <uartTask+0x364>)
 8005298:	701a      	strb	r2, [r3, #0]
                    xSemaphoreGive(relaySemaphore);
 800529a:	4b6b      	ldr	r3, [pc, #428]	; (8005448 <uartTask+0x368>)
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	2300      	movs	r3, #0
 80052a0:	2200      	movs	r2, #0
 80052a2:	2100      	movs	r1, #0
 80052a4:	f7fc f818 	bl	80012d8 <xQueueGenericSend>
 80052a8:	e71e      	b.n	80050e8 <uartTask+0x8>
                }
            }
            // Command handling for disabling sensors or actuators
            else if (strcmp(jsonMsg.command, "DIS") == 0) {
 80052aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052ae:	4967      	ldr	r1, [pc, #412]	; (800544c <uartTask+0x36c>)
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fa ff5d 	bl	8000170 <strcmp>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 8101 	bne.w	80054c0 <uartTask+0x3e0>
                // Disable temperature sensor if node ID matches
                if(jsonMsg.nodeID == TEMP_SENSOR_NODE_ID) {
 80052be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052c2:	2b80      	cmp	r3, #128	; 0x80
 80052c4:	d146      	bne.n	8005354 <uartTask+0x274>
                    // Prepare and send "DONE" message in JSON format
                    char jsonString[100];
                    snprintf(jsonString, sizeof(jsonString), "{\"nodeType\":\"NS\", \"nodeID\": %d, \"data\": \"DONE\"}", jsonMsg.nodeID);
 80052c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052ca:	f107 000c 	add.w	r0, r7, #12
 80052ce:	4a56      	ldr	r2, [pc, #344]	; (8005428 <uartTask+0x348>)
 80052d0:	2164      	movs	r1, #100	; 0x64
 80052d2:	f001 f833 	bl	800633c <sniprintf>
                    if (xSemaphoreTake(USARTSemaphore, portMAX_DELAY) == pdTRUE) {
 80052d6:	4b55      	ldr	r3, [pc, #340]	; (800542c <uartTask+0x34c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f04f 31ff 	mov.w	r1, #4294967295
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fc f99a 	bl	8001618 <xQueueSemaphoreTake>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d123      	bne.n	8005332 <uartTask+0x252>
                        // Send JSON string over USART
                        for (int i = 0; i < strlen(jsonString); i++) {
 80052ea:	2300      	movs	r3, #0
 80052ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052f0:	e00e      	b.n	8005310 <uartTask+0x230>
                            MCAL_USART_SendChar(USART1, jsonString[i]);
 80052f2:	f107 020c 	add.w	r2, r7, #12
 80052f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052fa:	4413      	add	r3, r2
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	4619      	mov	r1, r3
 8005300:	484b      	ldr	r0, [pc, #300]	; (8005430 <uartTask+0x350>)
 8005302:	f7ff fb0b 	bl	800491c <MCAL_USART_SendChar>
                        for (int i = 0; i < strlen(jsonString); i++) {
 8005306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530a:	3301      	adds	r3, #1
 800530c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	4618      	mov	r0, r3
 8005316:	f7fa ff35 	bl	8000184 <strlen>
 800531a:	4602      	mov	r2, r0
 800531c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005320:	429a      	cmp	r2, r3
 8005322:	d8e6      	bhi.n	80052f2 <uartTask+0x212>
                        }
                        xSemaphoreGive(USARTSemaphore);
 8005324:	4b41      	ldr	r3, [pc, #260]	; (800542c <uartTask+0x34c>)
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	2300      	movs	r3, #0
 800532a:	2200      	movs	r2, #0
 800532c:	2100      	movs	r1, #0
 800532e:	f7fb ffd3 	bl	80012d8 <xQueueGenericSend>
                    }
                    // De-initialize ADC for temperature sensor
                    if (xSemaphoreTake(tempSensorSemaphore, portMAX_DELAY) == pdTRUE) {
 8005332:	4b47      	ldr	r3, [pc, #284]	; (8005450 <uartTask+0x370>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f04f 31ff 	mov.w	r1, #4294967295
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc f96c 	bl	8001618 <xQueueSemaphoreTake>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	f47f aed0 	bne.w	80050e8 <uartTask+0x8>
                        adc_Deinit(ADC1, PA, 0);
 8005348:	2200      	movs	r2, #0
 800534a:	2101      	movs	r1, #1
 800534c:	4839      	ldr	r0, [pc, #228]	; (8005434 <uartTask+0x354>)
 800534e:	f7fe fe45 	bl	8003fdc <adc_Deinit>
 8005352:	e6c9      	b.n	80050e8 <uartTask+0x8>
                    }
                }
                // Disable light sensor if node ID matches
                else if(jsonMsg.nodeID == LIGHT_SENSOR_NODE_ID) {
 8005354:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005358:	2b81      	cmp	r3, #129	; 0x81
 800535a:	d146      	bne.n	80053ea <uartTask+0x30a>
                    // Prepare and send "DONE" message in JSON format
                    char jsonString[100];
                    snprintf(jsonString, sizeof(jsonString), "{\"nodeType\":\"NS\", \"nodeID\": %d, \"data\": \"DONE\"}", jsonMsg.nodeID);
 800535c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005360:	f107 000c 	add.w	r0, r7, #12
 8005364:	4a30      	ldr	r2, [pc, #192]	; (8005428 <uartTask+0x348>)
 8005366:	2164      	movs	r1, #100	; 0x64
 8005368:	f000 ffe8 	bl	800633c <sniprintf>
                    if (xSemaphoreTake(USARTSemaphore, portMAX_DELAY) == pdTRUE) {
 800536c:	4b2f      	ldr	r3, [pc, #188]	; (800542c <uartTask+0x34c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f04f 31ff 	mov.w	r1, #4294967295
 8005374:	4618      	mov	r0, r3
 8005376:	f7fc f94f 	bl	8001618 <xQueueSemaphoreTake>
 800537a:	4603      	mov	r3, r0
 800537c:	2b01      	cmp	r3, #1
 800537e:	d123      	bne.n	80053c8 <uartTask+0x2e8>
                        // Send JSON string over USART
                        for (int i = 0; i < strlen(jsonString); i++) {
 8005380:	2300      	movs	r3, #0
 8005382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005386:	e00e      	b.n	80053a6 <uartTask+0x2c6>
                            MCAL_USART_SendChar(USART1, jsonString[i]);
 8005388:	f107 020c 	add.w	r2, r7, #12
 800538c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005390:	4413      	add	r3, r2
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	4619      	mov	r1, r3
 8005396:	4826      	ldr	r0, [pc, #152]	; (8005430 <uartTask+0x350>)
 8005398:	f7ff fac0 	bl	800491c <MCAL_USART_SendChar>
                        for (int i = 0; i < strlen(jsonString); i++) {
 800539c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a0:	3301      	adds	r3, #1
 80053a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80053a6:	f107 030c 	add.w	r3, r7, #12
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fa feea 	bl	8000184 <strlen>
 80053b0:	4602      	mov	r2, r0
 80053b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d8e6      	bhi.n	8005388 <uartTask+0x2a8>
                        }
                        xSemaphoreGive(USARTSemaphore);
 80053ba:	4b1c      	ldr	r3, [pc, #112]	; (800542c <uartTask+0x34c>)
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	2200      	movs	r2, #0
 80053c2:	2100      	movs	r1, #0
 80053c4:	f7fb ff88 	bl	80012d8 <xQueueGenericSend>
                    }
                    // De-initialize ADC for light sensor
                    if (xSemaphoreTake(lightSensorSemaphore, portMAX_DELAY) == pdTRUE) {
 80053c8:	4b22      	ldr	r3, [pc, #136]	; (8005454 <uartTask+0x374>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f04f 31ff 	mov.w	r1, #4294967295
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fc f921 	bl	8001618 <xQueueSemaphoreTake>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	f47f ae85 	bne.w	80050e8 <uartTask+0x8>
                        adc_Deinit(ADC2, PA, 1);
 80053de:	2201      	movs	r2, #1
 80053e0:	2101      	movs	r1, #1
 80053e2:	4815      	ldr	r0, [pc, #84]	; (8005438 <uartTask+0x358>)
 80053e4:	f7fe fdfa 	bl	8003fdc <adc_Deinit>
 80053e8:	e67e      	b.n	80050e8 <uartTask+0x8>
                    }
                }
                // Disable relay actuator if node ID matches
                else if(jsonMsg.nodeID == RELAY_ACTUATOR_NODE_ID) {
 80053ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053ee:	2b50      	cmp	r3, #80	; 0x50
 80053f0:	f47f ae7a 	bne.w	80050e8 <uartTask+0x8>
                    // Prepare and send "DONE" message in JSON format
                    char jsonString[100];
                    snprintf(jsonString, sizeof(jsonString), "{\"nodeType\":\"NA\", \"nodeID\": %d, \"data\": \"DONE\"}", jsonMsg.nodeID);
 80053f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053f8:	f107 000c 	add.w	r0, r7, #12
 80053fc:	4a0f      	ldr	r2, [pc, #60]	; (800543c <uartTask+0x35c>)
 80053fe:	2164      	movs	r1, #100	; 0x64
 8005400:	f000 ff9c 	bl	800633c <sniprintf>
                    if (xSemaphoreTake(USARTSemaphore, portMAX_DELAY) == pdTRUE) {
 8005404:	4b09      	ldr	r3, [pc, #36]	; (800542c <uartTask+0x34c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f04f 31ff 	mov.w	r1, #4294967295
 800540c:	4618      	mov	r0, r3
 800540e:	f7fc f903 	bl	8001618 <xQueueSemaphoreTake>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d13f      	bne.n	8005498 <uartTask+0x3b8>
                        // Send JSON string over USART
                        for (int i = 0; i < strlen(jsonString); i++) {
 8005418:	2300      	movs	r3, #0
 800541a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800541e:	e02a      	b.n	8005476 <uartTask+0x396>
 8005420:	2000245c 	.word	0x2000245c
 8005424:	08009108 	.word	0x08009108
 8005428:	0800910c 	.word	0x0800910c
 800542c:	20002350 	.word	0x20002350
 8005430:	40013800 	.word	0x40013800
 8005434:	40012400 	.word	0x40012400
 8005438:	40012800 	.word	0x40012800
 800543c:	0800913c 	.word	0x0800913c
 8005440:	2000236d 	.word	0x2000236d
 8005444:	2000236c 	.word	0x2000236c
 8005448:	20002354 	.word	0x20002354
 800544c:	0800916c 	.word	0x0800916c
 8005450:	20002358 	.word	0x20002358
 8005454:	2000235c 	.word	0x2000235c
                            MCAL_USART_SendChar(USART1, jsonString[i]);
 8005458:	f107 020c 	add.w	r2, r7, #12
 800545c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005460:	4413      	add	r3, r2
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	4619      	mov	r1, r3
 8005466:	4866      	ldr	r0, [pc, #408]	; (8005600 <uartTask+0x520>)
 8005468:	f7ff fa58 	bl	800491c <MCAL_USART_SendChar>
                        for (int i = 0; i < strlen(jsonString); i++) {
 800546c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005470:	3301      	adds	r3, #1
 8005472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005476:	f107 030c 	add.w	r3, r7, #12
 800547a:	4618      	mov	r0, r3
 800547c:	f7fa fe82 	bl	8000184 <strlen>
 8005480:	4602      	mov	r2, r0
 8005482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005486:	429a      	cmp	r2, r3
 8005488:	d8e6      	bhi.n	8005458 <uartTask+0x378>
                        }
                        xSemaphoreGive(USARTSemaphore);
 800548a:	4b5e      	ldr	r3, [pc, #376]	; (8005604 <uartTask+0x524>)
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	2300      	movs	r3, #0
 8005490:	2200      	movs	r2, #0
 8005492:	2100      	movs	r1, #0
 8005494:	f7fb ff20 	bl	80012d8 <xQueueGenericSend>
                    }
                    // De-initialize relay actuator
                    if (xSemaphoreTake(relaySemaphore, portMAX_DELAY) == pdTRUE) {
 8005498:	4b5b      	ldr	r3, [pc, #364]	; (8005608 <uartTask+0x528>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f04f 31ff 	mov.w	r1, #4294967295
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fc f8b9 	bl	8001618 <xQueueSemaphoreTake>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	f47f ae1d 	bne.w	80050e8 <uartTask+0x8>
                        relayLastStatus = relayStatus;
 80054ae:	4b57      	ldr	r3, [pc, #348]	; (800560c <uartTask+0x52c>)
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	4b57      	ldr	r3, [pc, #348]	; (8005610 <uartTask+0x530>)
 80054b4:	701a      	strb	r2, [r3, #0]
                        RELAY_DeInit(PORTB, 5);
 80054b6:	2105      	movs	r1, #5
 80054b8:	2001      	movs	r0, #1
 80054ba:	f7ff fcd1 	bl	8004e60 <RELAY_DeInit>
 80054be:	e613      	b.n	80050e8 <uartTask+0x8>
                    }
                }
            }
            // Command handling for activating or deactivating relays
            else if (strcmp(jsonMsg.command, "ACT") == 0) {
 80054c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80054c4:	4953      	ldr	r1, [pc, #332]	; (8005614 <uartTask+0x534>)
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fa fe52 	bl	8000170 <strcmp>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d11b      	bne.n	800550a <uartTask+0x42a>
                if (strcmp(jsonMsg.data, "1") == 0) {
 80054d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80054d6:	3344      	adds	r3, #68	; 0x44
 80054d8:	494f      	ldr	r1, [pc, #316]	; (8005618 <uartTask+0x538>)
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fa fe48 	bl	8000170 <strcmp>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <uartTask+0x40c>
                    relayStatus = 1; // Activate relay
 80054e6:	4b49      	ldr	r3, [pc, #292]	; (800560c <uartTask+0x52c>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	701a      	strb	r2, [r3, #0]
                }
                if (strcmp(jsonMsg.data, "0") == 0) {
 80054ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80054f0:	3344      	adds	r3, #68	; 0x44
 80054f2:	494a      	ldr	r1, [pc, #296]	; (800561c <uartTask+0x53c>)
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fa fe3b 	bl	8000170 <strcmp>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f47f adf3 	bne.w	80050e8 <uartTask+0x8>
                    relayStatus = 0; // Deactivate relay
 8005502:	4b42      	ldr	r3, [pc, #264]	; (800560c <uartTask+0x52c>)
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	e5ee      	b.n	80050e8 <uartTask+0x8>
                }
            }
            // Command handling for status reporting
            else if (strcmp(jsonMsg.command, "STA") == 0) {
 800550a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800550e:	4944      	ldr	r1, [pc, #272]	; (8005620 <uartTask+0x540>)
 8005510:	4618      	mov	r0, r3
 8005512:	f7fa fe2d 	bl	8000170 <strcmp>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d13b      	bne.n	8005594 <uartTask+0x4b4>
                // Prepare JSON response with relay status
                char jsonString[100];
                snprintf(jsonString, sizeof(jsonString), "{\"nodeType\":\"NA\", \"nodeID\": %d, \"data\": \"%d\"}", jsonMsg.nodeID, relayStatus);
 800551c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005520:	4b3a      	ldr	r3, [pc, #232]	; (800560c <uartTask+0x52c>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	f107 000c 	add.w	r0, r7, #12
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	4613      	mov	r3, r2
 800552c:	4a3d      	ldr	r2, [pc, #244]	; (8005624 <uartTask+0x544>)
 800552e:	2164      	movs	r1, #100	; 0x64
 8005530:	f000 ff04 	bl	800633c <sniprintf>
                if (xSemaphoreTake(USARTSemaphore, portMAX_DELAY) == pdTRUE) {
 8005534:	4b33      	ldr	r3, [pc, #204]	; (8005604 <uartTask+0x524>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f04f 31ff 	mov.w	r1, #4294967295
 800553c:	4618      	mov	r0, r3
 800553e:	f7fc f86b 	bl	8001618 <xQueueSemaphoreTake>
 8005542:	4603      	mov	r3, r0
 8005544:	2b01      	cmp	r3, #1
 8005546:	f47f adcf 	bne.w	80050e8 <uartTask+0x8>
                    // Send status information via USART
                    for (int i = 0; i < strlen(jsonString); i++) {
 800554a:	2300      	movs	r3, #0
 800554c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005550:	e00e      	b.n	8005570 <uartTask+0x490>
                        MCAL_USART_SendChar(USART1, jsonString[i]);
 8005552:	f107 020c 	add.w	r2, r7, #12
 8005556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800555a:	4413      	add	r3, r2
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	4619      	mov	r1, r3
 8005560:	4827      	ldr	r0, [pc, #156]	; (8005600 <uartTask+0x520>)
 8005562:	f7ff f9db 	bl	800491c <MCAL_USART_SendChar>
                    for (int i = 0; i < strlen(jsonString); i++) {
 8005566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800556a:	3301      	adds	r3, #1
 800556c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005570:	f107 030c 	add.w	r3, r7, #12
 8005574:	4618      	mov	r0, r3
 8005576:	f7fa fe05 	bl	8000184 <strlen>
 800557a:	4602      	mov	r2, r0
 800557c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005580:	429a      	cmp	r2, r3
 8005582:	d8e6      	bhi.n	8005552 <uartTask+0x472>
                    }
                    xSemaphoreGive(USARTSemaphore);
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <uartTask+0x524>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	2300      	movs	r3, #0
 800558a:	2200      	movs	r2, #0
 800558c:	2100      	movs	r1, #0
 800558e:	f7fb fea3 	bl	80012d8 <xQueueGenericSend>
 8005592:	e5a9      	b.n	80050e8 <uartTask+0x8>
                }
            }
            // Command handling for setting durations
            else if (strcmp(jsonMsg.command, "DUR") == 0) {
 8005594:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005598:	4923      	ldr	r1, [pc, #140]	; (8005628 <uartTask+0x548>)
 800559a:	4618      	mov	r0, r3
 800559c:	f7fa fde8 	bl	8000170 <strcmp>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f47f ada0 	bne.w	80050e8 <uartTask+0x8>
                if(jsonMsg.nodeID == TEMP_SENSOR_NODE_ID) {
 80055a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055ac:	2b80      	cmp	r3, #128	; 0x80
 80055ae:	d110      	bne.n	80055d2 <uartTask+0x4f2>
                    tempSensorDuration = atoi(jsonMsg.data);  // Set temperature sensor duration in seconds
 80055b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80055b4:	3344      	adds	r3, #68	; 0x44
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f93b 	bl	8005832 <atoi>
 80055bc:	4602      	mov	r2, r0
 80055be:	4b1b      	ldr	r3, [pc, #108]	; (800562c <uartTask+0x54c>)
 80055c0:	601a      	str	r2, [r3, #0]
                    xSemaphoreGive(tempSensorSemaphore);
 80055c2:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <uartTask+0x550>)
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	2200      	movs	r2, #0
 80055ca:	2100      	movs	r1, #0
 80055cc:	f7fb fe84 	bl	80012d8 <xQueueGenericSend>
 80055d0:	e58a      	b.n	80050e8 <uartTask+0x8>
                } else if(jsonMsg.nodeID == LIGHT_SENSOR_NODE_ID) {
 80055d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055d6:	2b81      	cmp	r3, #129	; 0x81
 80055d8:	f47f ad86 	bne.w	80050e8 <uartTask+0x8>
                    lightSensorDuration = atoi(jsonMsg.data);  // Set light sensor duration in seconds
 80055dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80055e0:	3344      	adds	r3, #68	; 0x44
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f925 	bl	8005832 <atoi>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b12      	ldr	r3, [pc, #72]	; (8005634 <uartTask+0x554>)
 80055ec:	601a      	str	r2, [r3, #0]
                    xSemaphoreGive(lightSensorSemaphore);
 80055ee:	4b12      	ldr	r3, [pc, #72]	; (8005638 <uartTask+0x558>)
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	2300      	movs	r3, #0
 80055f4:	2200      	movs	r2, #0
 80055f6:	2100      	movs	r1, #0
 80055f8:	f7fb fe6e 	bl	80012d8 <xQueueGenericSend>
        if (xQueueReceive(xJsonQueue, &jsonMsg, portMAX_DELAY) == pdTRUE) {
 80055fc:	e574      	b.n	80050e8 <uartTask+0x8>
 80055fe:	bf00      	nop
 8005600:	40013800 	.word	0x40013800
 8005604:	20002350 	.word	0x20002350
 8005608:	20002354 	.word	0x20002354
 800560c:	2000236c 	.word	0x2000236c
 8005610:	2000236d 	.word	0x2000236d
 8005614:	08009170 	.word	0x08009170
 8005618:	08009174 	.word	0x08009174
 800561c:	08009178 	.word	0x08009178
 8005620:	0800917c 	.word	0x0800917c
 8005624:	08009180 	.word	0x08009180
 8005628:	080091b0 	.word	0x080091b0
 800562c:	2000002c 	.word	0x2000002c
 8005630:	20002358 	.word	0x20002358
 8005634:	20000030 	.word	0x20000030
 8005638:	2000235c 	.word	0x2000235c

0800563c <relayTask>:
    }
}


// Relay Control Task
void relayTask(void *pvParameters) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]

	while (1) {
		// Wait for the relay semaphore to ensure exclusive access to relay control
		if (xSemaphoreTake(relaySemaphore, portMAX_DELAY) == pdTRUE)
 8005644:	4b11      	ldr	r3, [pc, #68]	; (800568c <relayTask+0x50>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f04f 31ff 	mov.w	r1, #4294967295
 800564c:	4618      	mov	r0, r3
 800564e:	f7fb ffe3 	bl	8001618 <xQueueSemaphoreTake>
 8005652:	4603      	mov	r3, r0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d1f5      	bne.n	8005644 <relayTask+0x8>
		{

			// Check relay status and turn the relay on or off accordingly
			if (relayStatus == 1) {
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <relayTask+0x54>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d105      	bne.n	800566c <relayTask+0x30>
				MCAL_GPIO_WritePin(GPIOB, 5, 0);  // Turn relay on
 8005660:	2200      	movs	r2, #0
 8005662:	2105      	movs	r1, #5
 8005664:	480b      	ldr	r0, [pc, #44]	; (8005694 <relayTask+0x58>)
 8005666:	f7fe ff5f 	bl	8004528 <MCAL_GPIO_WritePin>
 800566a:	e004      	b.n	8005676 <relayTask+0x3a>
			} else {
				MCAL_GPIO_WritePin(GPIOB, 5, 1);  // Turn relay off
 800566c:	2201      	movs	r2, #1
 800566e:	2105      	movs	r1, #5
 8005670:	4808      	ldr	r0, [pc, #32]	; (8005694 <relayTask+0x58>)
 8005672:	f7fe ff59 	bl	8004528 <MCAL_GPIO_WritePin>
			}

			// Release the relay semaphore after completing the operation
			xSemaphoreGive(relaySemaphore);
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <relayTask+0x50>)
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	2300      	movs	r3, #0
 800567c:	2200      	movs	r2, #0
 800567e:	2100      	movs	r1, #0
 8005680:	f7fb fe2a 	bl	80012d8 <xQueueGenericSend>

			// Delay for 100 ms before checking relay status again
			vTaskDelay(100);  // Check relay status every 100 ms
 8005684:	2064      	movs	r0, #100	; 0x64
 8005686:	f7fc fab3 	bl	8001bf0 <vTaskDelay>
		if (xSemaphoreTake(relaySemaphore, portMAX_DELAY) == pdTRUE)
 800568a:	e7db      	b.n	8005644 <relayTask+0x8>
 800568c:	20002354 	.word	0x20002354
 8005690:	2000236c 	.word	0x2000236c
 8005694:	40010c00 	.word	0x40010c00

08005698 <JsonProcessingTask>:
		}
	}
}

// Data Processing Task
void JsonProcessingTask(void *pvParameters) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b0a0      	sub	sp, #128	; 0x80
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]

	JsonMessage jsonMsg;

	while (1) {
		// Wait for the JSON semaphore to signal that a new JSON message is available
		if (xSemaphoreTake(xJsonSemaphore, portMAX_DELAY) == pdTRUE) {
 80056a0:	4b2e      	ldr	r3, [pc, #184]	; (800575c <JsonProcessingTask+0xc4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f04f 31ff 	mov.w	r1, #4294967295
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fb ffb5 	bl	8001618 <xQueueSemaphoreTake>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d1f5      	bne.n	80056a0 <JsonProcessingTask+0x8>

			// Parse the JSON buffer to extract command data
			cJSON *json = cJSON_Parse(jsonBuffer);
 80056b4:	482a      	ldr	r0, [pc, #168]	; (8005760 <JsonProcessingTask+0xc8>)
 80056b6:	f7fe f8a7 	bl	8003808 <cJSON_Parse>
 80056ba:	67f8      	str	r0, [r7, #124]	; 0x7c

			// Extract "command" from JSON and copy it into jsonMsg
			cJSON *command = cJSON_GetObjectItemCaseSensitive(json, "command");
 80056bc:	4929      	ldr	r1, [pc, #164]	; (8005764 <JsonProcessingTask+0xcc>)
 80056be:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80056c0:	f7fe fbad 	bl	8003e1e <cJSON_GetObjectItemCaseSensitive>
 80056c4:	67b8      	str	r0, [r7, #120]	; 0x78
			if (cJSON_IsString(command) && (command->valuestring != NULL)) {
 80056c6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80056c8:	f7fe fbce 	bl	8003e68 <cJSON_IsString>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00e      	beq.n	80056f0 <JsonProcessingTask+0x58>
 80056d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <JsonProcessingTask+0x58>
				strncpy(jsonMsg.command, command->valuestring, sizeof(jsonMsg.command) - 1);
 80056da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056dc:	6919      	ldr	r1, [r3, #16]
 80056de:	f107 030c 	add.w	r3, r7, #12
 80056e2:	223f      	movs	r2, #63	; 0x3f
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fe6f 	bl	80063c8 <strncpy>
				jsonMsg.command[sizeof(jsonMsg.command) - 1] = '\0';  // Ensure null termination
 80056ea:	2300      	movs	r3, #0
 80056ec:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}

			// Extract "nodeID" from JSON and store it in jsonMsg
			cJSON *nodeID = cJSON_GetObjectItemCaseSensitive(json, "nodeID");
 80056f0:	491d      	ldr	r1, [pc, #116]	; (8005768 <JsonProcessingTask+0xd0>)
 80056f2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80056f4:	f7fe fb93 	bl	8003e1e <cJSON_GetObjectItemCaseSensitive>
 80056f8:	6778      	str	r0, [r7, #116]	; 0x74
			if (cJSON_IsNumber(nodeID)) {
 80056fa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80056fc:	f7fe fb9e 	bl	8003e3c <cJSON_IsNumber>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <JsonProcessingTask+0x74>
				jsonMsg.nodeID = nodeID->valueint;
 8005706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	64fb      	str	r3, [r7, #76]	; 0x4c
			}

			// Extract "data" from JSON and copy it into jsonMsg
			cJSON *data = cJSON_GetObjectItemCaseSensitive(json, "data");
 800570c:	4917      	ldr	r1, [pc, #92]	; (800576c <JsonProcessingTask+0xd4>)
 800570e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005710:	f7fe fb85 	bl	8003e1e <cJSON_GetObjectItemCaseSensitive>
 8005714:	6738      	str	r0, [r7, #112]	; 0x70
			if (cJSON_IsString(data) && (data->valuestring != NULL)) {
 8005716:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005718:	f7fe fba6 	bl	8003e68 <cJSON_IsString>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00f      	beq.n	8005742 <JsonProcessingTask+0xaa>
 8005722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <JsonProcessingTask+0xaa>
				strncpy(jsonMsg.data, data->valuestring, sizeof(jsonMsg.data) - 1);
 800572a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800572c:	6919      	ldr	r1, [r3, #16]
 800572e:	f107 030c 	add.w	r3, r7, #12
 8005732:	3344      	adds	r3, #68	; 0x44
 8005734:	221f      	movs	r2, #31
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fe46 	bl	80063c8 <strncpy>
				jsonMsg.data[sizeof(jsonMsg.data) - 1] = '\0';  // Ensure null termination
 800573c:	2300      	movs	r3, #0
 800573e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}

			// Enqueue the parsed message for further processing
			xQueueSend(xJsonQueue, &jsonMsg, 0);
 8005742:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <JsonProcessingTask+0xd8>)
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	f107 010c 	add.w	r1, r7, #12
 800574a:	2300      	movs	r3, #0
 800574c:	2200      	movs	r2, #0
 800574e:	f7fb fdc3 	bl	80012d8 <xQueueGenericSend>

			// Clean up by freeing the allocated JSON object
			cJSON_Delete(json);
 8005752:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005754:	f7fd fab0 	bl	8002cb8 <cJSON_Delete>
		if (xSemaphoreTake(xJsonSemaphore, portMAX_DELAY) == pdTRUE) {
 8005758:	e7a2      	b.n	80056a0 <JsonProcessingTask+0x8>
 800575a:	bf00      	nop
 800575c:	20002460 	.word	0x20002460
 8005760:	2000240c 	.word	0x2000240c
 8005764:	080091b4 	.word	0x080091b4
 8005768:	080091bc 	.word	0x080091bc
 800576c:	080091c4 	.word	0x080091c4
 8005770:	2000245c 	.word	0x2000245c

08005774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <_sbrk+0x5c>)
 800577e:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <_sbrk+0x60>)
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <_sbrk+0x64>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005790:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <_sbrk+0x64>)
 8005792:	4a12      	ldr	r2, [pc, #72]	; (80057dc <_sbrk+0x68>)
 8005794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005796:	4b10      	ldr	r3, [pc, #64]	; (80057d8 <_sbrk+0x64>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4413      	add	r3, r2
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d207      	bcs.n	80057b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057a4:	f000 f84a 	bl	800583c <__errno>
 80057a8:	4602      	mov	r2, r0
 80057aa:	230c      	movs	r3, #12
 80057ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80057ae:	f04f 33ff 	mov.w	r3, #4294967295
 80057b2:	e009      	b.n	80057c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057b4:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <_sbrk+0x64>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057ba:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <_sbrk+0x64>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	4a05      	ldr	r2, [pc, #20]	; (80057d8 <_sbrk+0x64>)
 80057c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20005000 	.word	0x20005000
 80057d4:	00000400 	.word	0x00000400
 80057d8:	20002378 	.word	0x20002378
 80057dc:	20002468 	.word	0x20002468

080057e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80057e0:	480d      	ldr	r0, [pc, #52]	; (8005818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80057e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80057e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80057e8:	480c      	ldr	r0, [pc, #48]	; (800581c <LoopForever+0x6>)
  ldr r1, =_edata
 80057ea:	490d      	ldr	r1, [pc, #52]	; (8005820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80057ec:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <LoopForever+0xe>)
  movs r3, #0
 80057ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057f0:	e002      	b.n	80057f8 <LoopCopyDataInit>

080057f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057f6:	3304      	adds	r3, #4

080057f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057fc:	d3f9      	bcc.n	80057f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057fe:	4a0a      	ldr	r2, [pc, #40]	; (8005828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005800:	4c0a      	ldr	r4, [pc, #40]	; (800582c <LoopForever+0x16>)
  movs r3, #0
 8005802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005804:	e001      	b.n	800580a <LoopFillZerobss>

08005806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005808:	3204      	adds	r2, #4

0800580a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800580a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800580c:	d3fb      	bcc.n	8005806 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800580e:	f000 f81b 	bl	8005848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005812:	f7ff f9c5 	bl	8004ba0 <main>

08005816 <LoopForever>:

LoopForever:
    b LoopForever
 8005816:	e7fe      	b.n	8005816 <LoopForever>
  ldr   r0, =_estack
 8005818:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800581c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005820:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8005824:	080094e0 	.word	0x080094e0
  ldr r2, =_sbss
 8005828:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 800582c:	20002468 	.word	0x20002468

08005830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005830:	e7fe      	b.n	8005830 <ADC1_2_IRQHandler>

08005832 <atoi>:
 8005832:	220a      	movs	r2, #10
 8005834:	2100      	movs	r1, #0
 8005836:	f001 bc8d 	b.w	8007154 <strtol>
	...

0800583c <__errno>:
 800583c:	4b01      	ldr	r3, [pc, #4]	; (8005844 <__errno+0x8>)
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000034 	.word	0x20000034

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	2500      	movs	r5, #0
 800584c:	4e0c      	ldr	r6, [pc, #48]	; (8005880 <__libc_init_array+0x38>)
 800584e:	4c0d      	ldr	r4, [pc, #52]	; (8005884 <__libc_init_array+0x3c>)
 8005850:	1ba4      	subs	r4, r4, r6
 8005852:	10a4      	asrs	r4, r4, #2
 8005854:	42a5      	cmp	r5, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	f003 fbca 	bl	8008ff0 <_init>
 800585c:	2500      	movs	r5, #0
 800585e:	4e0a      	ldr	r6, [pc, #40]	; (8005888 <__libc_init_array+0x40>)
 8005860:	4c0a      	ldr	r4, [pc, #40]	; (800588c <__libc_init_array+0x44>)
 8005862:	1ba4      	subs	r4, r4, r6
 8005864:	10a4      	asrs	r4, r4, #2
 8005866:	42a5      	cmp	r5, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005870:	4798      	blx	r3
 8005872:	3501      	adds	r5, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800587a:	4798      	blx	r3
 800587c:	3501      	adds	r5, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	080094d8 	.word	0x080094d8
 8005884:	080094d8 	.word	0x080094d8
 8005888:	080094d8 	.word	0x080094d8
 800588c:	080094dc 	.word	0x080094dc

08005890 <__locale_ctype_ptr_l>:
 8005890:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005894:	4770      	bx	lr
	...

08005898 <__locale_ctype_ptr>:
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <__locale_ctype_ptr+0x14>)
 800589a:	4a05      	ldr	r2, [pc, #20]	; (80058b0 <__locale_ctype_ptr+0x18>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bf08      	it	eq
 80058a4:	4613      	moveq	r3, r2
 80058a6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80058aa:	4770      	bx	lr
 80058ac:	20000034 	.word	0x20000034
 80058b0:	20000098 	.word	0x20000098

080058b4 <malloc>:
 80058b4:	4b02      	ldr	r3, [pc, #8]	; (80058c0 <malloc+0xc>)
 80058b6:	4601      	mov	r1, r0
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	f000 b87d 	b.w	80059b8 <_malloc_r>
 80058be:	bf00      	nop
 80058c0:	20000034 	.word	0x20000034

080058c4 <free>:
 80058c4:	4b02      	ldr	r3, [pc, #8]	; (80058d0 <free+0xc>)
 80058c6:	4601      	mov	r1, r0
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	f000 b829 	b.w	8005920 <_free_r>
 80058ce:	bf00      	nop
 80058d0:	20000034 	.word	0x20000034

080058d4 <__ascii_mbtowc>:
 80058d4:	b082      	sub	sp, #8
 80058d6:	b901      	cbnz	r1, 80058da <__ascii_mbtowc+0x6>
 80058d8:	a901      	add	r1, sp, #4
 80058da:	b142      	cbz	r2, 80058ee <__ascii_mbtowc+0x1a>
 80058dc:	b14b      	cbz	r3, 80058f2 <__ascii_mbtowc+0x1e>
 80058de:	7813      	ldrb	r3, [r2, #0]
 80058e0:	600b      	str	r3, [r1, #0]
 80058e2:	7812      	ldrb	r2, [r2, #0]
 80058e4:	1c10      	adds	r0, r2, #0
 80058e6:	bf18      	it	ne
 80058e8:	2001      	movne	r0, #1
 80058ea:	b002      	add	sp, #8
 80058ec:	4770      	bx	lr
 80058ee:	4610      	mov	r0, r2
 80058f0:	e7fb      	b.n	80058ea <__ascii_mbtowc+0x16>
 80058f2:	f06f 0001 	mvn.w	r0, #1
 80058f6:	e7f8      	b.n	80058ea <__ascii_mbtowc+0x16>

080058f8 <memcpy>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	1e43      	subs	r3, r0, #1
 80058fc:	440a      	add	r2, r1
 80058fe:	4291      	cmp	r1, r2
 8005900:	d100      	bne.n	8005904 <memcpy+0xc>
 8005902:	bd10      	pop	{r4, pc}
 8005904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800590c:	e7f7      	b.n	80058fe <memcpy+0x6>

0800590e <memset>:
 800590e:	4603      	mov	r3, r0
 8005910:	4402      	add	r2, r0
 8005912:	4293      	cmp	r3, r2
 8005914:	d100      	bne.n	8005918 <memset+0xa>
 8005916:	4770      	bx	lr
 8005918:	f803 1b01 	strb.w	r1, [r3], #1
 800591c:	e7f9      	b.n	8005912 <memset+0x4>
	...

08005920 <_free_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4605      	mov	r5, r0
 8005924:	2900      	cmp	r1, #0
 8005926:	d043      	beq.n	80059b0 <_free_r+0x90>
 8005928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800592c:	1f0c      	subs	r4, r1, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	bfb8      	it	lt
 8005932:	18e4      	addlt	r4, r4, r3
 8005934:	f002 fdba 	bl	80084ac <__malloc_lock>
 8005938:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <_free_r+0x94>)
 800593a:	6813      	ldr	r3, [r2, #0]
 800593c:	4610      	mov	r0, r2
 800593e:	b933      	cbnz	r3, 800594e <_free_r+0x2e>
 8005940:	6063      	str	r3, [r4, #4]
 8005942:	6014      	str	r4, [r2, #0]
 8005944:	4628      	mov	r0, r5
 8005946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800594a:	f002 bdb0 	b.w	80084ae <__malloc_unlock>
 800594e:	42a3      	cmp	r3, r4
 8005950:	d90b      	bls.n	800596a <_free_r+0x4a>
 8005952:	6821      	ldr	r1, [r4, #0]
 8005954:	1862      	adds	r2, r4, r1
 8005956:	4293      	cmp	r3, r2
 8005958:	bf01      	itttt	eq
 800595a:	681a      	ldreq	r2, [r3, #0]
 800595c:	685b      	ldreq	r3, [r3, #4]
 800595e:	1852      	addeq	r2, r2, r1
 8005960:	6022      	streq	r2, [r4, #0]
 8005962:	6063      	str	r3, [r4, #4]
 8005964:	6004      	str	r4, [r0, #0]
 8005966:	e7ed      	b.n	8005944 <_free_r+0x24>
 8005968:	4613      	mov	r3, r2
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	b10a      	cbz	r2, 8005972 <_free_r+0x52>
 800596e:	42a2      	cmp	r2, r4
 8005970:	d9fa      	bls.n	8005968 <_free_r+0x48>
 8005972:	6819      	ldr	r1, [r3, #0]
 8005974:	1858      	adds	r0, r3, r1
 8005976:	42a0      	cmp	r0, r4
 8005978:	d10b      	bne.n	8005992 <_free_r+0x72>
 800597a:	6820      	ldr	r0, [r4, #0]
 800597c:	4401      	add	r1, r0
 800597e:	1858      	adds	r0, r3, r1
 8005980:	4282      	cmp	r2, r0
 8005982:	6019      	str	r1, [r3, #0]
 8005984:	d1de      	bne.n	8005944 <_free_r+0x24>
 8005986:	6810      	ldr	r0, [r2, #0]
 8005988:	6852      	ldr	r2, [r2, #4]
 800598a:	4401      	add	r1, r0
 800598c:	6019      	str	r1, [r3, #0]
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	e7d8      	b.n	8005944 <_free_r+0x24>
 8005992:	d902      	bls.n	800599a <_free_r+0x7a>
 8005994:	230c      	movs	r3, #12
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	e7d4      	b.n	8005944 <_free_r+0x24>
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	1821      	adds	r1, r4, r0
 800599e:	428a      	cmp	r2, r1
 80059a0:	bf01      	itttt	eq
 80059a2:	6811      	ldreq	r1, [r2, #0]
 80059a4:	6852      	ldreq	r2, [r2, #4]
 80059a6:	1809      	addeq	r1, r1, r0
 80059a8:	6021      	streq	r1, [r4, #0]
 80059aa:	6062      	str	r2, [r4, #4]
 80059ac:	605c      	str	r4, [r3, #4]
 80059ae:	e7c9      	b.n	8005944 <_free_r+0x24>
 80059b0:	bd38      	pop	{r3, r4, r5, pc}
 80059b2:	bf00      	nop
 80059b4:	2000237c 	.word	0x2000237c

080059b8 <_malloc_r>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	1ccd      	adds	r5, r1, #3
 80059bc:	f025 0503 	bic.w	r5, r5, #3
 80059c0:	3508      	adds	r5, #8
 80059c2:	2d0c      	cmp	r5, #12
 80059c4:	bf38      	it	cc
 80059c6:	250c      	movcc	r5, #12
 80059c8:	2d00      	cmp	r5, #0
 80059ca:	4606      	mov	r6, r0
 80059cc:	db01      	blt.n	80059d2 <_malloc_r+0x1a>
 80059ce:	42a9      	cmp	r1, r5
 80059d0:	d903      	bls.n	80059da <_malloc_r+0x22>
 80059d2:	230c      	movs	r3, #12
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	2000      	movs	r0, #0
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
 80059da:	f002 fd67 	bl	80084ac <__malloc_lock>
 80059de:	4a21      	ldr	r2, [pc, #132]	; (8005a64 <_malloc_r+0xac>)
 80059e0:	6814      	ldr	r4, [r2, #0]
 80059e2:	4621      	mov	r1, r4
 80059e4:	b991      	cbnz	r1, 8005a0c <_malloc_r+0x54>
 80059e6:	4c20      	ldr	r4, [pc, #128]	; (8005a68 <_malloc_r+0xb0>)
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	b91b      	cbnz	r3, 80059f4 <_malloc_r+0x3c>
 80059ec:	4630      	mov	r0, r6
 80059ee:	f000 fc95 	bl	800631c <_sbrk_r>
 80059f2:	6020      	str	r0, [r4, #0]
 80059f4:	4629      	mov	r1, r5
 80059f6:	4630      	mov	r0, r6
 80059f8:	f000 fc90 	bl	800631c <_sbrk_r>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d124      	bne.n	8005a4a <_malloc_r+0x92>
 8005a00:	230c      	movs	r3, #12
 8005a02:	4630      	mov	r0, r6
 8005a04:	6033      	str	r3, [r6, #0]
 8005a06:	f002 fd52 	bl	80084ae <__malloc_unlock>
 8005a0a:	e7e4      	b.n	80059d6 <_malloc_r+0x1e>
 8005a0c:	680b      	ldr	r3, [r1, #0]
 8005a0e:	1b5b      	subs	r3, r3, r5
 8005a10:	d418      	bmi.n	8005a44 <_malloc_r+0x8c>
 8005a12:	2b0b      	cmp	r3, #11
 8005a14:	d90f      	bls.n	8005a36 <_malloc_r+0x7e>
 8005a16:	600b      	str	r3, [r1, #0]
 8005a18:	18cc      	adds	r4, r1, r3
 8005a1a:	50cd      	str	r5, [r1, r3]
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f002 fd46 	bl	80084ae <__malloc_unlock>
 8005a22:	f104 000b 	add.w	r0, r4, #11
 8005a26:	1d23      	adds	r3, r4, #4
 8005a28:	f020 0007 	bic.w	r0, r0, #7
 8005a2c:	1ac3      	subs	r3, r0, r3
 8005a2e:	d0d3      	beq.n	80059d8 <_malloc_r+0x20>
 8005a30:	425a      	negs	r2, r3
 8005a32:	50e2      	str	r2, [r4, r3]
 8005a34:	e7d0      	b.n	80059d8 <_malloc_r+0x20>
 8005a36:	684b      	ldr	r3, [r1, #4]
 8005a38:	428c      	cmp	r4, r1
 8005a3a:	bf16      	itet	ne
 8005a3c:	6063      	strne	r3, [r4, #4]
 8005a3e:	6013      	streq	r3, [r2, #0]
 8005a40:	460c      	movne	r4, r1
 8005a42:	e7eb      	b.n	8005a1c <_malloc_r+0x64>
 8005a44:	460c      	mov	r4, r1
 8005a46:	6849      	ldr	r1, [r1, #4]
 8005a48:	e7cc      	b.n	80059e4 <_malloc_r+0x2c>
 8005a4a:	1cc4      	adds	r4, r0, #3
 8005a4c:	f024 0403 	bic.w	r4, r4, #3
 8005a50:	42a0      	cmp	r0, r4
 8005a52:	d005      	beq.n	8005a60 <_malloc_r+0xa8>
 8005a54:	1a21      	subs	r1, r4, r0
 8005a56:	4630      	mov	r0, r6
 8005a58:	f000 fc60 	bl	800631c <_sbrk_r>
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d0cf      	beq.n	8005a00 <_malloc_r+0x48>
 8005a60:	6025      	str	r5, [r4, #0]
 8005a62:	e7db      	b.n	8005a1c <_malloc_r+0x64>
 8005a64:	2000237c 	.word	0x2000237c
 8005a68:	20002380 	.word	0x20002380

08005a6c <__cvt>:
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a72:	461e      	mov	r6, r3
 8005a74:	bfbb      	ittet	lt
 8005a76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a7a:	461e      	movlt	r6, r3
 8005a7c:	2300      	movge	r3, #0
 8005a7e:	232d      	movlt	r3, #45	; 0x2d
 8005a80:	b088      	sub	sp, #32
 8005a82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a84:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005a88:	f027 0720 	bic.w	r7, r7, #32
 8005a8c:	2f46      	cmp	r7, #70	; 0x46
 8005a8e:	4614      	mov	r4, r2
 8005a90:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a92:	700b      	strb	r3, [r1, #0]
 8005a94:	d004      	beq.n	8005aa0 <__cvt+0x34>
 8005a96:	2f45      	cmp	r7, #69	; 0x45
 8005a98:	d100      	bne.n	8005a9c <__cvt+0x30>
 8005a9a:	3501      	adds	r5, #1
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e000      	b.n	8005aa2 <__cvt+0x36>
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	aa07      	add	r2, sp, #28
 8005aa4:	9204      	str	r2, [sp, #16]
 8005aa6:	aa06      	add	r2, sp, #24
 8005aa8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005aac:	e9cd 3500 	strd	r3, r5, [sp]
 8005ab0:	4622      	mov	r2, r4
 8005ab2:	4633      	mov	r3, r6
 8005ab4:	f001 fc00 	bl	80072b8 <_dtoa_r>
 8005ab8:	2f47      	cmp	r7, #71	; 0x47
 8005aba:	4680      	mov	r8, r0
 8005abc:	d102      	bne.n	8005ac4 <__cvt+0x58>
 8005abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ac0:	07db      	lsls	r3, r3, #31
 8005ac2:	d526      	bpl.n	8005b12 <__cvt+0xa6>
 8005ac4:	2f46      	cmp	r7, #70	; 0x46
 8005ac6:	eb08 0905 	add.w	r9, r8, r5
 8005aca:	d111      	bne.n	8005af0 <__cvt+0x84>
 8005acc:	f898 3000 	ldrb.w	r3, [r8]
 8005ad0:	2b30      	cmp	r3, #48	; 0x30
 8005ad2:	d10a      	bne.n	8005aea <__cvt+0x7e>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	4620      	mov	r0, r4
 8005ada:	4631      	mov	r1, r6
 8005adc:	f7fa ff7e 	bl	80009dc <__aeabi_dcmpeq>
 8005ae0:	b918      	cbnz	r0, 8005aea <__cvt+0x7e>
 8005ae2:	f1c5 0501 	rsb	r5, r5, #1
 8005ae6:	f8ca 5000 	str.w	r5, [sl]
 8005aea:	f8da 3000 	ldr.w	r3, [sl]
 8005aee:	4499      	add	r9, r3
 8005af0:	2200      	movs	r2, #0
 8005af2:	2300      	movs	r3, #0
 8005af4:	4620      	mov	r0, r4
 8005af6:	4631      	mov	r1, r6
 8005af8:	f7fa ff70 	bl	80009dc <__aeabi_dcmpeq>
 8005afc:	b938      	cbnz	r0, 8005b0e <__cvt+0xa2>
 8005afe:	2230      	movs	r2, #48	; 0x30
 8005b00:	9b07      	ldr	r3, [sp, #28]
 8005b02:	454b      	cmp	r3, r9
 8005b04:	d205      	bcs.n	8005b12 <__cvt+0xa6>
 8005b06:	1c59      	adds	r1, r3, #1
 8005b08:	9107      	str	r1, [sp, #28]
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e7f8      	b.n	8005b00 <__cvt+0x94>
 8005b0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b12:	4640      	mov	r0, r8
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b18:	eba3 0308 	sub.w	r3, r3, r8
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	b008      	add	sp, #32
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005b24 <__exponent>:
 8005b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b26:	2900      	cmp	r1, #0
 8005b28:	bfb4      	ite	lt
 8005b2a:	232d      	movlt	r3, #45	; 0x2d
 8005b2c:	232b      	movge	r3, #43	; 0x2b
 8005b2e:	4604      	mov	r4, r0
 8005b30:	bfb8      	it	lt
 8005b32:	4249      	neglt	r1, r1
 8005b34:	2909      	cmp	r1, #9
 8005b36:	f804 2b02 	strb.w	r2, [r4], #2
 8005b3a:	7043      	strb	r3, [r0, #1]
 8005b3c:	dd21      	ble.n	8005b82 <__exponent+0x5e>
 8005b3e:	f10d 0307 	add.w	r3, sp, #7
 8005b42:	461f      	mov	r7, r3
 8005b44:	260a      	movs	r6, #10
 8005b46:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b4a:	fb06 1115 	mls	r1, r6, r5, r1
 8005b4e:	2d09      	cmp	r5, #9
 8005b50:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005b54:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b58:	f103 32ff 	add.w	r2, r3, #4294967295
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	dc09      	bgt.n	8005b74 <__exponent+0x50>
 8005b60:	3130      	adds	r1, #48	; 0x30
 8005b62:	3b02      	subs	r3, #2
 8005b64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b68:	42bb      	cmp	r3, r7
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	d304      	bcc.n	8005b78 <__exponent+0x54>
 8005b6e:	1a10      	subs	r0, r2, r0
 8005b70:	b003      	add	sp, #12
 8005b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b74:	4613      	mov	r3, r2
 8005b76:	e7e6      	b.n	8005b46 <__exponent+0x22>
 8005b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b7c:	f804 2b01 	strb.w	r2, [r4], #1
 8005b80:	e7f2      	b.n	8005b68 <__exponent+0x44>
 8005b82:	2330      	movs	r3, #48	; 0x30
 8005b84:	4419      	add	r1, r3
 8005b86:	7083      	strb	r3, [r0, #2]
 8005b88:	1d02      	adds	r2, r0, #4
 8005b8a:	70c1      	strb	r1, [r0, #3]
 8005b8c:	e7ef      	b.n	8005b6e <__exponent+0x4a>
	...

08005b90 <_printf_float>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	b091      	sub	sp, #68	; 0x44
 8005b96:	460c      	mov	r4, r1
 8005b98:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005b9a:	4693      	mov	fp, r2
 8005b9c:	461e      	mov	r6, r3
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	f002 fc68 	bl	8008474 <_localeconv_r>
 8005ba4:	6803      	ldr	r3, [r0, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8005baa:	f7fa faeb 	bl	8000184 <strlen>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	900a      	str	r0, [sp, #40]	; 0x28
 8005bb6:	3307      	adds	r3, #7
 8005bb8:	f023 0307 	bic.w	r3, r3, #7
 8005bbc:	f103 0208 	add.w	r2, r3, #8
 8005bc0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005bc4:	f8d4 a000 	ldr.w	sl, [r4]
 8005bc8:	603a      	str	r2, [r7, #0]
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bd2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005bd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bda:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005be0:	4ba6      	ldr	r3, [pc, #664]	; (8005e7c <_printf_float+0x2ec>)
 8005be2:	4638      	mov	r0, r7
 8005be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005be6:	f7fa ff2b 	bl	8000a40 <__aeabi_dcmpun>
 8005bea:	bb68      	cbnz	r0, 8005c48 <_printf_float+0xb8>
 8005bec:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf0:	4ba2      	ldr	r3, [pc, #648]	; (8005e7c <_printf_float+0x2ec>)
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bf6:	f7fa ff05 	bl	8000a04 <__aeabi_dcmple>
 8005bfa:	bb28      	cbnz	r0, 8005c48 <_printf_float+0xb8>
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4638      	mov	r0, r7
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa fef4 	bl	80009f0 <__aeabi_dcmplt>
 8005c08:	b110      	cbz	r0, 8005c10 <_printf_float+0x80>
 8005c0a:	232d      	movs	r3, #45	; 0x2d
 8005c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c10:	4f9b      	ldr	r7, [pc, #620]	; (8005e80 <_printf_float+0x2f0>)
 8005c12:	4b9c      	ldr	r3, [pc, #624]	; (8005e84 <_printf_float+0x2f4>)
 8005c14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c18:	bf98      	it	ls
 8005c1a:	461f      	movls	r7, r3
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	f04f 0900 	mov.w	r9, #0
 8005c22:	6123      	str	r3, [r4, #16]
 8005c24:	f02a 0304 	bic.w	r3, sl, #4
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	9600      	str	r6, [sp, #0]
 8005c2c:	465b      	mov	r3, fp
 8005c2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c30:	4621      	mov	r1, r4
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 f9e2 	bl	8005ffc <_printf_common>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f040 8090 	bne.w	8005d5e <_printf_float+0x1ce>
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c42:	b011      	add	sp, #68	; 0x44
 8005c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c48:	463a      	mov	r2, r7
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	4649      	mov	r1, r9
 8005c50:	f7fa fef6 	bl	8000a40 <__aeabi_dcmpun>
 8005c54:	b110      	cbz	r0, 8005c5c <_printf_float+0xcc>
 8005c56:	4f8c      	ldr	r7, [pc, #560]	; (8005e88 <_printf_float+0x2f8>)
 8005c58:	4b8c      	ldr	r3, [pc, #560]	; (8005e8c <_printf_float+0x2fc>)
 8005c5a:	e7db      	b.n	8005c14 <_printf_float+0x84>
 8005c5c:	6863      	ldr	r3, [r4, #4]
 8005c5e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005c62:	1c59      	adds	r1, r3, #1
 8005c64:	a80d      	add	r0, sp, #52	; 0x34
 8005c66:	a90e      	add	r1, sp, #56	; 0x38
 8005c68:	d140      	bne.n	8005cec <_printf_float+0x15c>
 8005c6a:	2306      	movs	r3, #6
 8005c6c:	6063      	str	r3, [r4, #4]
 8005c6e:	f04f 0c00 	mov.w	ip, #0
 8005c72:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005c76:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	6022      	str	r2, [r4, #0]
 8005c7e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	463a      	mov	r2, r7
 8005c86:	464b      	mov	r3, r9
 8005c88:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f7ff feed 	bl	8005a6c <__cvt>
 8005c92:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005c96:	2b47      	cmp	r3, #71	; 0x47
 8005c98:	4607      	mov	r7, r0
 8005c9a:	d109      	bne.n	8005cb0 <_printf_float+0x120>
 8005c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c9e:	1cd8      	adds	r0, r3, #3
 8005ca0:	db02      	blt.n	8005ca8 <_printf_float+0x118>
 8005ca2:	6862      	ldr	r2, [r4, #4]
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	dd47      	ble.n	8005d38 <_printf_float+0x1a8>
 8005ca8:	f1a8 0802 	sub.w	r8, r8, #2
 8005cac:	fa5f f888 	uxtb.w	r8, r8
 8005cb0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005cb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005cb6:	d824      	bhi.n	8005d02 <_printf_float+0x172>
 8005cb8:	3901      	subs	r1, #1
 8005cba:	4642      	mov	r2, r8
 8005cbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cc0:	910d      	str	r1, [sp, #52]	; 0x34
 8005cc2:	f7ff ff2f 	bl	8005b24 <__exponent>
 8005cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cc8:	4681      	mov	r9, r0
 8005cca:	1813      	adds	r3, r2, r0
 8005ccc:	2a01      	cmp	r2, #1
 8005cce:	6123      	str	r3, [r4, #16]
 8005cd0:	dc02      	bgt.n	8005cd8 <_printf_float+0x148>
 8005cd2:	6822      	ldr	r2, [r4, #0]
 8005cd4:	07d1      	lsls	r1, r2, #31
 8005cd6:	d501      	bpl.n	8005cdc <_printf_float+0x14c>
 8005cd8:	3301      	adds	r3, #1
 8005cda:	6123      	str	r3, [r4, #16]
 8005cdc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0a2      	beq.n	8005c2a <_printf_float+0x9a>
 8005ce4:	232d      	movs	r3, #45	; 0x2d
 8005ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cea:	e79e      	b.n	8005c2a <_printf_float+0x9a>
 8005cec:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005cf0:	f000 816e 	beq.w	8005fd0 <_printf_float+0x440>
 8005cf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cf8:	d1b9      	bne.n	8005c6e <_printf_float+0xde>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1b7      	bne.n	8005c6e <_printf_float+0xde>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e7b4      	b.n	8005c6c <_printf_float+0xdc>
 8005d02:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005d06:	d119      	bne.n	8005d3c <_printf_float+0x1ac>
 8005d08:	2900      	cmp	r1, #0
 8005d0a:	6863      	ldr	r3, [r4, #4]
 8005d0c:	dd0c      	ble.n	8005d28 <_printf_float+0x198>
 8005d0e:	6121      	str	r1, [r4, #16]
 8005d10:	b913      	cbnz	r3, 8005d18 <_printf_float+0x188>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	07d2      	lsls	r2, r2, #31
 8005d16:	d502      	bpl.n	8005d1e <_printf_float+0x18e>
 8005d18:	3301      	adds	r3, #1
 8005d1a:	440b      	add	r3, r1
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d20:	f04f 0900 	mov.w	r9, #0
 8005d24:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d26:	e7d9      	b.n	8005cdc <_printf_float+0x14c>
 8005d28:	b913      	cbnz	r3, 8005d30 <_printf_float+0x1a0>
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	07d0      	lsls	r0, r2, #31
 8005d2e:	d501      	bpl.n	8005d34 <_printf_float+0x1a4>
 8005d30:	3302      	adds	r3, #2
 8005d32:	e7f3      	b.n	8005d1c <_printf_float+0x18c>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e7f1      	b.n	8005d1c <_printf_float+0x18c>
 8005d38:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005d3c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005d40:	4293      	cmp	r3, r2
 8005d42:	db05      	blt.n	8005d50 <_printf_float+0x1c0>
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	6123      	str	r3, [r4, #16]
 8005d48:	07d1      	lsls	r1, r2, #31
 8005d4a:	d5e8      	bpl.n	8005d1e <_printf_float+0x18e>
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	e7e5      	b.n	8005d1c <_printf_float+0x18c>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	bfcc      	ite	gt
 8005d54:	2301      	movgt	r3, #1
 8005d56:	f1c3 0302 	rsble	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	e7de      	b.n	8005d1c <_printf_float+0x18c>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	055a      	lsls	r2, r3, #21
 8005d62:	d407      	bmi.n	8005d74 <_printf_float+0x1e4>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	463a      	mov	r2, r7
 8005d68:	4659      	mov	r1, fp
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b0      	blx	r6
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d129      	bne.n	8005dc6 <_printf_float+0x236>
 8005d72:	e764      	b.n	8005c3e <_printf_float+0xae>
 8005d74:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005d78:	f240 80d7 	bls.w	8005f2a <_printf_float+0x39a>
 8005d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	f7fa fe2a 	bl	80009dc <__aeabi_dcmpeq>
 8005d88:	b388      	cbz	r0, 8005dee <_printf_float+0x25e>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	4a40      	ldr	r2, [pc, #256]	; (8005e90 <_printf_float+0x300>)
 8005d8e:	4659      	mov	r1, fp
 8005d90:	4628      	mov	r0, r5
 8005d92:	47b0      	blx	r6
 8005d94:	3001      	adds	r0, #1
 8005d96:	f43f af52 	beq.w	8005c3e <_printf_float+0xae>
 8005d9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	db02      	blt.n	8005da8 <_printf_float+0x218>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	07d8      	lsls	r0, r3, #31
 8005da6:	d50e      	bpl.n	8005dc6 <_printf_float+0x236>
 8005da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dac:	4659      	mov	r1, fp
 8005dae:	4628      	mov	r0, r5
 8005db0:	47b0      	blx	r6
 8005db2:	3001      	adds	r0, #1
 8005db4:	f43f af43 	beq.w	8005c3e <_printf_float+0xae>
 8005db8:	2700      	movs	r7, #0
 8005dba:	f104 081a 	add.w	r8, r4, #26
 8005dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	42bb      	cmp	r3, r7
 8005dc4:	dc09      	bgt.n	8005dda <_printf_float+0x24a>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	079f      	lsls	r7, r3, #30
 8005dca:	f100 80fd 	bmi.w	8005fc8 <_printf_float+0x438>
 8005dce:	68e0      	ldr	r0, [r4, #12]
 8005dd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dd2:	4298      	cmp	r0, r3
 8005dd4:	bfb8      	it	lt
 8005dd6:	4618      	movlt	r0, r3
 8005dd8:	e733      	b.n	8005c42 <_printf_float+0xb2>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4642      	mov	r2, r8
 8005dde:	4659      	mov	r1, fp
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b0      	blx	r6
 8005de4:	3001      	adds	r0, #1
 8005de6:	f43f af2a 	beq.w	8005c3e <_printf_float+0xae>
 8005dea:	3701      	adds	r7, #1
 8005dec:	e7e7      	b.n	8005dbe <_printf_float+0x22e>
 8005dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dc2b      	bgt.n	8005e4c <_printf_float+0x2bc>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4a26      	ldr	r2, [pc, #152]	; (8005e90 <_printf_float+0x300>)
 8005df8:	4659      	mov	r1, fp
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b0      	blx	r6
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f43f af1d 	beq.w	8005c3e <_printf_float+0xae>
 8005e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e06:	b923      	cbnz	r3, 8005e12 <_printf_float+0x282>
 8005e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e0a:	b913      	cbnz	r3, 8005e12 <_printf_float+0x282>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	07d9      	lsls	r1, r3, #31
 8005e10:	d5d9      	bpl.n	8005dc6 <_printf_float+0x236>
 8005e12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e16:	4659      	mov	r1, fp
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b0      	blx	r6
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f43f af0e 	beq.w	8005c3e <_printf_float+0xae>
 8005e22:	f04f 0800 	mov.w	r8, #0
 8005e26:	f104 091a 	add.w	r9, r4, #26
 8005e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e2c:	425b      	negs	r3, r3
 8005e2e:	4543      	cmp	r3, r8
 8005e30:	dc01      	bgt.n	8005e36 <_printf_float+0x2a6>
 8005e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e34:	e797      	b.n	8005d66 <_printf_float+0x1d6>
 8005e36:	2301      	movs	r3, #1
 8005e38:	464a      	mov	r2, r9
 8005e3a:	4659      	mov	r1, fp
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b0      	blx	r6
 8005e40:	3001      	adds	r0, #1
 8005e42:	f43f aefc 	beq.w	8005c3e <_printf_float+0xae>
 8005e46:	f108 0801 	add.w	r8, r8, #1
 8005e4a:	e7ee      	b.n	8005e2a <_printf_float+0x29a>
 8005e4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e50:	429a      	cmp	r2, r3
 8005e52:	bfa8      	it	ge
 8005e54:	461a      	movge	r2, r3
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	4690      	mov	r8, r2
 8005e5a:	dd07      	ble.n	8005e6c <_printf_float+0x2dc>
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	4659      	mov	r1, fp
 8005e60:	463a      	mov	r2, r7
 8005e62:	4628      	mov	r0, r5
 8005e64:	47b0      	blx	r6
 8005e66:	3001      	adds	r0, #1
 8005e68:	f43f aee9 	beq.w	8005c3e <_printf_float+0xae>
 8005e6c:	f104 031a 	add.w	r3, r4, #26
 8005e70:	f04f 0a00 	mov.w	sl, #0
 8005e74:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e7a:	e015      	b.n	8005ea8 <_printf_float+0x318>
 8005e7c:	7fefffff 	.word	0x7fefffff
 8005e80:	080091d7 	.word	0x080091d7
 8005e84:	080091d3 	.word	0x080091d3
 8005e88:	080091df 	.word	0x080091df
 8005e8c:	080091db 	.word	0x080091db
 8005e90:	080091e3 	.word	0x080091e3
 8005e94:	2301      	movs	r3, #1
 8005e96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e98:	4659      	mov	r1, fp
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	47b0      	blx	r6
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f43f aecd 	beq.w	8005c3e <_printf_float+0xae>
 8005ea4:	f10a 0a01 	add.w	sl, sl, #1
 8005ea8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005eac:	eba9 0308 	sub.w	r3, r9, r8
 8005eb0:	4553      	cmp	r3, sl
 8005eb2:	dcef      	bgt.n	8005e94 <_printf_float+0x304>
 8005eb4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	444f      	add	r7, r9
 8005ebc:	db14      	blt.n	8005ee8 <_printf_float+0x358>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	07da      	lsls	r2, r3, #31
 8005ec2:	d411      	bmi.n	8005ee8 <_printf_float+0x358>
 8005ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ec8:	eba3 0209 	sub.w	r2, r3, r9
 8005ecc:	eba3 0901 	sub.w	r9, r3, r1
 8005ed0:	4591      	cmp	r9, r2
 8005ed2:	bfa8      	it	ge
 8005ed4:	4691      	movge	r9, r2
 8005ed6:	f1b9 0f00 	cmp.w	r9, #0
 8005eda:	dc0d      	bgt.n	8005ef8 <_printf_float+0x368>
 8005edc:	2700      	movs	r7, #0
 8005ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ee2:	f104 081a 	add.w	r8, r4, #26
 8005ee6:	e018      	b.n	8005f1a <_printf_float+0x38a>
 8005ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eec:	4659      	mov	r1, fp
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b0      	blx	r6
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d1e6      	bne.n	8005ec4 <_printf_float+0x334>
 8005ef6:	e6a2      	b.n	8005c3e <_printf_float+0xae>
 8005ef8:	464b      	mov	r3, r9
 8005efa:	463a      	mov	r2, r7
 8005efc:	4659      	mov	r1, fp
 8005efe:	4628      	mov	r0, r5
 8005f00:	47b0      	blx	r6
 8005f02:	3001      	adds	r0, #1
 8005f04:	d1ea      	bne.n	8005edc <_printf_float+0x34c>
 8005f06:	e69a      	b.n	8005c3e <_printf_float+0xae>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	4642      	mov	r2, r8
 8005f0c:	4659      	mov	r1, fp
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b0      	blx	r6
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f ae93 	beq.w	8005c3e <_printf_float+0xae>
 8005f18:	3701      	adds	r7, #1
 8005f1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f1e:	1a9b      	subs	r3, r3, r2
 8005f20:	eba3 0309 	sub.w	r3, r3, r9
 8005f24:	42bb      	cmp	r3, r7
 8005f26:	dcef      	bgt.n	8005f08 <_printf_float+0x378>
 8005f28:	e74d      	b.n	8005dc6 <_printf_float+0x236>
 8005f2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f2c:	2a01      	cmp	r2, #1
 8005f2e:	dc01      	bgt.n	8005f34 <_printf_float+0x3a4>
 8005f30:	07db      	lsls	r3, r3, #31
 8005f32:	d538      	bpl.n	8005fa6 <_printf_float+0x416>
 8005f34:	2301      	movs	r3, #1
 8005f36:	463a      	mov	r2, r7
 8005f38:	4659      	mov	r1, fp
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	47b0      	blx	r6
 8005f3e:	3001      	adds	r0, #1
 8005f40:	f43f ae7d 	beq.w	8005c3e <_printf_float+0xae>
 8005f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f48:	4659      	mov	r1, fp
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b0      	blx	r6
 8005f4e:	3001      	adds	r0, #1
 8005f50:	f107 0701 	add.w	r7, r7, #1
 8005f54:	f43f ae73 	beq.w	8005c3e <_printf_float+0xae>
 8005f58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f103 38ff 	add.w	r8, r3, #4294967295
 8005f64:	2300      	movs	r3, #0
 8005f66:	f7fa fd39 	bl	80009dc <__aeabi_dcmpeq>
 8005f6a:	b9c0      	cbnz	r0, 8005f9e <_printf_float+0x40e>
 8005f6c:	4643      	mov	r3, r8
 8005f6e:	463a      	mov	r2, r7
 8005f70:	4659      	mov	r1, fp
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b0      	blx	r6
 8005f76:	3001      	adds	r0, #1
 8005f78:	d10d      	bne.n	8005f96 <_printf_float+0x406>
 8005f7a:	e660      	b.n	8005c3e <_printf_float+0xae>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4642      	mov	r2, r8
 8005f80:	4659      	mov	r1, fp
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b0      	blx	r6
 8005f86:	3001      	adds	r0, #1
 8005f88:	f43f ae59 	beq.w	8005c3e <_printf_float+0xae>
 8005f8c:	3701      	adds	r7, #1
 8005f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f90:	3b01      	subs	r3, #1
 8005f92:	42bb      	cmp	r3, r7
 8005f94:	dcf2      	bgt.n	8005f7c <_printf_float+0x3ec>
 8005f96:	464b      	mov	r3, r9
 8005f98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f9c:	e6e4      	b.n	8005d68 <_printf_float+0x1d8>
 8005f9e:	2700      	movs	r7, #0
 8005fa0:	f104 081a 	add.w	r8, r4, #26
 8005fa4:	e7f3      	b.n	8005f8e <_printf_float+0x3fe>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e7e1      	b.n	8005f6e <_printf_float+0x3de>
 8005faa:	2301      	movs	r3, #1
 8005fac:	4642      	mov	r2, r8
 8005fae:	4659      	mov	r1, fp
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	47b0      	blx	r6
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	f43f ae42 	beq.w	8005c3e <_printf_float+0xae>
 8005fba:	3701      	adds	r7, #1
 8005fbc:	68e3      	ldr	r3, [r4, #12]
 8005fbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	42bb      	cmp	r3, r7
 8005fc4:	dcf1      	bgt.n	8005faa <_printf_float+0x41a>
 8005fc6:	e702      	b.n	8005dce <_printf_float+0x23e>
 8005fc8:	2700      	movs	r7, #0
 8005fca:	f104 0819 	add.w	r8, r4, #25
 8005fce:	e7f5      	b.n	8005fbc <_printf_float+0x42c>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f43f ae94 	beq.w	8005cfe <_printf_float+0x16e>
 8005fd6:	f04f 0c00 	mov.w	ip, #0
 8005fda:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005fde:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005fe2:	6022      	str	r2, [r4, #0]
 8005fe4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005fe8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	463a      	mov	r2, r7
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f7ff fd3a 	bl	8005a6c <__cvt>
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	e64f      	b.n	8005c9c <_printf_float+0x10c>

08005ffc <_printf_common>:
 8005ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006000:	4691      	mov	r9, r2
 8006002:	461f      	mov	r7, r3
 8006004:	688a      	ldr	r2, [r1, #8]
 8006006:	690b      	ldr	r3, [r1, #16]
 8006008:	4606      	mov	r6, r0
 800600a:	4293      	cmp	r3, r2
 800600c:	bfb8      	it	lt
 800600e:	4613      	movlt	r3, r2
 8006010:	f8c9 3000 	str.w	r3, [r9]
 8006014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006018:	460c      	mov	r4, r1
 800601a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800601e:	b112      	cbz	r2, 8006026 <_printf_common+0x2a>
 8006020:	3301      	adds	r3, #1
 8006022:	f8c9 3000 	str.w	r3, [r9]
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	0699      	lsls	r1, r3, #26
 800602a:	bf42      	ittt	mi
 800602c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006030:	3302      	addmi	r3, #2
 8006032:	f8c9 3000 	strmi.w	r3, [r9]
 8006036:	6825      	ldr	r5, [r4, #0]
 8006038:	f015 0506 	ands.w	r5, r5, #6
 800603c:	d107      	bne.n	800604e <_printf_common+0x52>
 800603e:	f104 0a19 	add.w	sl, r4, #25
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	f8d9 2000 	ldr.w	r2, [r9]
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	42ab      	cmp	r3, r5
 800604c:	dc29      	bgt.n	80060a2 <_printf_common+0xa6>
 800604e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	3300      	adds	r3, #0
 8006056:	bf18      	it	ne
 8006058:	2301      	movne	r3, #1
 800605a:	0692      	lsls	r2, r2, #26
 800605c:	d42e      	bmi.n	80060bc <_printf_common+0xc0>
 800605e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006062:	4639      	mov	r1, r7
 8006064:	4630      	mov	r0, r6
 8006066:	47c0      	blx	r8
 8006068:	3001      	adds	r0, #1
 800606a:	d021      	beq.n	80060b0 <_printf_common+0xb4>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	68e5      	ldr	r5, [r4, #12]
 8006070:	f003 0306 	and.w	r3, r3, #6
 8006074:	2b04      	cmp	r3, #4
 8006076:	bf18      	it	ne
 8006078:	2500      	movne	r5, #0
 800607a:	f8d9 2000 	ldr.w	r2, [r9]
 800607e:	f04f 0900 	mov.w	r9, #0
 8006082:	bf08      	it	eq
 8006084:	1aad      	subeq	r5, r5, r2
 8006086:	68a3      	ldr	r3, [r4, #8]
 8006088:	6922      	ldr	r2, [r4, #16]
 800608a:	bf08      	it	eq
 800608c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006090:	4293      	cmp	r3, r2
 8006092:	bfc4      	itt	gt
 8006094:	1a9b      	subgt	r3, r3, r2
 8006096:	18ed      	addgt	r5, r5, r3
 8006098:	341a      	adds	r4, #26
 800609a:	454d      	cmp	r5, r9
 800609c:	d11a      	bne.n	80060d4 <_printf_common+0xd8>
 800609e:	2000      	movs	r0, #0
 80060a0:	e008      	b.n	80060b4 <_printf_common+0xb8>
 80060a2:	2301      	movs	r3, #1
 80060a4:	4652      	mov	r2, sl
 80060a6:	4639      	mov	r1, r7
 80060a8:	4630      	mov	r0, r6
 80060aa:	47c0      	blx	r8
 80060ac:	3001      	adds	r0, #1
 80060ae:	d103      	bne.n	80060b8 <_printf_common+0xbc>
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b8:	3501      	adds	r5, #1
 80060ba:	e7c2      	b.n	8006042 <_printf_common+0x46>
 80060bc:	2030      	movs	r0, #48	; 0x30
 80060be:	18e1      	adds	r1, r4, r3
 80060c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ca:	4422      	add	r2, r4
 80060cc:	3302      	adds	r3, #2
 80060ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060d2:	e7c4      	b.n	800605e <_printf_common+0x62>
 80060d4:	2301      	movs	r3, #1
 80060d6:	4622      	mov	r2, r4
 80060d8:	4639      	mov	r1, r7
 80060da:	4630      	mov	r0, r6
 80060dc:	47c0      	blx	r8
 80060de:	3001      	adds	r0, #1
 80060e0:	d0e6      	beq.n	80060b0 <_printf_common+0xb4>
 80060e2:	f109 0901 	add.w	r9, r9, #1
 80060e6:	e7d8      	b.n	800609a <_printf_common+0x9e>

080060e8 <_printf_i>:
 80060e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80060f0:	460c      	mov	r4, r1
 80060f2:	7e09      	ldrb	r1, [r1, #24]
 80060f4:	b085      	sub	sp, #20
 80060f6:	296e      	cmp	r1, #110	; 0x6e
 80060f8:	4617      	mov	r7, r2
 80060fa:	4606      	mov	r6, r0
 80060fc:	4698      	mov	r8, r3
 80060fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006100:	f000 80b3 	beq.w	800626a <_printf_i+0x182>
 8006104:	d822      	bhi.n	800614c <_printf_i+0x64>
 8006106:	2963      	cmp	r1, #99	; 0x63
 8006108:	d036      	beq.n	8006178 <_printf_i+0x90>
 800610a:	d80a      	bhi.n	8006122 <_printf_i+0x3a>
 800610c:	2900      	cmp	r1, #0
 800610e:	f000 80b9 	beq.w	8006284 <_printf_i+0x19c>
 8006112:	2958      	cmp	r1, #88	; 0x58
 8006114:	f000 8083 	beq.w	800621e <_printf_i+0x136>
 8006118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800611c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006120:	e032      	b.n	8006188 <_printf_i+0xa0>
 8006122:	2964      	cmp	r1, #100	; 0x64
 8006124:	d001      	beq.n	800612a <_printf_i+0x42>
 8006126:	2969      	cmp	r1, #105	; 0x69
 8006128:	d1f6      	bne.n	8006118 <_printf_i+0x30>
 800612a:	6820      	ldr	r0, [r4, #0]
 800612c:	6813      	ldr	r3, [r2, #0]
 800612e:	0605      	lsls	r5, r0, #24
 8006130:	f103 0104 	add.w	r1, r3, #4
 8006134:	d52a      	bpl.n	800618c <_printf_i+0xa4>
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6011      	str	r1, [r2, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	da03      	bge.n	8006146 <_printf_i+0x5e>
 800613e:	222d      	movs	r2, #45	; 0x2d
 8006140:	425b      	negs	r3, r3
 8006142:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006146:	486f      	ldr	r0, [pc, #444]	; (8006304 <_printf_i+0x21c>)
 8006148:	220a      	movs	r2, #10
 800614a:	e039      	b.n	80061c0 <_printf_i+0xd8>
 800614c:	2973      	cmp	r1, #115	; 0x73
 800614e:	f000 809d 	beq.w	800628c <_printf_i+0x1a4>
 8006152:	d808      	bhi.n	8006166 <_printf_i+0x7e>
 8006154:	296f      	cmp	r1, #111	; 0x6f
 8006156:	d020      	beq.n	800619a <_printf_i+0xb2>
 8006158:	2970      	cmp	r1, #112	; 0x70
 800615a:	d1dd      	bne.n	8006118 <_printf_i+0x30>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	f043 0320 	orr.w	r3, r3, #32
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	e003      	b.n	800616e <_printf_i+0x86>
 8006166:	2975      	cmp	r1, #117	; 0x75
 8006168:	d017      	beq.n	800619a <_printf_i+0xb2>
 800616a:	2978      	cmp	r1, #120	; 0x78
 800616c:	d1d4      	bne.n	8006118 <_printf_i+0x30>
 800616e:	2378      	movs	r3, #120	; 0x78
 8006170:	4865      	ldr	r0, [pc, #404]	; (8006308 <_printf_i+0x220>)
 8006172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006176:	e055      	b.n	8006224 <_printf_i+0x13c>
 8006178:	6813      	ldr	r3, [r2, #0]
 800617a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800617e:	1d19      	adds	r1, r3, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6011      	str	r1, [r2, #0]
 8006184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006188:	2301      	movs	r3, #1
 800618a:	e08c      	b.n	80062a6 <_printf_i+0x1be>
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006192:	6011      	str	r1, [r2, #0]
 8006194:	bf18      	it	ne
 8006196:	b21b      	sxthne	r3, r3
 8006198:	e7cf      	b.n	800613a <_printf_i+0x52>
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	6825      	ldr	r5, [r4, #0]
 800619e:	1d18      	adds	r0, r3, #4
 80061a0:	6010      	str	r0, [r2, #0]
 80061a2:	0628      	lsls	r0, r5, #24
 80061a4:	d501      	bpl.n	80061aa <_printf_i+0xc2>
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	e002      	b.n	80061b0 <_printf_i+0xc8>
 80061aa:	0668      	lsls	r0, r5, #25
 80061ac:	d5fb      	bpl.n	80061a6 <_printf_i+0xbe>
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	296f      	cmp	r1, #111	; 0x6f
 80061b2:	bf14      	ite	ne
 80061b4:	220a      	movne	r2, #10
 80061b6:	2208      	moveq	r2, #8
 80061b8:	4852      	ldr	r0, [pc, #328]	; (8006304 <_printf_i+0x21c>)
 80061ba:	2100      	movs	r1, #0
 80061bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061c0:	6865      	ldr	r5, [r4, #4]
 80061c2:	2d00      	cmp	r5, #0
 80061c4:	60a5      	str	r5, [r4, #8]
 80061c6:	f2c0 8095 	blt.w	80062f4 <_printf_i+0x20c>
 80061ca:	6821      	ldr	r1, [r4, #0]
 80061cc:	f021 0104 	bic.w	r1, r1, #4
 80061d0:	6021      	str	r1, [r4, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d13d      	bne.n	8006252 <_printf_i+0x16a>
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	f040 808e 	bne.w	80062f8 <_printf_i+0x210>
 80061dc:	4665      	mov	r5, ip
 80061de:	2a08      	cmp	r2, #8
 80061e0:	d10b      	bne.n	80061fa <_printf_i+0x112>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	07db      	lsls	r3, r3, #31
 80061e6:	d508      	bpl.n	80061fa <_printf_i+0x112>
 80061e8:	6923      	ldr	r3, [r4, #16]
 80061ea:	6862      	ldr	r2, [r4, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	bfde      	ittt	le
 80061f0:	2330      	movle	r3, #48	; 0x30
 80061f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061fa:	ebac 0305 	sub.w	r3, ip, r5
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	f8cd 8000 	str.w	r8, [sp]
 8006204:	463b      	mov	r3, r7
 8006206:	aa03      	add	r2, sp, #12
 8006208:	4621      	mov	r1, r4
 800620a:	4630      	mov	r0, r6
 800620c:	f7ff fef6 	bl	8005ffc <_printf_common>
 8006210:	3001      	adds	r0, #1
 8006212:	d14d      	bne.n	80062b0 <_printf_i+0x1c8>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	b005      	add	sp, #20
 800621a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800621e:	4839      	ldr	r0, [pc, #228]	; (8006304 <_printf_i+0x21c>)
 8006220:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006224:	6813      	ldr	r3, [r2, #0]
 8006226:	6821      	ldr	r1, [r4, #0]
 8006228:	1d1d      	adds	r5, r3, #4
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6015      	str	r5, [r2, #0]
 800622e:	060a      	lsls	r2, r1, #24
 8006230:	d50b      	bpl.n	800624a <_printf_i+0x162>
 8006232:	07ca      	lsls	r2, r1, #31
 8006234:	bf44      	itt	mi
 8006236:	f041 0120 	orrmi.w	r1, r1, #32
 800623a:	6021      	strmi	r1, [r4, #0]
 800623c:	b91b      	cbnz	r3, 8006246 <_printf_i+0x15e>
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	f022 0220 	bic.w	r2, r2, #32
 8006244:	6022      	str	r2, [r4, #0]
 8006246:	2210      	movs	r2, #16
 8006248:	e7b7      	b.n	80061ba <_printf_i+0xd2>
 800624a:	064d      	lsls	r5, r1, #25
 800624c:	bf48      	it	mi
 800624e:	b29b      	uxthmi	r3, r3
 8006250:	e7ef      	b.n	8006232 <_printf_i+0x14a>
 8006252:	4665      	mov	r5, ip
 8006254:	fbb3 f1f2 	udiv	r1, r3, r2
 8006258:	fb02 3311 	mls	r3, r2, r1, r3
 800625c:	5cc3      	ldrb	r3, [r0, r3]
 800625e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006262:	460b      	mov	r3, r1
 8006264:	2900      	cmp	r1, #0
 8006266:	d1f5      	bne.n	8006254 <_printf_i+0x16c>
 8006268:	e7b9      	b.n	80061de <_printf_i+0xf6>
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	6825      	ldr	r5, [r4, #0]
 800626e:	1d18      	adds	r0, r3, #4
 8006270:	6961      	ldr	r1, [r4, #20]
 8006272:	6010      	str	r0, [r2, #0]
 8006274:	0628      	lsls	r0, r5, #24
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	d501      	bpl.n	800627e <_printf_i+0x196>
 800627a:	6019      	str	r1, [r3, #0]
 800627c:	e002      	b.n	8006284 <_printf_i+0x19c>
 800627e:	066a      	lsls	r2, r5, #25
 8006280:	d5fb      	bpl.n	800627a <_printf_i+0x192>
 8006282:	8019      	strh	r1, [r3, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	4665      	mov	r5, ip
 8006288:	6123      	str	r3, [r4, #16]
 800628a:	e7b9      	b.n	8006200 <_printf_i+0x118>
 800628c:	6813      	ldr	r3, [r2, #0]
 800628e:	1d19      	adds	r1, r3, #4
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	681d      	ldr	r5, [r3, #0]
 8006294:	6862      	ldr	r2, [r4, #4]
 8006296:	2100      	movs	r1, #0
 8006298:	4628      	mov	r0, r5
 800629a:	f002 f8f9 	bl	8008490 <memchr>
 800629e:	b108      	cbz	r0, 80062a4 <_printf_i+0x1bc>
 80062a0:	1b40      	subs	r0, r0, r5
 80062a2:	6060      	str	r0, [r4, #4]
 80062a4:	6863      	ldr	r3, [r4, #4]
 80062a6:	6123      	str	r3, [r4, #16]
 80062a8:	2300      	movs	r3, #0
 80062aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ae:	e7a7      	b.n	8006200 <_printf_i+0x118>
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	462a      	mov	r2, r5
 80062b4:	4639      	mov	r1, r7
 80062b6:	4630      	mov	r0, r6
 80062b8:	47c0      	blx	r8
 80062ba:	3001      	adds	r0, #1
 80062bc:	d0aa      	beq.n	8006214 <_printf_i+0x12c>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	079b      	lsls	r3, r3, #30
 80062c2:	d413      	bmi.n	80062ec <_printf_i+0x204>
 80062c4:	68e0      	ldr	r0, [r4, #12]
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	4298      	cmp	r0, r3
 80062ca:	bfb8      	it	lt
 80062cc:	4618      	movlt	r0, r3
 80062ce:	e7a3      	b.n	8006218 <_printf_i+0x130>
 80062d0:	2301      	movs	r3, #1
 80062d2:	464a      	mov	r2, r9
 80062d4:	4639      	mov	r1, r7
 80062d6:	4630      	mov	r0, r6
 80062d8:	47c0      	blx	r8
 80062da:	3001      	adds	r0, #1
 80062dc:	d09a      	beq.n	8006214 <_printf_i+0x12c>
 80062de:	3501      	adds	r5, #1
 80062e0:	68e3      	ldr	r3, [r4, #12]
 80062e2:	9a03      	ldr	r2, [sp, #12]
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	42ab      	cmp	r3, r5
 80062e8:	dcf2      	bgt.n	80062d0 <_printf_i+0x1e8>
 80062ea:	e7eb      	b.n	80062c4 <_printf_i+0x1dc>
 80062ec:	2500      	movs	r5, #0
 80062ee:	f104 0919 	add.w	r9, r4, #25
 80062f2:	e7f5      	b.n	80062e0 <_printf_i+0x1f8>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1ac      	bne.n	8006252 <_printf_i+0x16a>
 80062f8:	7803      	ldrb	r3, [r0, #0]
 80062fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006302:	e76c      	b.n	80061de <_printf_i+0xf6>
 8006304:	080091e5 	.word	0x080091e5
 8006308:	080091f6 	.word	0x080091f6

0800630c <realloc>:
 800630c:	4b02      	ldr	r3, [pc, #8]	; (8006318 <realloc+0xc>)
 800630e:	460a      	mov	r2, r1
 8006310:	4601      	mov	r1, r0
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	f002 bcd2 	b.w	8008cbc <_realloc_r>
 8006318:	20000034 	.word	0x20000034

0800631c <_sbrk_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	2300      	movs	r3, #0
 8006320:	4c05      	ldr	r4, [pc, #20]	; (8006338 <_sbrk_r+0x1c>)
 8006322:	4605      	mov	r5, r0
 8006324:	4608      	mov	r0, r1
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	f7ff fa24 	bl	8005774 <_sbrk>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d102      	bne.n	8006336 <_sbrk_r+0x1a>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	b103      	cbz	r3, 8006336 <_sbrk_r+0x1a>
 8006334:	602b      	str	r3, [r5, #0]
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	20002464 	.word	0x20002464

0800633c <sniprintf>:
 800633c:	b40c      	push	{r2, r3}
 800633e:	b530      	push	{r4, r5, lr}
 8006340:	4b17      	ldr	r3, [pc, #92]	; (80063a0 <sniprintf+0x64>)
 8006342:	1e0c      	subs	r4, r1, #0
 8006344:	b09d      	sub	sp, #116	; 0x74
 8006346:	681d      	ldr	r5, [r3, #0]
 8006348:	da08      	bge.n	800635c <sniprintf+0x20>
 800634a:	238b      	movs	r3, #139	; 0x8b
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	602b      	str	r3, [r5, #0]
 8006352:	b01d      	add	sp, #116	; 0x74
 8006354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006358:	b002      	add	sp, #8
 800635a:	4770      	bx	lr
 800635c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006360:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006364:	bf0c      	ite	eq
 8006366:	4623      	moveq	r3, r4
 8006368:	f104 33ff 	addne.w	r3, r4, #4294967295
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	9307      	str	r3, [sp, #28]
 8006370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006374:	9002      	str	r0, [sp, #8]
 8006376:	9006      	str	r0, [sp, #24]
 8006378:	f8ad 3016 	strh.w	r3, [sp, #22]
 800637c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800637e:	ab21      	add	r3, sp, #132	; 0x84
 8006380:	a902      	add	r1, sp, #8
 8006382:	4628      	mov	r0, r5
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	f002 fd19 	bl	8008dbc <_svfiprintf_r>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	bfbc      	itt	lt
 800638e:	238b      	movlt	r3, #139	; 0x8b
 8006390:	602b      	strlt	r3, [r5, #0]
 8006392:	2c00      	cmp	r4, #0
 8006394:	d0dd      	beq.n	8006352 <sniprintf+0x16>
 8006396:	2200      	movs	r2, #0
 8006398:	9b02      	ldr	r3, [sp, #8]
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	e7d9      	b.n	8006352 <sniprintf+0x16>
 800639e:	bf00      	nop
 80063a0:	20000034 	.word	0x20000034

080063a4 <strncmp>:
 80063a4:	b510      	push	{r4, lr}
 80063a6:	b16a      	cbz	r2, 80063c4 <strncmp+0x20>
 80063a8:	3901      	subs	r1, #1
 80063aa:	1884      	adds	r4, r0, r2
 80063ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 80063b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d103      	bne.n	80063c0 <strncmp+0x1c>
 80063b8:	42a0      	cmp	r0, r4
 80063ba:	d001      	beq.n	80063c0 <strncmp+0x1c>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1f5      	bne.n	80063ac <strncmp+0x8>
 80063c0:	1a98      	subs	r0, r3, r2
 80063c2:	bd10      	pop	{r4, pc}
 80063c4:	4610      	mov	r0, r2
 80063c6:	e7fc      	b.n	80063c2 <strncmp+0x1e>

080063c8 <strncpy>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4604      	mov	r4, r0
 80063cc:	3901      	subs	r1, #1
 80063ce:	b902      	cbnz	r2, 80063d2 <strncpy+0xa>
 80063d0:	bd70      	pop	{r4, r5, r6, pc}
 80063d2:	4623      	mov	r3, r4
 80063d4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80063d8:	1e56      	subs	r6, r2, #1
 80063da:	f803 5b01 	strb.w	r5, [r3], #1
 80063de:	b92d      	cbnz	r5, 80063ec <strncpy+0x24>
 80063e0:	4414      	add	r4, r2
 80063e2:	42a3      	cmp	r3, r4
 80063e4:	d0f4      	beq.n	80063d0 <strncpy+0x8>
 80063e6:	f803 5b01 	strb.w	r5, [r3], #1
 80063ea:	e7fa      	b.n	80063e2 <strncpy+0x1a>
 80063ec:	461c      	mov	r4, r3
 80063ee:	4632      	mov	r2, r6
 80063f0:	e7ed      	b.n	80063ce <strncpy+0x6>

080063f2 <sulp>:
 80063f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f6:	460f      	mov	r7, r1
 80063f8:	4690      	mov	r8, r2
 80063fa:	f002 fb23 	bl	8008a44 <__ulp>
 80063fe:	4604      	mov	r4, r0
 8006400:	460d      	mov	r5, r1
 8006402:	f1b8 0f00 	cmp.w	r8, #0
 8006406:	d011      	beq.n	800642c <sulp+0x3a>
 8006408:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800640c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006410:	2b00      	cmp	r3, #0
 8006412:	dd0b      	ble.n	800642c <sulp+0x3a>
 8006414:	2400      	movs	r4, #0
 8006416:	051b      	lsls	r3, r3, #20
 8006418:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800641c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006420:	4622      	mov	r2, r4
 8006422:	462b      	mov	r3, r5
 8006424:	f7fa f872 	bl	800050c <__aeabi_dmul>
 8006428:	4604      	mov	r4, r0
 800642a:	460d      	mov	r5, r1
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006434:	0000      	movs	r0, r0
	...

08006438 <_strtod_l>:
 8006438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643c:	461f      	mov	r7, r3
 800643e:	2300      	movs	r3, #0
 8006440:	b0a1      	sub	sp, #132	; 0x84
 8006442:	4683      	mov	fp, r0
 8006444:	4638      	mov	r0, r7
 8006446:	460e      	mov	r6, r1
 8006448:	9217      	str	r2, [sp, #92]	; 0x5c
 800644a:	931c      	str	r3, [sp, #112]	; 0x70
 800644c:	f002 f810 	bl	8008470 <__localeconv_l>
 8006450:	4680      	mov	r8, r0
 8006452:	6800      	ldr	r0, [r0, #0]
 8006454:	f7f9 fe96 	bl	8000184 <strlen>
 8006458:	f04f 0900 	mov.w	r9, #0
 800645c:	4604      	mov	r4, r0
 800645e:	f04f 0a00 	mov.w	sl, #0
 8006462:	961b      	str	r6, [sp, #108]	; 0x6c
 8006464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006466:	781a      	ldrb	r2, [r3, #0]
 8006468:	2a0d      	cmp	r2, #13
 800646a:	d832      	bhi.n	80064d2 <_strtod_l+0x9a>
 800646c:	2a09      	cmp	r2, #9
 800646e:	d236      	bcs.n	80064de <_strtod_l+0xa6>
 8006470:	2a00      	cmp	r2, #0
 8006472:	d03e      	beq.n	80064f2 <_strtod_l+0xba>
 8006474:	2300      	movs	r3, #0
 8006476:	930d      	str	r3, [sp, #52]	; 0x34
 8006478:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800647a:	782b      	ldrb	r3, [r5, #0]
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	f040 80ac 	bne.w	80065da <_strtod_l+0x1a2>
 8006482:	786b      	ldrb	r3, [r5, #1]
 8006484:	2b58      	cmp	r3, #88	; 0x58
 8006486:	d001      	beq.n	800648c <_strtod_l+0x54>
 8006488:	2b78      	cmp	r3, #120	; 0x78
 800648a:	d167      	bne.n	800655c <_strtod_l+0x124>
 800648c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800648e:	9702      	str	r7, [sp, #8]
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	ab1c      	add	r3, sp, #112	; 0x70
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4a89      	ldr	r2, [pc, #548]	; (80066bc <_strtod_l+0x284>)
 8006498:	ab1d      	add	r3, sp, #116	; 0x74
 800649a:	a91b      	add	r1, sp, #108	; 0x6c
 800649c:	4658      	mov	r0, fp
 800649e:	f001 fd0f 	bl	8007ec0 <__gethex>
 80064a2:	f010 0407 	ands.w	r4, r0, #7
 80064a6:	4606      	mov	r6, r0
 80064a8:	d005      	beq.n	80064b6 <_strtod_l+0x7e>
 80064aa:	2c06      	cmp	r4, #6
 80064ac:	d12b      	bne.n	8006506 <_strtod_l+0xce>
 80064ae:	2300      	movs	r3, #0
 80064b0:	3501      	adds	r5, #1
 80064b2:	951b      	str	r5, [sp, #108]	; 0x6c
 80064b4:	930d      	str	r3, [sp, #52]	; 0x34
 80064b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f040 85a6 	bne.w	800700a <_strtod_l+0xbd2>
 80064be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c0:	b1e3      	cbz	r3, 80064fc <_strtod_l+0xc4>
 80064c2:	464a      	mov	r2, r9
 80064c4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80064c8:	4610      	mov	r0, r2
 80064ca:	4619      	mov	r1, r3
 80064cc:	b021      	add	sp, #132	; 0x84
 80064ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d2:	2a2b      	cmp	r2, #43	; 0x2b
 80064d4:	d015      	beq.n	8006502 <_strtod_l+0xca>
 80064d6:	2a2d      	cmp	r2, #45	; 0x2d
 80064d8:	d004      	beq.n	80064e4 <_strtod_l+0xac>
 80064da:	2a20      	cmp	r2, #32
 80064dc:	d1ca      	bne.n	8006474 <_strtod_l+0x3c>
 80064de:	3301      	adds	r3, #1
 80064e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80064e2:	e7bf      	b.n	8006464 <_strtod_l+0x2c>
 80064e4:	2201      	movs	r2, #1
 80064e6:	920d      	str	r2, [sp, #52]	; 0x34
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1c2      	bne.n	8006478 <_strtod_l+0x40>
 80064f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064f4:	961b      	str	r6, [sp, #108]	; 0x6c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 8585 	bne.w	8007006 <_strtod_l+0xbce>
 80064fc:	464a      	mov	r2, r9
 80064fe:	4653      	mov	r3, sl
 8006500:	e7e2      	b.n	80064c8 <_strtod_l+0x90>
 8006502:	2200      	movs	r2, #0
 8006504:	e7ef      	b.n	80064e6 <_strtod_l+0xae>
 8006506:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006508:	b13a      	cbz	r2, 800651a <_strtod_l+0xe2>
 800650a:	2135      	movs	r1, #53	; 0x35
 800650c:	a81e      	add	r0, sp, #120	; 0x78
 800650e:	f002 fb8c 	bl	8008c2a <__copybits>
 8006512:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006514:	4658      	mov	r0, fp
 8006516:	f001 ffff 	bl	8008518 <_Bfree>
 800651a:	3c01      	subs	r4, #1
 800651c:	2c04      	cmp	r4, #4
 800651e:	d806      	bhi.n	800652e <_strtod_l+0xf6>
 8006520:	e8df f004 	tbb	[pc, r4]
 8006524:	1714030a 	.word	0x1714030a
 8006528:	0a          	.byte	0x0a
 8006529:	00          	.byte	0x00
 800652a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800652e:	0731      	lsls	r1, r6, #28
 8006530:	d5c1      	bpl.n	80064b6 <_strtod_l+0x7e>
 8006532:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006536:	e7be      	b.n	80064b6 <_strtod_l+0x7e>
 8006538:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800653a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800653e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006542:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006546:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800654a:	e7f0      	b.n	800652e <_strtod_l+0xf6>
 800654c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80066c0 <_strtod_l+0x288>
 8006550:	e7ed      	b.n	800652e <_strtod_l+0xf6>
 8006552:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006556:	f04f 39ff 	mov.w	r9, #4294967295
 800655a:	e7e8      	b.n	800652e <_strtod_l+0xf6>
 800655c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	921b      	str	r2, [sp, #108]	; 0x6c
 8006562:	785b      	ldrb	r3, [r3, #1]
 8006564:	2b30      	cmp	r3, #48	; 0x30
 8006566:	d0f9      	beq.n	800655c <_strtod_l+0x124>
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0a4      	beq.n	80064b6 <_strtod_l+0x7e>
 800656c:	2301      	movs	r3, #1
 800656e:	2500      	movs	r5, #0
 8006570:	220a      	movs	r2, #10
 8006572:	9307      	str	r3, [sp, #28]
 8006574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006576:	9506      	str	r5, [sp, #24]
 8006578:	9308      	str	r3, [sp, #32]
 800657a:	9504      	str	r5, [sp, #16]
 800657c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800657e:	7807      	ldrb	r7, [r0, #0]
 8006580:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006584:	b2d9      	uxtb	r1, r3
 8006586:	2909      	cmp	r1, #9
 8006588:	d929      	bls.n	80065de <_strtod_l+0x1a6>
 800658a:	4622      	mov	r2, r4
 800658c:	f8d8 1000 	ldr.w	r1, [r8]
 8006590:	f7ff ff08 	bl	80063a4 <strncmp>
 8006594:	2800      	cmp	r0, #0
 8006596:	d031      	beq.n	80065fc <_strtod_l+0x1c4>
 8006598:	2000      	movs	r0, #0
 800659a:	463b      	mov	r3, r7
 800659c:	4602      	mov	r2, r0
 800659e:	9c04      	ldr	r4, [sp, #16]
 80065a0:	9005      	str	r0, [sp, #20]
 80065a2:	2b65      	cmp	r3, #101	; 0x65
 80065a4:	d001      	beq.n	80065aa <_strtod_l+0x172>
 80065a6:	2b45      	cmp	r3, #69	; 0x45
 80065a8:	d114      	bne.n	80065d4 <_strtod_l+0x19c>
 80065aa:	b924      	cbnz	r4, 80065b6 <_strtod_l+0x17e>
 80065ac:	b910      	cbnz	r0, 80065b4 <_strtod_l+0x17c>
 80065ae:	9b07      	ldr	r3, [sp, #28]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d09e      	beq.n	80064f2 <_strtod_l+0xba>
 80065b4:	2400      	movs	r4, #0
 80065b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80065b8:	1c73      	adds	r3, r6, #1
 80065ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80065bc:	7873      	ldrb	r3, [r6, #1]
 80065be:	2b2b      	cmp	r3, #43	; 0x2b
 80065c0:	d078      	beq.n	80066b4 <_strtod_l+0x27c>
 80065c2:	2b2d      	cmp	r3, #45	; 0x2d
 80065c4:	d070      	beq.n	80066a8 <_strtod_l+0x270>
 80065c6:	f04f 0c00 	mov.w	ip, #0
 80065ca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80065ce:	2f09      	cmp	r7, #9
 80065d0:	d97c      	bls.n	80066cc <_strtod_l+0x294>
 80065d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80065d4:	f04f 0e00 	mov.w	lr, #0
 80065d8:	e09a      	b.n	8006710 <_strtod_l+0x2d8>
 80065da:	2300      	movs	r3, #0
 80065dc:	e7c7      	b.n	800656e <_strtod_l+0x136>
 80065de:	9904      	ldr	r1, [sp, #16]
 80065e0:	3001      	adds	r0, #1
 80065e2:	2908      	cmp	r1, #8
 80065e4:	bfd7      	itett	le
 80065e6:	9906      	ldrle	r1, [sp, #24]
 80065e8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80065ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80065f0:	9306      	strle	r3, [sp, #24]
 80065f2:	9b04      	ldr	r3, [sp, #16]
 80065f4:	901b      	str	r0, [sp, #108]	; 0x6c
 80065f6:	3301      	adds	r3, #1
 80065f8:	9304      	str	r3, [sp, #16]
 80065fa:	e7bf      	b.n	800657c <_strtod_l+0x144>
 80065fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065fe:	191a      	adds	r2, r3, r4
 8006600:	921b      	str	r2, [sp, #108]	; 0x6c
 8006602:	9a04      	ldr	r2, [sp, #16]
 8006604:	5d1b      	ldrb	r3, [r3, r4]
 8006606:	2a00      	cmp	r2, #0
 8006608:	d037      	beq.n	800667a <_strtod_l+0x242>
 800660a:	4602      	mov	r2, r0
 800660c:	9c04      	ldr	r4, [sp, #16]
 800660e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006612:	2909      	cmp	r1, #9
 8006614:	d913      	bls.n	800663e <_strtod_l+0x206>
 8006616:	2101      	movs	r1, #1
 8006618:	9105      	str	r1, [sp, #20]
 800661a:	e7c2      	b.n	80065a2 <_strtod_l+0x16a>
 800661c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800661e:	3001      	adds	r0, #1
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	921b      	str	r2, [sp, #108]	; 0x6c
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2b30      	cmp	r3, #48	; 0x30
 8006628:	d0f8      	beq.n	800661c <_strtod_l+0x1e4>
 800662a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800662e:	2a08      	cmp	r2, #8
 8006630:	f200 84f0 	bhi.w	8007014 <_strtod_l+0xbdc>
 8006634:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006636:	9208      	str	r2, [sp, #32]
 8006638:	4602      	mov	r2, r0
 800663a:	2000      	movs	r0, #0
 800663c:	4604      	mov	r4, r0
 800663e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006642:	f100 0101 	add.w	r1, r0, #1
 8006646:	d012      	beq.n	800666e <_strtod_l+0x236>
 8006648:	440a      	add	r2, r1
 800664a:	270a      	movs	r7, #10
 800664c:	4621      	mov	r1, r4
 800664e:	eb00 0c04 	add.w	ip, r0, r4
 8006652:	458c      	cmp	ip, r1
 8006654:	d113      	bne.n	800667e <_strtod_l+0x246>
 8006656:	1821      	adds	r1, r4, r0
 8006658:	2908      	cmp	r1, #8
 800665a:	f104 0401 	add.w	r4, r4, #1
 800665e:	4404      	add	r4, r0
 8006660:	dc19      	bgt.n	8006696 <_strtod_l+0x25e>
 8006662:	210a      	movs	r1, #10
 8006664:	9b06      	ldr	r3, [sp, #24]
 8006666:	fb01 e303 	mla	r3, r1, r3, lr
 800666a:	9306      	str	r3, [sp, #24]
 800666c:	2100      	movs	r1, #0
 800666e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006670:	1c58      	adds	r0, r3, #1
 8006672:	901b      	str	r0, [sp, #108]	; 0x6c
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	4608      	mov	r0, r1
 8006678:	e7c9      	b.n	800660e <_strtod_l+0x1d6>
 800667a:	9804      	ldr	r0, [sp, #16]
 800667c:	e7d3      	b.n	8006626 <_strtod_l+0x1ee>
 800667e:	2908      	cmp	r1, #8
 8006680:	f101 0101 	add.w	r1, r1, #1
 8006684:	dc03      	bgt.n	800668e <_strtod_l+0x256>
 8006686:	9b06      	ldr	r3, [sp, #24]
 8006688:	437b      	muls	r3, r7
 800668a:	9306      	str	r3, [sp, #24]
 800668c:	e7e1      	b.n	8006652 <_strtod_l+0x21a>
 800668e:	2910      	cmp	r1, #16
 8006690:	bfd8      	it	le
 8006692:	437d      	mulle	r5, r7
 8006694:	e7dd      	b.n	8006652 <_strtod_l+0x21a>
 8006696:	2c10      	cmp	r4, #16
 8006698:	bfdc      	itt	le
 800669a:	210a      	movle	r1, #10
 800669c:	fb01 e505 	mlale	r5, r1, r5, lr
 80066a0:	e7e4      	b.n	800666c <_strtod_l+0x234>
 80066a2:	2301      	movs	r3, #1
 80066a4:	9305      	str	r3, [sp, #20]
 80066a6:	e781      	b.n	80065ac <_strtod_l+0x174>
 80066a8:	f04f 0c01 	mov.w	ip, #1
 80066ac:	1cb3      	adds	r3, r6, #2
 80066ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80066b0:	78b3      	ldrb	r3, [r6, #2]
 80066b2:	e78a      	b.n	80065ca <_strtod_l+0x192>
 80066b4:	f04f 0c00 	mov.w	ip, #0
 80066b8:	e7f8      	b.n	80066ac <_strtod_l+0x274>
 80066ba:	bf00      	nop
 80066bc:	08009208 	.word	0x08009208
 80066c0:	7ff00000 	.word	0x7ff00000
 80066c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066c6:	1c5f      	adds	r7, r3, #1
 80066c8:	971b      	str	r7, [sp, #108]	; 0x6c
 80066ca:	785b      	ldrb	r3, [r3, #1]
 80066cc:	2b30      	cmp	r3, #48	; 0x30
 80066ce:	d0f9      	beq.n	80066c4 <_strtod_l+0x28c>
 80066d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80066d4:	2f08      	cmp	r7, #8
 80066d6:	f63f af7d 	bhi.w	80065d4 <_strtod_l+0x19c>
 80066da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80066de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066e0:	9309      	str	r3, [sp, #36]	; 0x24
 80066e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066e4:	1c5f      	adds	r7, r3, #1
 80066e6:	971b      	str	r7, [sp, #108]	; 0x6c
 80066e8:	785b      	ldrb	r3, [r3, #1]
 80066ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80066ee:	f1b8 0f09 	cmp.w	r8, #9
 80066f2:	d937      	bls.n	8006764 <_strtod_l+0x32c>
 80066f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066f6:	1a7f      	subs	r7, r7, r1
 80066f8:	2f08      	cmp	r7, #8
 80066fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80066fe:	dc37      	bgt.n	8006770 <_strtod_l+0x338>
 8006700:	45be      	cmp	lr, r7
 8006702:	bfa8      	it	ge
 8006704:	46be      	movge	lr, r7
 8006706:	f1bc 0f00 	cmp.w	ip, #0
 800670a:	d001      	beq.n	8006710 <_strtod_l+0x2d8>
 800670c:	f1ce 0e00 	rsb	lr, lr, #0
 8006710:	2c00      	cmp	r4, #0
 8006712:	d151      	bne.n	80067b8 <_strtod_l+0x380>
 8006714:	2800      	cmp	r0, #0
 8006716:	f47f aece 	bne.w	80064b6 <_strtod_l+0x7e>
 800671a:	9a07      	ldr	r2, [sp, #28]
 800671c:	2a00      	cmp	r2, #0
 800671e:	f47f aeca 	bne.w	80064b6 <_strtod_l+0x7e>
 8006722:	9a05      	ldr	r2, [sp, #20]
 8006724:	2a00      	cmp	r2, #0
 8006726:	f47f aee4 	bne.w	80064f2 <_strtod_l+0xba>
 800672a:	2b4e      	cmp	r3, #78	; 0x4e
 800672c:	d027      	beq.n	800677e <_strtod_l+0x346>
 800672e:	dc21      	bgt.n	8006774 <_strtod_l+0x33c>
 8006730:	2b49      	cmp	r3, #73	; 0x49
 8006732:	f47f aede 	bne.w	80064f2 <_strtod_l+0xba>
 8006736:	49a4      	ldr	r1, [pc, #656]	; (80069c8 <_strtod_l+0x590>)
 8006738:	a81b      	add	r0, sp, #108	; 0x6c
 800673a:	f001 fdf5 	bl	8008328 <__match>
 800673e:	2800      	cmp	r0, #0
 8006740:	f43f aed7 	beq.w	80064f2 <_strtod_l+0xba>
 8006744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006746:	49a1      	ldr	r1, [pc, #644]	; (80069cc <_strtod_l+0x594>)
 8006748:	3b01      	subs	r3, #1
 800674a:	a81b      	add	r0, sp, #108	; 0x6c
 800674c:	931b      	str	r3, [sp, #108]	; 0x6c
 800674e:	f001 fdeb 	bl	8008328 <__match>
 8006752:	b910      	cbnz	r0, 800675a <_strtod_l+0x322>
 8006754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006756:	3301      	adds	r3, #1
 8006758:	931b      	str	r3, [sp, #108]	; 0x6c
 800675a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80069e0 <_strtod_l+0x5a8>
 800675e:	f04f 0900 	mov.w	r9, #0
 8006762:	e6a8      	b.n	80064b6 <_strtod_l+0x7e>
 8006764:	210a      	movs	r1, #10
 8006766:	fb01 3e0e 	mla	lr, r1, lr, r3
 800676a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800676e:	e7b8      	b.n	80066e2 <_strtod_l+0x2aa>
 8006770:	46be      	mov	lr, r7
 8006772:	e7c8      	b.n	8006706 <_strtod_l+0x2ce>
 8006774:	2b69      	cmp	r3, #105	; 0x69
 8006776:	d0de      	beq.n	8006736 <_strtod_l+0x2fe>
 8006778:	2b6e      	cmp	r3, #110	; 0x6e
 800677a:	f47f aeba 	bne.w	80064f2 <_strtod_l+0xba>
 800677e:	4994      	ldr	r1, [pc, #592]	; (80069d0 <_strtod_l+0x598>)
 8006780:	a81b      	add	r0, sp, #108	; 0x6c
 8006782:	f001 fdd1 	bl	8008328 <__match>
 8006786:	2800      	cmp	r0, #0
 8006788:	f43f aeb3 	beq.w	80064f2 <_strtod_l+0xba>
 800678c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b28      	cmp	r3, #40	; 0x28
 8006792:	d10e      	bne.n	80067b2 <_strtod_l+0x37a>
 8006794:	aa1e      	add	r2, sp, #120	; 0x78
 8006796:	498f      	ldr	r1, [pc, #572]	; (80069d4 <_strtod_l+0x59c>)
 8006798:	a81b      	add	r0, sp, #108	; 0x6c
 800679a:	f001 fdd9 	bl	8008350 <__hexnan>
 800679e:	2805      	cmp	r0, #5
 80067a0:	d107      	bne.n	80067b2 <_strtod_l+0x37a>
 80067a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067a4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80067a8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80067ac:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80067b0:	e681      	b.n	80064b6 <_strtod_l+0x7e>
 80067b2:	f8df a234 	ldr.w	sl, [pc, #564]	; 80069e8 <_strtod_l+0x5b0>
 80067b6:	e7d2      	b.n	800675e <_strtod_l+0x326>
 80067b8:	ebae 0302 	sub.w	r3, lr, r2
 80067bc:	9307      	str	r3, [sp, #28]
 80067be:	9b04      	ldr	r3, [sp, #16]
 80067c0:	9806      	ldr	r0, [sp, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bf08      	it	eq
 80067c6:	4623      	moveq	r3, r4
 80067c8:	2c10      	cmp	r4, #16
 80067ca:	9304      	str	r3, [sp, #16]
 80067cc:	46a0      	mov	r8, r4
 80067ce:	bfa8      	it	ge
 80067d0:	f04f 0810 	movge.w	r8, #16
 80067d4:	f7f9 fe20 	bl	8000418 <__aeabi_ui2d>
 80067d8:	2c09      	cmp	r4, #9
 80067da:	4681      	mov	r9, r0
 80067dc:	468a      	mov	sl, r1
 80067de:	dc13      	bgt.n	8006808 <_strtod_l+0x3d0>
 80067e0:	9b07      	ldr	r3, [sp, #28]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f43f ae67 	beq.w	80064b6 <_strtod_l+0x7e>
 80067e8:	9b07      	ldr	r3, [sp, #28]
 80067ea:	dd7e      	ble.n	80068ea <_strtod_l+0x4b2>
 80067ec:	2b16      	cmp	r3, #22
 80067ee:	dc65      	bgt.n	80068bc <_strtod_l+0x484>
 80067f0:	4a79      	ldr	r2, [pc, #484]	; (80069d8 <_strtod_l+0x5a0>)
 80067f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80067f6:	464a      	mov	r2, r9
 80067f8:	e9de 0100 	ldrd	r0, r1, [lr]
 80067fc:	4653      	mov	r3, sl
 80067fe:	f7f9 fe85 	bl	800050c <__aeabi_dmul>
 8006802:	4681      	mov	r9, r0
 8006804:	468a      	mov	sl, r1
 8006806:	e656      	b.n	80064b6 <_strtod_l+0x7e>
 8006808:	4b73      	ldr	r3, [pc, #460]	; (80069d8 <_strtod_l+0x5a0>)
 800680a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800680e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006812:	f7f9 fe7b 	bl	800050c <__aeabi_dmul>
 8006816:	4606      	mov	r6, r0
 8006818:	4628      	mov	r0, r5
 800681a:	460f      	mov	r7, r1
 800681c:	f7f9 fdfc 	bl	8000418 <__aeabi_ui2d>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4630      	mov	r0, r6
 8006826:	4639      	mov	r1, r7
 8006828:	f7f9 fcba 	bl	80001a0 <__adddf3>
 800682c:	2c0f      	cmp	r4, #15
 800682e:	4681      	mov	r9, r0
 8006830:	468a      	mov	sl, r1
 8006832:	ddd5      	ble.n	80067e0 <_strtod_l+0x3a8>
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	eba4 0808 	sub.w	r8, r4, r8
 800683a:	4498      	add	r8, r3
 800683c:	f1b8 0f00 	cmp.w	r8, #0
 8006840:	f340 809a 	ble.w	8006978 <_strtod_l+0x540>
 8006844:	f018 030f 	ands.w	r3, r8, #15
 8006848:	d00a      	beq.n	8006860 <_strtod_l+0x428>
 800684a:	4963      	ldr	r1, [pc, #396]	; (80069d8 <_strtod_l+0x5a0>)
 800684c:	464a      	mov	r2, r9
 800684e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006852:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006856:	4653      	mov	r3, sl
 8006858:	f7f9 fe58 	bl	800050c <__aeabi_dmul>
 800685c:	4681      	mov	r9, r0
 800685e:	468a      	mov	sl, r1
 8006860:	f038 080f 	bics.w	r8, r8, #15
 8006864:	d077      	beq.n	8006956 <_strtod_l+0x51e>
 8006866:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800686a:	dd4b      	ble.n	8006904 <_strtod_l+0x4cc>
 800686c:	f04f 0800 	mov.w	r8, #0
 8006870:	f8cd 8010 	str.w	r8, [sp, #16]
 8006874:	f8cd 8020 	str.w	r8, [sp, #32]
 8006878:	f8cd 8018 	str.w	r8, [sp, #24]
 800687c:	2322      	movs	r3, #34	; 0x22
 800687e:	f04f 0900 	mov.w	r9, #0
 8006882:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80069e0 <_strtod_l+0x5a8>
 8006886:	f8cb 3000 	str.w	r3, [fp]
 800688a:	9b08      	ldr	r3, [sp, #32]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f43f ae12 	beq.w	80064b6 <_strtod_l+0x7e>
 8006892:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006894:	4658      	mov	r0, fp
 8006896:	f001 fe3f 	bl	8008518 <_Bfree>
 800689a:	9906      	ldr	r1, [sp, #24]
 800689c:	4658      	mov	r0, fp
 800689e:	f001 fe3b 	bl	8008518 <_Bfree>
 80068a2:	9904      	ldr	r1, [sp, #16]
 80068a4:	4658      	mov	r0, fp
 80068a6:	f001 fe37 	bl	8008518 <_Bfree>
 80068aa:	9908      	ldr	r1, [sp, #32]
 80068ac:	4658      	mov	r0, fp
 80068ae:	f001 fe33 	bl	8008518 <_Bfree>
 80068b2:	4641      	mov	r1, r8
 80068b4:	4658      	mov	r0, fp
 80068b6:	f001 fe2f 	bl	8008518 <_Bfree>
 80068ba:	e5fc      	b.n	80064b6 <_strtod_l+0x7e>
 80068bc:	9a07      	ldr	r2, [sp, #28]
 80068be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80068c2:	4293      	cmp	r3, r2
 80068c4:	dbb6      	blt.n	8006834 <_strtod_l+0x3fc>
 80068c6:	4d44      	ldr	r5, [pc, #272]	; (80069d8 <_strtod_l+0x5a0>)
 80068c8:	f1c4 040f 	rsb	r4, r4, #15
 80068cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80068d0:	464a      	mov	r2, r9
 80068d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068d6:	4653      	mov	r3, sl
 80068d8:	f7f9 fe18 	bl	800050c <__aeabi_dmul>
 80068dc:	9b07      	ldr	r3, [sp, #28]
 80068de:	1b1c      	subs	r4, r3, r4
 80068e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80068e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068e8:	e789      	b.n	80067fe <_strtod_l+0x3c6>
 80068ea:	f113 0f16 	cmn.w	r3, #22
 80068ee:	dba1      	blt.n	8006834 <_strtod_l+0x3fc>
 80068f0:	4a39      	ldr	r2, [pc, #228]	; (80069d8 <_strtod_l+0x5a0>)
 80068f2:	4648      	mov	r0, r9
 80068f4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80068f8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80068fc:	4651      	mov	r1, sl
 80068fe:	f7f9 ff2f 	bl	8000760 <__aeabi_ddiv>
 8006902:	e77e      	b.n	8006802 <_strtod_l+0x3ca>
 8006904:	2300      	movs	r3, #0
 8006906:	4648      	mov	r0, r9
 8006908:	4651      	mov	r1, sl
 800690a:	461d      	mov	r5, r3
 800690c:	4e33      	ldr	r6, [pc, #204]	; (80069dc <_strtod_l+0x5a4>)
 800690e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006912:	f1b8 0f01 	cmp.w	r8, #1
 8006916:	dc21      	bgt.n	800695c <_strtod_l+0x524>
 8006918:	b10b      	cbz	r3, 800691e <_strtod_l+0x4e6>
 800691a:	4681      	mov	r9, r0
 800691c:	468a      	mov	sl, r1
 800691e:	4b2f      	ldr	r3, [pc, #188]	; (80069dc <_strtod_l+0x5a4>)
 8006920:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8006924:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006928:	464a      	mov	r2, r9
 800692a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800692e:	4653      	mov	r3, sl
 8006930:	f7f9 fdec 	bl	800050c <__aeabi_dmul>
 8006934:	4b2a      	ldr	r3, [pc, #168]	; (80069e0 <_strtod_l+0x5a8>)
 8006936:	460a      	mov	r2, r1
 8006938:	400b      	ands	r3, r1
 800693a:	492a      	ldr	r1, [pc, #168]	; (80069e4 <_strtod_l+0x5ac>)
 800693c:	4681      	mov	r9, r0
 800693e:	428b      	cmp	r3, r1
 8006940:	d894      	bhi.n	800686c <_strtod_l+0x434>
 8006942:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006946:	428b      	cmp	r3, r1
 8006948:	bf86      	itte	hi
 800694a:	f04f 39ff 	movhi.w	r9, #4294967295
 800694e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80069ec <_strtod_l+0x5b4>
 8006952:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8006956:	2300      	movs	r3, #0
 8006958:	9305      	str	r3, [sp, #20]
 800695a:	e07b      	b.n	8006a54 <_strtod_l+0x61c>
 800695c:	f018 0f01 	tst.w	r8, #1
 8006960:	d006      	beq.n	8006970 <_strtod_l+0x538>
 8006962:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f7f9 fdcf 	bl	800050c <__aeabi_dmul>
 800696e:	2301      	movs	r3, #1
 8006970:	3501      	adds	r5, #1
 8006972:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006976:	e7cc      	b.n	8006912 <_strtod_l+0x4da>
 8006978:	d0ed      	beq.n	8006956 <_strtod_l+0x51e>
 800697a:	f1c8 0800 	rsb	r8, r8, #0
 800697e:	f018 020f 	ands.w	r2, r8, #15
 8006982:	d00a      	beq.n	800699a <_strtod_l+0x562>
 8006984:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <_strtod_l+0x5a0>)
 8006986:	4648      	mov	r0, r9
 8006988:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800698c:	4651      	mov	r1, sl
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f7f9 fee5 	bl	8000760 <__aeabi_ddiv>
 8006996:	4681      	mov	r9, r0
 8006998:	468a      	mov	sl, r1
 800699a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800699e:	d0da      	beq.n	8006956 <_strtod_l+0x51e>
 80069a0:	f1b8 0f1f 	cmp.w	r8, #31
 80069a4:	dd24      	ble.n	80069f0 <_strtod_l+0x5b8>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80069ae:	f8cd 8020 	str.w	r8, [sp, #32]
 80069b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80069b6:	2322      	movs	r3, #34	; 0x22
 80069b8:	f04f 0900 	mov.w	r9, #0
 80069bc:	f04f 0a00 	mov.w	sl, #0
 80069c0:	f8cb 3000 	str.w	r3, [fp]
 80069c4:	e761      	b.n	800688a <_strtod_l+0x452>
 80069c6:	bf00      	nop
 80069c8:	080091d8 	.word	0x080091d8
 80069cc:	0800935c 	.word	0x0800935c
 80069d0:	080091e0 	.word	0x080091e0
 80069d4:	0800921c 	.word	0x0800921c
 80069d8:	08009390 	.word	0x08009390
 80069dc:	08009368 	.word	0x08009368
 80069e0:	7ff00000 	.word	0x7ff00000
 80069e4:	7ca00000 	.word	0x7ca00000
 80069e8:	fff80000 	.word	0xfff80000
 80069ec:	7fefffff 	.word	0x7fefffff
 80069f0:	f018 0310 	ands.w	r3, r8, #16
 80069f4:	bf18      	it	ne
 80069f6:	236a      	movne	r3, #106	; 0x6a
 80069f8:	4648      	mov	r0, r9
 80069fa:	9305      	str	r3, [sp, #20]
 80069fc:	4651      	mov	r1, sl
 80069fe:	2300      	movs	r3, #0
 8006a00:	4da1      	ldr	r5, [pc, #644]	; (8006c88 <_strtod_l+0x850>)
 8006a02:	f1b8 0f00 	cmp.w	r8, #0
 8006a06:	f300 8113 	bgt.w	8006c30 <_strtod_l+0x7f8>
 8006a0a:	b10b      	cbz	r3, 8006a10 <_strtod_l+0x5d8>
 8006a0c:	4681      	mov	r9, r0
 8006a0e:	468a      	mov	sl, r1
 8006a10:	9b05      	ldr	r3, [sp, #20]
 8006a12:	b1bb      	cbz	r3, 8006a44 <_strtod_l+0x60c>
 8006a14:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8006a18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	4651      	mov	r1, sl
 8006a20:	dd10      	ble.n	8006a44 <_strtod_l+0x60c>
 8006a22:	2b1f      	cmp	r3, #31
 8006a24:	f340 8110 	ble.w	8006c48 <_strtod_l+0x810>
 8006a28:	2b34      	cmp	r3, #52	; 0x34
 8006a2a:	bfd8      	it	le
 8006a2c:	f04f 32ff 	movle.w	r2, #4294967295
 8006a30:	f04f 0900 	mov.w	r9, #0
 8006a34:	bfcf      	iteee	gt
 8006a36:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8006a3a:	3b20      	suble	r3, #32
 8006a3c:	fa02 f303 	lslle.w	r3, r2, r3
 8006a40:	ea03 0a01 	andle.w	sl, r3, r1
 8006a44:	2200      	movs	r2, #0
 8006a46:	2300      	movs	r3, #0
 8006a48:	4648      	mov	r0, r9
 8006a4a:	4651      	mov	r1, sl
 8006a4c:	f7f9 ffc6 	bl	80009dc <__aeabi_dcmpeq>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d1a8      	bne.n	80069a6 <_strtod_l+0x56e>
 8006a54:	9b06      	ldr	r3, [sp, #24]
 8006a56:	9a04      	ldr	r2, [sp, #16]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	9908      	ldr	r1, [sp, #32]
 8006a5c:	4623      	mov	r3, r4
 8006a5e:	4658      	mov	r0, fp
 8006a60:	f001 fdac 	bl	80085bc <__s2b>
 8006a64:	9008      	str	r0, [sp, #32]
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f43f af00 	beq.w	800686c <_strtod_l+0x434>
 8006a6c:	9a07      	ldr	r2, [sp, #28]
 8006a6e:	9b07      	ldr	r3, [sp, #28]
 8006a70:	2a00      	cmp	r2, #0
 8006a72:	f1c3 0300 	rsb	r3, r3, #0
 8006a76:	bfa8      	it	ge
 8006a78:	2300      	movge	r3, #0
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	930e      	str	r3, [sp, #56]	; 0x38
 8006a80:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006a84:	9316      	str	r3, [sp, #88]	; 0x58
 8006a86:	f8cd 8010 	str.w	r8, [sp, #16]
 8006a8a:	9b08      	ldr	r3, [sp, #32]
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	6859      	ldr	r1, [r3, #4]
 8006a90:	f001 fd0e 	bl	80084b0 <_Balloc>
 8006a94:	9006      	str	r0, [sp, #24]
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f43f aef0 	beq.w	800687c <_strtod_l+0x444>
 8006a9c:	9b08      	ldr	r3, [sp, #32]
 8006a9e:	300c      	adds	r0, #12
 8006aa0:	691a      	ldr	r2, [r3, #16]
 8006aa2:	f103 010c 	add.w	r1, r3, #12
 8006aa6:	3202      	adds	r2, #2
 8006aa8:	0092      	lsls	r2, r2, #2
 8006aaa:	f7fe ff25 	bl	80058f8 <memcpy>
 8006aae:	ab1e      	add	r3, sp, #120	; 0x78
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	464a      	mov	r2, r9
 8006ab8:	4653      	mov	r3, sl
 8006aba:	4658      	mov	r0, fp
 8006abc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006ac0:	f002 f836 	bl	8008b30 <__d2b>
 8006ac4:	901c      	str	r0, [sp, #112]	; 0x70
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f aed8 	beq.w	800687c <_strtod_l+0x444>
 8006acc:	2101      	movs	r1, #1
 8006ace:	4658      	mov	r0, fp
 8006ad0:	f001 fe00 	bl	80086d4 <__i2b>
 8006ad4:	9004      	str	r0, [sp, #16]
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	f43f aecf 	beq.w	800687c <_strtod_l+0x444>
 8006ade:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006ae0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ae2:	2d00      	cmp	r5, #0
 8006ae4:	bfab      	itete	ge
 8006ae6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006ae8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006aea:	18ee      	addge	r6, r5, r3
 8006aec:	1b5c      	sublt	r4, r3, r5
 8006aee:	9b05      	ldr	r3, [sp, #20]
 8006af0:	bfa8      	it	ge
 8006af2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006af4:	eba5 0503 	sub.w	r5, r5, r3
 8006af8:	4415      	add	r5, r2
 8006afa:	4b64      	ldr	r3, [pc, #400]	; (8006c8c <_strtod_l+0x854>)
 8006afc:	f105 35ff 	add.w	r5, r5, #4294967295
 8006b00:	bfb8      	it	lt
 8006b02:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006b04:	429d      	cmp	r5, r3
 8006b06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b0a:	f280 80af 	bge.w	8006c6c <_strtod_l+0x834>
 8006b0e:	1b5b      	subs	r3, r3, r5
 8006b10:	2b1f      	cmp	r3, #31
 8006b12:	eba2 0203 	sub.w	r2, r2, r3
 8006b16:	f04f 0701 	mov.w	r7, #1
 8006b1a:	f300 809c 	bgt.w	8006c56 <_strtod_l+0x81e>
 8006b1e:	2500      	movs	r5, #0
 8006b20:	fa07 f303 	lsl.w	r3, r7, r3
 8006b24:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b26:	18b7      	adds	r7, r6, r2
 8006b28:	9b05      	ldr	r3, [sp, #20]
 8006b2a:	42be      	cmp	r6, r7
 8006b2c:	4414      	add	r4, r2
 8006b2e:	441c      	add	r4, r3
 8006b30:	4633      	mov	r3, r6
 8006b32:	bfa8      	it	ge
 8006b34:	463b      	movge	r3, r7
 8006b36:	42a3      	cmp	r3, r4
 8006b38:	bfa8      	it	ge
 8006b3a:	4623      	movge	r3, r4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	bfc2      	ittt	gt
 8006b40:	1aff      	subgt	r7, r7, r3
 8006b42:	1ae4      	subgt	r4, r4, r3
 8006b44:	1af6      	subgt	r6, r6, r3
 8006b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b48:	b1bb      	cbz	r3, 8006b7a <_strtod_l+0x742>
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	9904      	ldr	r1, [sp, #16]
 8006b4e:	4658      	mov	r0, fp
 8006b50:	f001 fe5e 	bl	8008810 <__pow5mult>
 8006b54:	9004      	str	r0, [sp, #16]
 8006b56:	2800      	cmp	r0, #0
 8006b58:	f43f ae90 	beq.w	800687c <_strtod_l+0x444>
 8006b5c:	4601      	mov	r1, r0
 8006b5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b60:	4658      	mov	r0, fp
 8006b62:	f001 fdc0 	bl	80086e6 <__multiply>
 8006b66:	9009      	str	r0, [sp, #36]	; 0x24
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	f43f ae87 	beq.w	800687c <_strtod_l+0x444>
 8006b6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b70:	4658      	mov	r0, fp
 8006b72:	f001 fcd1 	bl	8008518 <_Bfree>
 8006b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b78:	931c      	str	r3, [sp, #112]	; 0x70
 8006b7a:	2f00      	cmp	r7, #0
 8006b7c:	dc7a      	bgt.n	8006c74 <_strtod_l+0x83c>
 8006b7e:	9b07      	ldr	r3, [sp, #28]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dd08      	ble.n	8006b96 <_strtod_l+0x75e>
 8006b84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006b86:	9906      	ldr	r1, [sp, #24]
 8006b88:	4658      	mov	r0, fp
 8006b8a:	f001 fe41 	bl	8008810 <__pow5mult>
 8006b8e:	9006      	str	r0, [sp, #24]
 8006b90:	2800      	cmp	r0, #0
 8006b92:	f43f ae73 	beq.w	800687c <_strtod_l+0x444>
 8006b96:	2c00      	cmp	r4, #0
 8006b98:	dd08      	ble.n	8006bac <_strtod_l+0x774>
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	9906      	ldr	r1, [sp, #24]
 8006b9e:	4658      	mov	r0, fp
 8006ba0:	f001 fe84 	bl	80088ac <__lshift>
 8006ba4:	9006      	str	r0, [sp, #24]
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f43f ae68 	beq.w	800687c <_strtod_l+0x444>
 8006bac:	2e00      	cmp	r6, #0
 8006bae:	dd08      	ble.n	8006bc2 <_strtod_l+0x78a>
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	9904      	ldr	r1, [sp, #16]
 8006bb4:	4658      	mov	r0, fp
 8006bb6:	f001 fe79 	bl	80088ac <__lshift>
 8006bba:	9004      	str	r0, [sp, #16]
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	f43f ae5d 	beq.w	800687c <_strtod_l+0x444>
 8006bc2:	9a06      	ldr	r2, [sp, #24]
 8006bc4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	f001 fede 	bl	8008988 <__mdiff>
 8006bcc:	4680      	mov	r8, r0
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f43f ae54 	beq.w	800687c <_strtod_l+0x444>
 8006bd4:	2400      	movs	r4, #0
 8006bd6:	68c3      	ldr	r3, [r0, #12]
 8006bd8:	9904      	ldr	r1, [sp, #16]
 8006bda:	60c4      	str	r4, [r0, #12]
 8006bdc:	930c      	str	r3, [sp, #48]	; 0x30
 8006bde:	f001 feb9 	bl	8008954 <__mcmp>
 8006be2:	42a0      	cmp	r0, r4
 8006be4:	da54      	bge.n	8006c90 <_strtod_l+0x858>
 8006be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006be8:	b9f3      	cbnz	r3, 8006c28 <_strtod_l+0x7f0>
 8006bea:	f1b9 0f00 	cmp.w	r9, #0
 8006bee:	d11b      	bne.n	8006c28 <_strtod_l+0x7f0>
 8006bf0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006bf4:	b9c3      	cbnz	r3, 8006c28 <_strtod_l+0x7f0>
 8006bf6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006bfa:	0d1b      	lsrs	r3, r3, #20
 8006bfc:	051b      	lsls	r3, r3, #20
 8006bfe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c02:	d911      	bls.n	8006c28 <_strtod_l+0x7f0>
 8006c04:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006c08:	b91b      	cbnz	r3, 8006c12 <_strtod_l+0x7da>
 8006c0a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	dd0a      	ble.n	8006c28 <_strtod_l+0x7f0>
 8006c12:	4641      	mov	r1, r8
 8006c14:	2201      	movs	r2, #1
 8006c16:	4658      	mov	r0, fp
 8006c18:	f001 fe48 	bl	80088ac <__lshift>
 8006c1c:	9904      	ldr	r1, [sp, #16]
 8006c1e:	4680      	mov	r8, r0
 8006c20:	f001 fe98 	bl	8008954 <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	dc68      	bgt.n	8006cfa <_strtod_l+0x8c2>
 8006c28:	9b05      	ldr	r3, [sp, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d172      	bne.n	8006d14 <_strtod_l+0x8dc>
 8006c2e:	e630      	b.n	8006892 <_strtod_l+0x45a>
 8006c30:	f018 0f01 	tst.w	r8, #1
 8006c34:	d004      	beq.n	8006c40 <_strtod_l+0x808>
 8006c36:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c3a:	f7f9 fc67 	bl	800050c <__aeabi_dmul>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c44:	3508      	adds	r5, #8
 8006c46:	e6dc      	b.n	8006a02 <_strtod_l+0x5ca>
 8006c48:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c50:	ea03 0909 	and.w	r9, r3, r9
 8006c54:	e6f6      	b.n	8006a44 <_strtod_l+0x60c>
 8006c56:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006c5a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006c5e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006c62:	35e2      	adds	r5, #226	; 0xe2
 8006c64:	fa07 f505 	lsl.w	r5, r7, r5
 8006c68:	970f      	str	r7, [sp, #60]	; 0x3c
 8006c6a:	e75c      	b.n	8006b26 <_strtod_l+0x6ee>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	2500      	movs	r5, #0
 8006c70:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c72:	e758      	b.n	8006b26 <_strtod_l+0x6ee>
 8006c74:	463a      	mov	r2, r7
 8006c76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c78:	4658      	mov	r0, fp
 8006c7a:	f001 fe17 	bl	80088ac <__lshift>
 8006c7e:	901c      	str	r0, [sp, #112]	; 0x70
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f47f af7c 	bne.w	8006b7e <_strtod_l+0x746>
 8006c86:	e5f9      	b.n	800687c <_strtod_l+0x444>
 8006c88:	08009230 	.word	0x08009230
 8006c8c:	fffffc02 	.word	0xfffffc02
 8006c90:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006c94:	f040 8089 	bne.w	8006daa <_strtod_l+0x972>
 8006c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c9a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006c9e:	b342      	cbz	r2, 8006cf2 <_strtod_l+0x8ba>
 8006ca0:	4aaf      	ldr	r2, [pc, #700]	; (8006f60 <_strtod_l+0xb28>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d156      	bne.n	8006d54 <_strtod_l+0x91c>
 8006ca6:	9b05      	ldr	r3, [sp, #20]
 8006ca8:	4648      	mov	r0, r9
 8006caa:	b1eb      	cbz	r3, 8006ce8 <_strtod_l+0x8b0>
 8006cac:	4653      	mov	r3, sl
 8006cae:	4aad      	ldr	r2, [pc, #692]	; (8006f64 <_strtod_l+0xb2c>)
 8006cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8006cb4:	401a      	ands	r2, r3
 8006cb6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006cba:	d818      	bhi.n	8006cee <_strtod_l+0x8b6>
 8006cbc:	0d12      	lsrs	r2, r2, #20
 8006cbe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc6:	4298      	cmp	r0, r3
 8006cc8:	d144      	bne.n	8006d54 <_strtod_l+0x91c>
 8006cca:	4ba7      	ldr	r3, [pc, #668]	; (8006f68 <_strtod_l+0xb30>)
 8006ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d102      	bne.n	8006cd8 <_strtod_l+0x8a0>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	f43f add2 	beq.w	800687c <_strtod_l+0x444>
 8006cd8:	4ba2      	ldr	r3, [pc, #648]	; (8006f64 <_strtod_l+0xb2c>)
 8006cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cdc:	f04f 0900 	mov.w	r9, #0
 8006ce0:	401a      	ands	r2, r3
 8006ce2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006ce6:	e79f      	b.n	8006c28 <_strtod_l+0x7f0>
 8006ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cec:	e7eb      	b.n	8006cc6 <_strtod_l+0x88e>
 8006cee:	460b      	mov	r3, r1
 8006cf0:	e7e9      	b.n	8006cc6 <_strtod_l+0x88e>
 8006cf2:	bb7b      	cbnz	r3, 8006d54 <_strtod_l+0x91c>
 8006cf4:	f1b9 0f00 	cmp.w	r9, #0
 8006cf8:	d12c      	bne.n	8006d54 <_strtod_l+0x91c>
 8006cfa:	9905      	ldr	r1, [sp, #20]
 8006cfc:	4653      	mov	r3, sl
 8006cfe:	4a99      	ldr	r2, [pc, #612]	; (8006f64 <_strtod_l+0xb2c>)
 8006d00:	b1f1      	cbz	r1, 8006d40 <_strtod_l+0x908>
 8006d02:	ea02 010a 	and.w	r1, r2, sl
 8006d06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d0a:	dc19      	bgt.n	8006d40 <_strtod_l+0x908>
 8006d0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d10:	f77f ae51 	ble.w	80069b6 <_strtod_l+0x57e>
 8006d14:	2300      	movs	r3, #0
 8006d16:	4a95      	ldr	r2, [pc, #596]	; (8006f6c <_strtod_l+0xb34>)
 8006d18:	4648      	mov	r0, r9
 8006d1a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006d1e:	4651      	mov	r1, sl
 8006d20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006d24:	f7f9 fbf2 	bl	800050c <__aeabi_dmul>
 8006d28:	4681      	mov	r9, r0
 8006d2a:	468a      	mov	sl, r1
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	f47f adb0 	bne.w	8006892 <_strtod_l+0x45a>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	f47f adad 	bne.w	8006892 <_strtod_l+0x45a>
 8006d38:	2322      	movs	r3, #34	; 0x22
 8006d3a:	f8cb 3000 	str.w	r3, [fp]
 8006d3e:	e5a8      	b.n	8006892 <_strtod_l+0x45a>
 8006d40:	4013      	ands	r3, r2
 8006d42:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d46:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8006d4a:	f04f 39ff 	mov.w	r9, #4294967295
 8006d4e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006d52:	e769      	b.n	8006c28 <_strtod_l+0x7f0>
 8006d54:	b19d      	cbz	r5, 8006d7e <_strtod_l+0x946>
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	421d      	tst	r5, r3
 8006d5a:	f43f af65 	beq.w	8006c28 <_strtod_l+0x7f0>
 8006d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d60:	9a05      	ldr	r2, [sp, #20]
 8006d62:	4648      	mov	r0, r9
 8006d64:	4651      	mov	r1, sl
 8006d66:	b173      	cbz	r3, 8006d86 <_strtod_l+0x94e>
 8006d68:	f7ff fb43 	bl	80063f2 <sulp>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d74:	f7f9 fa14 	bl	80001a0 <__adddf3>
 8006d78:	4681      	mov	r9, r0
 8006d7a:	468a      	mov	sl, r1
 8006d7c:	e754      	b.n	8006c28 <_strtod_l+0x7f0>
 8006d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d80:	ea13 0f09 	tst.w	r3, r9
 8006d84:	e7e9      	b.n	8006d5a <_strtod_l+0x922>
 8006d86:	f7ff fb34 	bl	80063f2 <sulp>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d92:	f7f9 fa03 	bl	800019c <__aeabi_dsub>
 8006d96:	2200      	movs	r2, #0
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4681      	mov	r9, r0
 8006d9c:	468a      	mov	sl, r1
 8006d9e:	f7f9 fe1d 	bl	80009dc <__aeabi_dcmpeq>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f47f ae07 	bne.w	80069b6 <_strtod_l+0x57e>
 8006da8:	e73e      	b.n	8006c28 <_strtod_l+0x7f0>
 8006daa:	9904      	ldr	r1, [sp, #16]
 8006dac:	4640      	mov	r0, r8
 8006dae:	f001 ff0e 	bl	8008bce <__ratio>
 8006db2:	2200      	movs	r2, #0
 8006db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006db8:	4606      	mov	r6, r0
 8006dba:	460f      	mov	r7, r1
 8006dbc:	f7f9 fe22 	bl	8000a04 <__aeabi_dcmple>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d075      	beq.n	8006eb0 <_strtod_l+0xa78>
 8006dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d047      	beq.n	8006e5a <_strtod_l+0xa22>
 8006dca:	2600      	movs	r6, #0
 8006dcc:	4f68      	ldr	r7, [pc, #416]	; (8006f70 <_strtod_l+0xb38>)
 8006dce:	4d68      	ldr	r5, [pc, #416]	; (8006f70 <_strtod_l+0xb38>)
 8006dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dd6:	0d1b      	lsrs	r3, r3, #20
 8006dd8:	051b      	lsls	r3, r3, #20
 8006dda:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dde:	4b65      	ldr	r3, [pc, #404]	; (8006f74 <_strtod_l+0xb3c>)
 8006de0:	429a      	cmp	r2, r3
 8006de2:	f040 80cf 	bne.w	8006f84 <_strtod_l+0xb4c>
 8006de6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dea:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	4648      	mov	r0, r9
 8006df2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006df6:	4651      	mov	r1, sl
 8006df8:	f001 fe24 	bl	8008a44 <__ulp>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4630      	mov	r0, r6
 8006e02:	4639      	mov	r1, r7
 8006e04:	f7f9 fb82 	bl	800050c <__aeabi_dmul>
 8006e08:	464a      	mov	r2, r9
 8006e0a:	4653      	mov	r3, sl
 8006e0c:	f7f9 f9c8 	bl	80001a0 <__adddf3>
 8006e10:	460b      	mov	r3, r1
 8006e12:	4954      	ldr	r1, [pc, #336]	; (8006f64 <_strtod_l+0xb2c>)
 8006e14:	4a58      	ldr	r2, [pc, #352]	; (8006f78 <_strtod_l+0xb40>)
 8006e16:	4019      	ands	r1, r3
 8006e18:	4291      	cmp	r1, r2
 8006e1a:	4681      	mov	r9, r0
 8006e1c:	d95e      	bls.n	8006edc <_strtod_l+0xaa4>
 8006e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e20:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d103      	bne.n	8006e30 <_strtod_l+0x9f8>
 8006e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	f43f ad26 	beq.w	800687c <_strtod_l+0x444>
 8006e30:	f04f 39ff 	mov.w	r9, #4294967295
 8006e34:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006f68 <_strtod_l+0xb30>
 8006e38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e3a:	4658      	mov	r0, fp
 8006e3c:	f001 fb6c 	bl	8008518 <_Bfree>
 8006e40:	9906      	ldr	r1, [sp, #24]
 8006e42:	4658      	mov	r0, fp
 8006e44:	f001 fb68 	bl	8008518 <_Bfree>
 8006e48:	9904      	ldr	r1, [sp, #16]
 8006e4a:	4658      	mov	r0, fp
 8006e4c:	f001 fb64 	bl	8008518 <_Bfree>
 8006e50:	4641      	mov	r1, r8
 8006e52:	4658      	mov	r0, fp
 8006e54:	f001 fb60 	bl	8008518 <_Bfree>
 8006e58:	e617      	b.n	8006a8a <_strtod_l+0x652>
 8006e5a:	f1b9 0f00 	cmp.w	r9, #0
 8006e5e:	d119      	bne.n	8006e94 <_strtod_l+0xa5c>
 8006e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e66:	b9e3      	cbnz	r3, 8006ea2 <_strtod_l+0xa6a>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4b41      	ldr	r3, [pc, #260]	; (8006f70 <_strtod_l+0xb38>)
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	4639      	mov	r1, r7
 8006e70:	f7f9 fdbe 	bl	80009f0 <__aeabi_dcmplt>
 8006e74:	b9c8      	cbnz	r0, 8006eaa <_strtod_l+0xa72>
 8006e76:	2200      	movs	r2, #0
 8006e78:	4b40      	ldr	r3, [pc, #256]	; (8006f7c <_strtod_l+0xb44>)
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	f7f9 fb45 	bl	800050c <__aeabi_dmul>
 8006e82:	4604      	mov	r4, r0
 8006e84:	460d      	mov	r5, r1
 8006e86:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006e8a:	9418      	str	r4, [sp, #96]	; 0x60
 8006e8c:	9319      	str	r3, [sp, #100]	; 0x64
 8006e8e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006e92:	e79d      	b.n	8006dd0 <_strtod_l+0x998>
 8006e94:	f1b9 0f01 	cmp.w	r9, #1
 8006e98:	d103      	bne.n	8006ea2 <_strtod_l+0xa6a>
 8006e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f43f ad8a 	beq.w	80069b6 <_strtod_l+0x57e>
 8006ea2:	2600      	movs	r6, #0
 8006ea4:	4f36      	ldr	r7, [pc, #216]	; (8006f80 <_strtod_l+0xb48>)
 8006ea6:	2400      	movs	r4, #0
 8006ea8:	e791      	b.n	8006dce <_strtod_l+0x996>
 8006eaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006eac:	4d33      	ldr	r5, [pc, #204]	; (8006f7c <_strtod_l+0xb44>)
 8006eae:	e7ea      	b.n	8006e86 <_strtod_l+0xa4e>
 8006eb0:	4b32      	ldr	r3, [pc, #200]	; (8006f7c <_strtod_l+0xb44>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	4639      	mov	r1, r7
 8006eb8:	f7f9 fb28 	bl	800050c <__aeabi_dmul>
 8006ebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	460d      	mov	r5, r1
 8006ec2:	b933      	cbnz	r3, 8006ed2 <_strtod_l+0xa9a>
 8006ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ec8:	9010      	str	r0, [sp, #64]	; 0x40
 8006eca:	9311      	str	r3, [sp, #68]	; 0x44
 8006ecc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006ed0:	e77e      	b.n	8006dd0 <_strtod_l+0x998>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006eda:	e7f7      	b.n	8006ecc <_strtod_l+0xa94>
 8006edc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006ee0:	9b05      	ldr	r3, [sp, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1a8      	bne.n	8006e38 <_strtod_l+0xa00>
 8006ee6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006eea:	0d1b      	lsrs	r3, r3, #20
 8006eec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006eee:	051b      	lsls	r3, r3, #20
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	4656      	mov	r6, sl
 8006ef4:	d1a0      	bne.n	8006e38 <_strtod_l+0xa00>
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f7f9 fdb7 	bl	8000a6c <__aeabi_d2iz>
 8006efe:	f7f9 fa9b 	bl	8000438 <__aeabi_i2d>
 8006f02:	460b      	mov	r3, r1
 8006f04:	4602      	mov	r2, r0
 8006f06:	4629      	mov	r1, r5
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f7f9 f947 	bl	800019c <__aeabi_dsub>
 8006f0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f10:	4604      	mov	r4, r0
 8006f12:	460d      	mov	r5, r1
 8006f14:	b933      	cbnz	r3, 8006f24 <_strtod_l+0xaec>
 8006f16:	f1b9 0f00 	cmp.w	r9, #0
 8006f1a:	d103      	bne.n	8006f24 <_strtod_l+0xaec>
 8006f1c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	d06a      	beq.n	8006ffa <_strtod_l+0xbc2>
 8006f24:	a30a      	add	r3, pc, #40	; (adr r3, 8006f50 <_strtod_l+0xb18>)
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	f7f9 fd5f 	bl	80009f0 <__aeabi_dcmplt>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	f47f acad 	bne.w	8006892 <_strtod_l+0x45a>
 8006f38:	a307      	add	r3, pc, #28	; (adr r3, 8006f58 <_strtod_l+0xb20>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	4620      	mov	r0, r4
 8006f40:	4629      	mov	r1, r5
 8006f42:	f7f9 fd73 	bl	8000a2c <__aeabi_dcmpgt>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f43f af76 	beq.w	8006e38 <_strtod_l+0xa00>
 8006f4c:	e4a1      	b.n	8006892 <_strtod_l+0x45a>
 8006f4e:	bf00      	nop
 8006f50:	94a03595 	.word	0x94a03595
 8006f54:	3fdfffff 	.word	0x3fdfffff
 8006f58:	35afe535 	.word	0x35afe535
 8006f5c:	3fe00000 	.word	0x3fe00000
 8006f60:	000fffff 	.word	0x000fffff
 8006f64:	7ff00000 	.word	0x7ff00000
 8006f68:	7fefffff 	.word	0x7fefffff
 8006f6c:	39500000 	.word	0x39500000
 8006f70:	3ff00000 	.word	0x3ff00000
 8006f74:	7fe00000 	.word	0x7fe00000
 8006f78:	7c9fffff 	.word	0x7c9fffff
 8006f7c:	3fe00000 	.word	0x3fe00000
 8006f80:	bff00000 	.word	0xbff00000
 8006f84:	9b05      	ldr	r3, [sp, #20]
 8006f86:	b313      	cbz	r3, 8006fce <_strtod_l+0xb96>
 8006f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f8e:	d81e      	bhi.n	8006fce <_strtod_l+0xb96>
 8006f90:	a325      	add	r3, pc, #148	; (adr r3, 8007028 <_strtod_l+0xbf0>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 fd33 	bl	8000a04 <__aeabi_dcmple>
 8006f9e:	b190      	cbz	r0, 8006fc6 <_strtod_l+0xb8e>
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f7f9 fd8a 	bl	8000abc <__aeabi_d2uiz>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	bf08      	it	eq
 8006fac:	2001      	moveq	r0, #1
 8006fae:	f7f9 fa33 	bl	8000418 <__aeabi_ui2d>
 8006fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	460d      	mov	r5, r1
 8006fb8:	b9d3      	cbnz	r3, 8006ff0 <_strtod_l+0xbb8>
 8006fba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fbe:	9012      	str	r0, [sp, #72]	; 0x48
 8006fc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fc2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006fc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fc8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006fcc:	1a9f      	subs	r7, r3, r2
 8006fce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fd2:	f001 fd37 	bl	8008a44 <__ulp>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4630      	mov	r0, r6
 8006fdc:	4639      	mov	r1, r7
 8006fde:	f7f9 fa95 	bl	800050c <__aeabi_dmul>
 8006fe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fe6:	f7f9 f8db 	bl	80001a0 <__adddf3>
 8006fea:	4681      	mov	r9, r0
 8006fec:	468a      	mov	sl, r1
 8006fee:	e777      	b.n	8006ee0 <_strtod_l+0xaa8>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006ff8:	e7e3      	b.n	8006fc2 <_strtod_l+0xb8a>
 8006ffa:	a30d      	add	r3, pc, #52	; (adr r3, 8007030 <_strtod_l+0xbf8>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f7f9 fcf6 	bl	80009f0 <__aeabi_dcmplt>
 8007004:	e79f      	b.n	8006f46 <_strtod_l+0xb0e>
 8007006:	2300      	movs	r3, #0
 8007008:	930d      	str	r3, [sp, #52]	; 0x34
 800700a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800700c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	f7ff ba55 	b.w	80064be <_strtod_l+0x86>
 8007014:	2b65      	cmp	r3, #101	; 0x65
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	f43f ab42 	beq.w	80066a2 <_strtod_l+0x26a>
 800701e:	2101      	movs	r1, #1
 8007020:	4614      	mov	r4, r2
 8007022:	9105      	str	r1, [sp, #20]
 8007024:	f7ff babf 	b.w	80065a6 <_strtod_l+0x16e>
 8007028:	ffc00000 	.word	0xffc00000
 800702c:	41dfffff 	.word	0x41dfffff
 8007030:	94a03595 	.word	0x94a03595
 8007034:	3fcfffff 	.word	0x3fcfffff

08007038 <strtod>:
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <strtod+0x1c>)
 800703a:	b410      	push	{r4}
 800703c:	681c      	ldr	r4, [r3, #0]
 800703e:	4a06      	ldr	r2, [pc, #24]	; (8007058 <strtod+0x20>)
 8007040:	6a23      	ldr	r3, [r4, #32]
 8007042:	2b00      	cmp	r3, #0
 8007044:	bf08      	it	eq
 8007046:	4613      	moveq	r3, r2
 8007048:	460a      	mov	r2, r1
 800704a:	4601      	mov	r1, r0
 800704c:	4620      	mov	r0, r4
 800704e:	bc10      	pop	{r4}
 8007050:	f7ff b9f2 	b.w	8006438 <_strtod_l>
 8007054:	20000034 	.word	0x20000034
 8007058:	20000098 	.word	0x20000098

0800705c <_strtol_l.isra.0>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	4680      	mov	r8, r0
 8007062:	4689      	mov	r9, r1
 8007064:	4692      	mov	sl, r2
 8007066:	461e      	mov	r6, r3
 8007068:	460f      	mov	r7, r1
 800706a:	463d      	mov	r5, r7
 800706c:	9808      	ldr	r0, [sp, #32]
 800706e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007072:	f7fe fc0d 	bl	8005890 <__locale_ctype_ptr_l>
 8007076:	4420      	add	r0, r4
 8007078:	7843      	ldrb	r3, [r0, #1]
 800707a:	f013 0308 	ands.w	r3, r3, #8
 800707e:	d132      	bne.n	80070e6 <_strtol_l.isra.0+0x8a>
 8007080:	2c2d      	cmp	r4, #45	; 0x2d
 8007082:	d132      	bne.n	80070ea <_strtol_l.isra.0+0x8e>
 8007084:	2201      	movs	r2, #1
 8007086:	787c      	ldrb	r4, [r7, #1]
 8007088:	1cbd      	adds	r5, r7, #2
 800708a:	2e00      	cmp	r6, #0
 800708c:	d05d      	beq.n	800714a <_strtol_l.isra.0+0xee>
 800708e:	2e10      	cmp	r6, #16
 8007090:	d109      	bne.n	80070a6 <_strtol_l.isra.0+0x4a>
 8007092:	2c30      	cmp	r4, #48	; 0x30
 8007094:	d107      	bne.n	80070a6 <_strtol_l.isra.0+0x4a>
 8007096:	782b      	ldrb	r3, [r5, #0]
 8007098:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800709c:	2b58      	cmp	r3, #88	; 0x58
 800709e:	d14f      	bne.n	8007140 <_strtol_l.isra.0+0xe4>
 80070a0:	2610      	movs	r6, #16
 80070a2:	786c      	ldrb	r4, [r5, #1]
 80070a4:	3502      	adds	r5, #2
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	bf14      	ite	ne
 80070aa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80070ae:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80070b2:	2700      	movs	r7, #0
 80070b4:	fbb1 fcf6 	udiv	ip, r1, r6
 80070b8:	4638      	mov	r0, r7
 80070ba:	fb06 1e1c 	mls	lr, r6, ip, r1
 80070be:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80070c2:	2b09      	cmp	r3, #9
 80070c4:	d817      	bhi.n	80070f6 <_strtol_l.isra.0+0x9a>
 80070c6:	461c      	mov	r4, r3
 80070c8:	42a6      	cmp	r6, r4
 80070ca:	dd23      	ble.n	8007114 <_strtol_l.isra.0+0xb8>
 80070cc:	1c7b      	adds	r3, r7, #1
 80070ce:	d007      	beq.n	80070e0 <_strtol_l.isra.0+0x84>
 80070d0:	4584      	cmp	ip, r0
 80070d2:	d31c      	bcc.n	800710e <_strtol_l.isra.0+0xb2>
 80070d4:	d101      	bne.n	80070da <_strtol_l.isra.0+0x7e>
 80070d6:	45a6      	cmp	lr, r4
 80070d8:	db19      	blt.n	800710e <_strtol_l.isra.0+0xb2>
 80070da:	2701      	movs	r7, #1
 80070dc:	fb00 4006 	mla	r0, r0, r6, r4
 80070e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070e4:	e7eb      	b.n	80070be <_strtol_l.isra.0+0x62>
 80070e6:	462f      	mov	r7, r5
 80070e8:	e7bf      	b.n	800706a <_strtol_l.isra.0+0xe>
 80070ea:	2c2b      	cmp	r4, #43	; 0x2b
 80070ec:	bf04      	itt	eq
 80070ee:	1cbd      	addeq	r5, r7, #2
 80070f0:	787c      	ldrbeq	r4, [r7, #1]
 80070f2:	461a      	mov	r2, r3
 80070f4:	e7c9      	b.n	800708a <_strtol_l.isra.0+0x2e>
 80070f6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80070fa:	2b19      	cmp	r3, #25
 80070fc:	d801      	bhi.n	8007102 <_strtol_l.isra.0+0xa6>
 80070fe:	3c37      	subs	r4, #55	; 0x37
 8007100:	e7e2      	b.n	80070c8 <_strtol_l.isra.0+0x6c>
 8007102:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007106:	2b19      	cmp	r3, #25
 8007108:	d804      	bhi.n	8007114 <_strtol_l.isra.0+0xb8>
 800710a:	3c57      	subs	r4, #87	; 0x57
 800710c:	e7dc      	b.n	80070c8 <_strtol_l.isra.0+0x6c>
 800710e:	f04f 37ff 	mov.w	r7, #4294967295
 8007112:	e7e5      	b.n	80070e0 <_strtol_l.isra.0+0x84>
 8007114:	1c7b      	adds	r3, r7, #1
 8007116:	d108      	bne.n	800712a <_strtol_l.isra.0+0xce>
 8007118:	2322      	movs	r3, #34	; 0x22
 800711a:	4608      	mov	r0, r1
 800711c:	f8c8 3000 	str.w	r3, [r8]
 8007120:	f1ba 0f00 	cmp.w	sl, #0
 8007124:	d107      	bne.n	8007136 <_strtol_l.isra.0+0xda>
 8007126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800712a:	b102      	cbz	r2, 800712e <_strtol_l.isra.0+0xd2>
 800712c:	4240      	negs	r0, r0
 800712e:	f1ba 0f00 	cmp.w	sl, #0
 8007132:	d0f8      	beq.n	8007126 <_strtol_l.isra.0+0xca>
 8007134:	b10f      	cbz	r7, 800713a <_strtol_l.isra.0+0xde>
 8007136:	f105 39ff 	add.w	r9, r5, #4294967295
 800713a:	f8ca 9000 	str.w	r9, [sl]
 800713e:	e7f2      	b.n	8007126 <_strtol_l.isra.0+0xca>
 8007140:	2430      	movs	r4, #48	; 0x30
 8007142:	2e00      	cmp	r6, #0
 8007144:	d1af      	bne.n	80070a6 <_strtol_l.isra.0+0x4a>
 8007146:	2608      	movs	r6, #8
 8007148:	e7ad      	b.n	80070a6 <_strtol_l.isra.0+0x4a>
 800714a:	2c30      	cmp	r4, #48	; 0x30
 800714c:	d0a3      	beq.n	8007096 <_strtol_l.isra.0+0x3a>
 800714e:	260a      	movs	r6, #10
 8007150:	e7a9      	b.n	80070a6 <_strtol_l.isra.0+0x4a>
	...

08007154 <strtol>:
 8007154:	4b08      	ldr	r3, [pc, #32]	; (8007178 <strtol+0x24>)
 8007156:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007158:	681c      	ldr	r4, [r3, #0]
 800715a:	4d08      	ldr	r5, [pc, #32]	; (800717c <strtol+0x28>)
 800715c:	6a23      	ldr	r3, [r4, #32]
 800715e:	2b00      	cmp	r3, #0
 8007160:	bf08      	it	eq
 8007162:	462b      	moveq	r3, r5
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	4613      	mov	r3, r2
 8007168:	460a      	mov	r2, r1
 800716a:	4601      	mov	r1, r0
 800716c:	4620      	mov	r0, r4
 800716e:	f7ff ff75 	bl	800705c <_strtol_l.isra.0>
 8007172:	b003      	add	sp, #12
 8007174:	bd30      	pop	{r4, r5, pc}
 8007176:	bf00      	nop
 8007178:	20000034 	.word	0x20000034
 800717c:	20000098 	.word	0x20000098

08007180 <__ascii_wctomb>:
 8007180:	b149      	cbz	r1, 8007196 <__ascii_wctomb+0x16>
 8007182:	2aff      	cmp	r2, #255	; 0xff
 8007184:	bf8b      	itete	hi
 8007186:	238a      	movhi	r3, #138	; 0x8a
 8007188:	700a      	strbls	r2, [r1, #0]
 800718a:	6003      	strhi	r3, [r0, #0]
 800718c:	2001      	movls	r0, #1
 800718e:	bf88      	it	hi
 8007190:	f04f 30ff 	movhi.w	r0, #4294967295
 8007194:	4770      	bx	lr
 8007196:	4608      	mov	r0, r1
 8007198:	4770      	bx	lr

0800719a <quorem>:
 800719a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719e:	6903      	ldr	r3, [r0, #16]
 80071a0:	690c      	ldr	r4, [r1, #16]
 80071a2:	4680      	mov	r8, r0
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	f2c0 8084 	blt.w	80072b2 <quorem+0x118>
 80071aa:	3c01      	subs	r4, #1
 80071ac:	f101 0714 	add.w	r7, r1, #20
 80071b0:	f100 0614 	add.w	r6, r0, #20
 80071b4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80071b8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80071bc:	3501      	adds	r5, #1
 80071be:	fbb0 f5f5 	udiv	r5, r0, r5
 80071c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80071c6:	eb06 030c 	add.w	r3, r6, ip
 80071ca:	eb07 090c 	add.w	r9, r7, ip
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	b39d      	cbz	r5, 800723a <quorem+0xa0>
 80071d2:	f04f 0a00 	mov.w	sl, #0
 80071d6:	4638      	mov	r0, r7
 80071d8:	46b6      	mov	lr, r6
 80071da:	46d3      	mov	fp, sl
 80071dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80071e0:	b293      	uxth	r3, r2
 80071e2:	fb05 a303 	mla	r3, r5, r3, sl
 80071e6:	0c12      	lsrs	r2, r2, #16
 80071e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071ec:	fb05 a202 	mla	r2, r5, r2, sl
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	ebab 0303 	sub.w	r3, fp, r3
 80071f6:	f8de b000 	ldr.w	fp, [lr]
 80071fa:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80071fe:	fa1f fb8b 	uxth.w	fp, fp
 8007202:	445b      	add	r3, fp
 8007204:	fa1f fb82 	uxth.w	fp, r2
 8007208:	f8de 2000 	ldr.w	r2, [lr]
 800720c:	4581      	cmp	r9, r0
 800720e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007212:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007216:	b29b      	uxth	r3, r3
 8007218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800721c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007220:	f84e 3b04 	str.w	r3, [lr], #4
 8007224:	d2da      	bcs.n	80071dc <quorem+0x42>
 8007226:	f856 300c 	ldr.w	r3, [r6, ip]
 800722a:	b933      	cbnz	r3, 800723a <quorem+0xa0>
 800722c:	9b01      	ldr	r3, [sp, #4]
 800722e:	3b04      	subs	r3, #4
 8007230:	429e      	cmp	r6, r3
 8007232:	461a      	mov	r2, r3
 8007234:	d331      	bcc.n	800729a <quorem+0x100>
 8007236:	f8c8 4010 	str.w	r4, [r8, #16]
 800723a:	4640      	mov	r0, r8
 800723c:	f001 fb8a 	bl	8008954 <__mcmp>
 8007240:	2800      	cmp	r0, #0
 8007242:	db26      	blt.n	8007292 <quorem+0xf8>
 8007244:	4630      	mov	r0, r6
 8007246:	f04f 0c00 	mov.w	ip, #0
 800724a:	3501      	adds	r5, #1
 800724c:	f857 1b04 	ldr.w	r1, [r7], #4
 8007250:	f8d0 e000 	ldr.w	lr, [r0]
 8007254:	b28b      	uxth	r3, r1
 8007256:	ebac 0303 	sub.w	r3, ip, r3
 800725a:	fa1f f28e 	uxth.w	r2, lr
 800725e:	4413      	add	r3, r2
 8007260:	0c0a      	lsrs	r2, r1, #16
 8007262:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007266:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800726a:	b29b      	uxth	r3, r3
 800726c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007270:	45b9      	cmp	r9, r7
 8007272:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007276:	f840 3b04 	str.w	r3, [r0], #4
 800727a:	d2e7      	bcs.n	800724c <quorem+0xb2>
 800727c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007280:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007284:	b92a      	cbnz	r2, 8007292 <quorem+0xf8>
 8007286:	3b04      	subs	r3, #4
 8007288:	429e      	cmp	r6, r3
 800728a:	461a      	mov	r2, r3
 800728c:	d30b      	bcc.n	80072a6 <quorem+0x10c>
 800728e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007292:	4628      	mov	r0, r5
 8007294:	b003      	add	sp, #12
 8007296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729a:	6812      	ldr	r2, [r2, #0]
 800729c:	3b04      	subs	r3, #4
 800729e:	2a00      	cmp	r2, #0
 80072a0:	d1c9      	bne.n	8007236 <quorem+0x9c>
 80072a2:	3c01      	subs	r4, #1
 80072a4:	e7c4      	b.n	8007230 <quorem+0x96>
 80072a6:	6812      	ldr	r2, [r2, #0]
 80072a8:	3b04      	subs	r3, #4
 80072aa:	2a00      	cmp	r2, #0
 80072ac:	d1ef      	bne.n	800728e <quorem+0xf4>
 80072ae:	3c01      	subs	r4, #1
 80072b0:	e7ea      	b.n	8007288 <quorem+0xee>
 80072b2:	2000      	movs	r0, #0
 80072b4:	e7ee      	b.n	8007294 <quorem+0xfa>
	...

080072b8 <_dtoa_r>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	4616      	mov	r6, r2
 80072be:	461f      	mov	r7, r3
 80072c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072c2:	b095      	sub	sp, #84	; 0x54
 80072c4:	4604      	mov	r4, r0
 80072c6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80072ca:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80072ce:	b93d      	cbnz	r5, 80072e0 <_dtoa_r+0x28>
 80072d0:	2010      	movs	r0, #16
 80072d2:	f7fe faef 	bl	80058b4 <malloc>
 80072d6:	6260      	str	r0, [r4, #36]	; 0x24
 80072d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072dc:	6005      	str	r5, [r0, #0]
 80072de:	60c5      	str	r5, [r0, #12]
 80072e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e2:	6819      	ldr	r1, [r3, #0]
 80072e4:	b151      	cbz	r1, 80072fc <_dtoa_r+0x44>
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	2301      	movs	r3, #1
 80072ea:	4093      	lsls	r3, r2
 80072ec:	604a      	str	r2, [r1, #4]
 80072ee:	608b      	str	r3, [r1, #8]
 80072f0:	4620      	mov	r0, r4
 80072f2:	f001 f911 	bl	8008518 <_Bfree>
 80072f6:	2200      	movs	r2, #0
 80072f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	1e3b      	subs	r3, r7, #0
 80072fe:	bfaf      	iteee	ge
 8007300:	2300      	movge	r3, #0
 8007302:	2201      	movlt	r2, #1
 8007304:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007308:	9303      	strlt	r3, [sp, #12]
 800730a:	bfac      	ite	ge
 800730c:	f8c8 3000 	strge.w	r3, [r8]
 8007310:	f8c8 2000 	strlt.w	r2, [r8]
 8007314:	4bae      	ldr	r3, [pc, #696]	; (80075d0 <_dtoa_r+0x318>)
 8007316:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800731a:	ea33 0308 	bics.w	r3, r3, r8
 800731e:	d11b      	bne.n	8007358 <_dtoa_r+0xa0>
 8007320:	f242 730f 	movw	r3, #9999	; 0x270f
 8007324:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	9b02      	ldr	r3, [sp, #8]
 800732a:	b923      	cbnz	r3, 8007336 <_dtoa_r+0x7e>
 800732c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007330:	2800      	cmp	r0, #0
 8007332:	f000 8545 	beq.w	8007dc0 <_dtoa_r+0xb08>
 8007336:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007338:	b953      	cbnz	r3, 8007350 <_dtoa_r+0x98>
 800733a:	4ba6      	ldr	r3, [pc, #664]	; (80075d4 <_dtoa_r+0x31c>)
 800733c:	e021      	b.n	8007382 <_dtoa_r+0xca>
 800733e:	4ba6      	ldr	r3, [pc, #664]	; (80075d8 <_dtoa_r+0x320>)
 8007340:	9306      	str	r3, [sp, #24]
 8007342:	3308      	adds	r3, #8
 8007344:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	9806      	ldr	r0, [sp, #24]
 800734a:	b015      	add	sp, #84	; 0x54
 800734c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007350:	4ba0      	ldr	r3, [pc, #640]	; (80075d4 <_dtoa_r+0x31c>)
 8007352:	9306      	str	r3, [sp, #24]
 8007354:	3303      	adds	r3, #3
 8007356:	e7f5      	b.n	8007344 <_dtoa_r+0x8c>
 8007358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800735c:	2200      	movs	r2, #0
 800735e:	2300      	movs	r3, #0
 8007360:	4630      	mov	r0, r6
 8007362:	4639      	mov	r1, r7
 8007364:	f7f9 fb3a 	bl	80009dc <__aeabi_dcmpeq>
 8007368:	4682      	mov	sl, r0
 800736a:	b160      	cbz	r0, 8007386 <_dtoa_r+0xce>
 800736c:	2301      	movs	r3, #1
 800736e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8520 	beq.w	8007dba <_dtoa_r+0xb02>
 800737a:	4b98      	ldr	r3, [pc, #608]	; (80075dc <_dtoa_r+0x324>)
 800737c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	3b01      	subs	r3, #1
 8007382:	9306      	str	r3, [sp, #24]
 8007384:	e7e0      	b.n	8007348 <_dtoa_r+0x90>
 8007386:	ab12      	add	r3, sp, #72	; 0x48
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	ab13      	add	r3, sp, #76	; 0x4c
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	4632      	mov	r2, r6
 8007390:	463b      	mov	r3, r7
 8007392:	4620      	mov	r0, r4
 8007394:	f001 fbcc 	bl	8008b30 <__d2b>
 8007398:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800739c:	4683      	mov	fp, r0
 800739e:	2d00      	cmp	r5, #0
 80073a0:	d07d      	beq.n	800749e <_dtoa_r+0x1e6>
 80073a2:	46b0      	mov	r8, r6
 80073a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073a8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80073ac:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80073b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073b4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80073b8:	2200      	movs	r2, #0
 80073ba:	4b89      	ldr	r3, [pc, #548]	; (80075e0 <_dtoa_r+0x328>)
 80073bc:	4640      	mov	r0, r8
 80073be:	4649      	mov	r1, r9
 80073c0:	f7f8 feec 	bl	800019c <__aeabi_dsub>
 80073c4:	a37c      	add	r3, pc, #496	; (adr r3, 80075b8 <_dtoa_r+0x300>)
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f7f9 f89f 	bl	800050c <__aeabi_dmul>
 80073ce:	a37c      	add	r3, pc, #496	; (adr r3, 80075c0 <_dtoa_r+0x308>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f7f8 fee4 	bl	80001a0 <__adddf3>
 80073d8:	4606      	mov	r6, r0
 80073da:	4628      	mov	r0, r5
 80073dc:	460f      	mov	r7, r1
 80073de:	f7f9 f82b 	bl	8000438 <__aeabi_i2d>
 80073e2:	a379      	add	r3, pc, #484	; (adr r3, 80075c8 <_dtoa_r+0x310>)
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f7f9 f890 	bl	800050c <__aeabi_dmul>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4630      	mov	r0, r6
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f8 fed4 	bl	80001a0 <__adddf3>
 80073f8:	4606      	mov	r6, r0
 80073fa:	460f      	mov	r7, r1
 80073fc:	f7f9 fb36 	bl	8000a6c <__aeabi_d2iz>
 8007400:	2200      	movs	r2, #0
 8007402:	4682      	mov	sl, r0
 8007404:	2300      	movs	r3, #0
 8007406:	4630      	mov	r0, r6
 8007408:	4639      	mov	r1, r7
 800740a:	f7f9 faf1 	bl	80009f0 <__aeabi_dcmplt>
 800740e:	b148      	cbz	r0, 8007424 <_dtoa_r+0x16c>
 8007410:	4650      	mov	r0, sl
 8007412:	f7f9 f811 	bl	8000438 <__aeabi_i2d>
 8007416:	4632      	mov	r2, r6
 8007418:	463b      	mov	r3, r7
 800741a:	f7f9 fadf 	bl	80009dc <__aeabi_dcmpeq>
 800741e:	b908      	cbnz	r0, 8007424 <_dtoa_r+0x16c>
 8007420:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007424:	f1ba 0f16 	cmp.w	sl, #22
 8007428:	d85a      	bhi.n	80074e0 <_dtoa_r+0x228>
 800742a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800742e:	496d      	ldr	r1, [pc, #436]	; (80075e4 <_dtoa_r+0x32c>)
 8007430:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007438:	f7f9 faf8 	bl	8000a2c <__aeabi_dcmpgt>
 800743c:	2800      	cmp	r0, #0
 800743e:	d051      	beq.n	80074e4 <_dtoa_r+0x22c>
 8007440:	2300      	movs	r3, #0
 8007442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007446:	930d      	str	r3, [sp, #52]	; 0x34
 8007448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800744a:	1b5d      	subs	r5, r3, r5
 800744c:	1e6b      	subs	r3, r5, #1
 800744e:	9307      	str	r3, [sp, #28]
 8007450:	bf43      	ittte	mi
 8007452:	2300      	movmi	r3, #0
 8007454:	f1c5 0901 	rsbmi	r9, r5, #1
 8007458:	9307      	strmi	r3, [sp, #28]
 800745a:	f04f 0900 	movpl.w	r9, #0
 800745e:	f1ba 0f00 	cmp.w	sl, #0
 8007462:	db41      	blt.n	80074e8 <_dtoa_r+0x230>
 8007464:	9b07      	ldr	r3, [sp, #28]
 8007466:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800746a:	4453      	add	r3, sl
 800746c:	9307      	str	r3, [sp, #28]
 800746e:	2300      	movs	r3, #0
 8007470:	9308      	str	r3, [sp, #32]
 8007472:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007474:	2b09      	cmp	r3, #9
 8007476:	f200 808f 	bhi.w	8007598 <_dtoa_r+0x2e0>
 800747a:	2b05      	cmp	r3, #5
 800747c:	bfc4      	itt	gt
 800747e:	3b04      	subgt	r3, #4
 8007480:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007482:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007484:	bfc8      	it	gt
 8007486:	2500      	movgt	r5, #0
 8007488:	f1a3 0302 	sub.w	r3, r3, #2
 800748c:	bfd8      	it	le
 800748e:	2501      	movle	r5, #1
 8007490:	2b03      	cmp	r3, #3
 8007492:	f200 808d 	bhi.w	80075b0 <_dtoa_r+0x2f8>
 8007496:	e8df f003 	tbb	[pc, r3]
 800749a:	7d7b      	.short	0x7d7b
 800749c:	6f2f      	.short	0x6f2f
 800749e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80074a2:	441d      	add	r5, r3
 80074a4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80074a8:	2820      	cmp	r0, #32
 80074aa:	dd13      	ble.n	80074d4 <_dtoa_r+0x21c>
 80074ac:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	fa08 f800 	lsl.w	r8, r8, r0
 80074b6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80074ba:	fa23 f000 	lsr.w	r0, r3, r0
 80074be:	ea48 0000 	orr.w	r0, r8, r0
 80074c2:	f7f8 ffa9 	bl	8000418 <__aeabi_ui2d>
 80074c6:	2301      	movs	r3, #1
 80074c8:	4680      	mov	r8, r0
 80074ca:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80074ce:	3d01      	subs	r5, #1
 80074d0:	9310      	str	r3, [sp, #64]	; 0x40
 80074d2:	e771      	b.n	80073b8 <_dtoa_r+0x100>
 80074d4:	9b02      	ldr	r3, [sp, #8]
 80074d6:	f1c0 0020 	rsb	r0, r0, #32
 80074da:	fa03 f000 	lsl.w	r0, r3, r0
 80074de:	e7f0      	b.n	80074c2 <_dtoa_r+0x20a>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e7b0      	b.n	8007446 <_dtoa_r+0x18e>
 80074e4:	900d      	str	r0, [sp, #52]	; 0x34
 80074e6:	e7af      	b.n	8007448 <_dtoa_r+0x190>
 80074e8:	f1ca 0300 	rsb	r3, sl, #0
 80074ec:	9308      	str	r3, [sp, #32]
 80074ee:	2300      	movs	r3, #0
 80074f0:	eba9 090a 	sub.w	r9, r9, sl
 80074f4:	930c      	str	r3, [sp, #48]	; 0x30
 80074f6:	e7bc      	b.n	8007472 <_dtoa_r+0x1ba>
 80074f8:	2301      	movs	r3, #1
 80074fa:	9309      	str	r3, [sp, #36]	; 0x24
 80074fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	dd74      	ble.n	80075ec <_dtoa_r+0x334>
 8007502:	4698      	mov	r8, r3
 8007504:	9304      	str	r3, [sp, #16]
 8007506:	2200      	movs	r2, #0
 8007508:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800750a:	6072      	str	r2, [r6, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	f102 0014 	add.w	r0, r2, #20
 8007512:	4298      	cmp	r0, r3
 8007514:	6871      	ldr	r1, [r6, #4]
 8007516:	d96e      	bls.n	80075f6 <_dtoa_r+0x33e>
 8007518:	4620      	mov	r0, r4
 800751a:	f000 ffc9 	bl	80084b0 <_Balloc>
 800751e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007520:	6030      	str	r0, [r6, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f1b8 0f0e 	cmp.w	r8, #14
 8007528:	9306      	str	r3, [sp, #24]
 800752a:	f200 80ed 	bhi.w	8007708 <_dtoa_r+0x450>
 800752e:	2d00      	cmp	r5, #0
 8007530:	f000 80ea 	beq.w	8007708 <_dtoa_r+0x450>
 8007534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007538:	f1ba 0f00 	cmp.w	sl, #0
 800753c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007540:	dd77      	ble.n	8007632 <_dtoa_r+0x37a>
 8007542:	4a28      	ldr	r2, [pc, #160]	; (80075e4 <_dtoa_r+0x32c>)
 8007544:	f00a 030f 	and.w	r3, sl, #15
 8007548:	ea4f 162a 	mov.w	r6, sl, asr #4
 800754c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007550:	06f0      	lsls	r0, r6, #27
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800755a:	d568      	bpl.n	800762e <_dtoa_r+0x376>
 800755c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007560:	4b21      	ldr	r3, [pc, #132]	; (80075e8 <_dtoa_r+0x330>)
 8007562:	2503      	movs	r5, #3
 8007564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007568:	f7f9 f8fa 	bl	8000760 <__aeabi_ddiv>
 800756c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007570:	f006 060f 	and.w	r6, r6, #15
 8007574:	4f1c      	ldr	r7, [pc, #112]	; (80075e8 <_dtoa_r+0x330>)
 8007576:	e04f      	b.n	8007618 <_dtoa_r+0x360>
 8007578:	2301      	movs	r3, #1
 800757a:	9309      	str	r3, [sp, #36]	; 0x24
 800757c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800757e:	4453      	add	r3, sl
 8007580:	f103 0801 	add.w	r8, r3, #1
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	4643      	mov	r3, r8
 8007588:	2b01      	cmp	r3, #1
 800758a:	bfb8      	it	lt
 800758c:	2301      	movlt	r3, #1
 800758e:	e7ba      	b.n	8007506 <_dtoa_r+0x24e>
 8007590:	2300      	movs	r3, #0
 8007592:	e7b2      	b.n	80074fa <_dtoa_r+0x242>
 8007594:	2300      	movs	r3, #0
 8007596:	e7f0      	b.n	800757a <_dtoa_r+0x2c2>
 8007598:	2501      	movs	r5, #1
 800759a:	2300      	movs	r3, #0
 800759c:	9509      	str	r5, [sp, #36]	; 0x24
 800759e:	931e      	str	r3, [sp, #120]	; 0x78
 80075a0:	f04f 33ff 	mov.w	r3, #4294967295
 80075a4:	2200      	movs	r2, #0
 80075a6:	9304      	str	r3, [sp, #16]
 80075a8:	4698      	mov	r8, r3
 80075aa:	2312      	movs	r3, #18
 80075ac:	921f      	str	r2, [sp, #124]	; 0x7c
 80075ae:	e7aa      	b.n	8007506 <_dtoa_r+0x24e>
 80075b0:	2301      	movs	r3, #1
 80075b2:	9309      	str	r3, [sp, #36]	; 0x24
 80075b4:	e7f4      	b.n	80075a0 <_dtoa_r+0x2e8>
 80075b6:	bf00      	nop
 80075b8:	636f4361 	.word	0x636f4361
 80075bc:	3fd287a7 	.word	0x3fd287a7
 80075c0:	8b60c8b3 	.word	0x8b60c8b3
 80075c4:	3fc68a28 	.word	0x3fc68a28
 80075c8:	509f79fb 	.word	0x509f79fb
 80075cc:	3fd34413 	.word	0x3fd34413
 80075d0:	7ff00000 	.word	0x7ff00000
 80075d4:	08009362 	.word	0x08009362
 80075d8:	08009359 	.word	0x08009359
 80075dc:	080091e4 	.word	0x080091e4
 80075e0:	3ff80000 	.word	0x3ff80000
 80075e4:	08009390 	.word	0x08009390
 80075e8:	08009368 	.word	0x08009368
 80075ec:	2301      	movs	r3, #1
 80075ee:	9304      	str	r3, [sp, #16]
 80075f0:	4698      	mov	r8, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	e7da      	b.n	80075ac <_dtoa_r+0x2f4>
 80075f6:	3101      	adds	r1, #1
 80075f8:	6071      	str	r1, [r6, #4]
 80075fa:	0052      	lsls	r2, r2, #1
 80075fc:	e787      	b.n	800750e <_dtoa_r+0x256>
 80075fe:	07f1      	lsls	r1, r6, #31
 8007600:	d508      	bpl.n	8007614 <_dtoa_r+0x35c>
 8007602:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760a:	f7f8 ff7f 	bl	800050c <__aeabi_dmul>
 800760e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007612:	3501      	adds	r5, #1
 8007614:	1076      	asrs	r6, r6, #1
 8007616:	3708      	adds	r7, #8
 8007618:	2e00      	cmp	r6, #0
 800761a:	d1f0      	bne.n	80075fe <_dtoa_r+0x346>
 800761c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007624:	f7f9 f89c 	bl	8000760 <__aeabi_ddiv>
 8007628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800762c:	e01b      	b.n	8007666 <_dtoa_r+0x3ae>
 800762e:	2502      	movs	r5, #2
 8007630:	e7a0      	b.n	8007574 <_dtoa_r+0x2bc>
 8007632:	f000 80a4 	beq.w	800777e <_dtoa_r+0x4c6>
 8007636:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800763a:	f1ca 0600 	rsb	r6, sl, #0
 800763e:	4ba0      	ldr	r3, [pc, #640]	; (80078c0 <_dtoa_r+0x608>)
 8007640:	f006 020f 	and.w	r2, r6, #15
 8007644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 ff5e 	bl	800050c <__aeabi_dmul>
 8007650:	2502      	movs	r5, #2
 8007652:	2300      	movs	r3, #0
 8007654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007658:	4f9a      	ldr	r7, [pc, #616]	; (80078c4 <_dtoa_r+0x60c>)
 800765a:	1136      	asrs	r6, r6, #4
 800765c:	2e00      	cmp	r6, #0
 800765e:	f040 8083 	bne.w	8007768 <_dtoa_r+0x4b0>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e0      	bne.n	8007628 <_dtoa_r+0x370>
 8007666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 808a 	beq.w	8007782 <_dtoa_r+0x4ca>
 800766e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007672:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007676:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800767a:	2200      	movs	r2, #0
 800767c:	4b92      	ldr	r3, [pc, #584]	; (80078c8 <_dtoa_r+0x610>)
 800767e:	f7f9 f9b7 	bl	80009f0 <__aeabi_dcmplt>
 8007682:	2800      	cmp	r0, #0
 8007684:	d07d      	beq.n	8007782 <_dtoa_r+0x4ca>
 8007686:	f1b8 0f00 	cmp.w	r8, #0
 800768a:	d07a      	beq.n	8007782 <_dtoa_r+0x4ca>
 800768c:	9b04      	ldr	r3, [sp, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	dd36      	ble.n	8007700 <_dtoa_r+0x448>
 8007692:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007696:	2200      	movs	r2, #0
 8007698:	4b8c      	ldr	r3, [pc, #560]	; (80078cc <_dtoa_r+0x614>)
 800769a:	f7f8 ff37 	bl	800050c <__aeabi_dmul>
 800769e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076a2:	9e04      	ldr	r6, [sp, #16]
 80076a4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80076a8:	3501      	adds	r5, #1
 80076aa:	4628      	mov	r0, r5
 80076ac:	f7f8 fec4 	bl	8000438 <__aeabi_i2d>
 80076b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076b4:	f7f8 ff2a 	bl	800050c <__aeabi_dmul>
 80076b8:	2200      	movs	r2, #0
 80076ba:	4b85      	ldr	r3, [pc, #532]	; (80078d0 <_dtoa_r+0x618>)
 80076bc:	f7f8 fd70 	bl	80001a0 <__adddf3>
 80076c0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80076c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80076c8:	950b      	str	r5, [sp, #44]	; 0x2c
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	d15c      	bne.n	8007788 <_dtoa_r+0x4d0>
 80076ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d2:	2200      	movs	r2, #0
 80076d4:	4b7f      	ldr	r3, [pc, #508]	; (80078d4 <_dtoa_r+0x61c>)
 80076d6:	f7f8 fd61 	bl	800019c <__aeabi_dsub>
 80076da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076dc:	462b      	mov	r3, r5
 80076de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076e2:	f7f9 f9a3 	bl	8000a2c <__aeabi_dcmpgt>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f040 8281 	bne.w	8007bee <_dtoa_r+0x936>
 80076ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076f2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80076f6:	f7f9 f97b 	bl	80009f0 <__aeabi_dcmplt>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f040 8275 	bne.w	8007bea <_dtoa_r+0x932>
 8007700:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007708:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800770a:	2b00      	cmp	r3, #0
 800770c:	f2c0 814b 	blt.w	80079a6 <_dtoa_r+0x6ee>
 8007710:	f1ba 0f0e 	cmp.w	sl, #14
 8007714:	f300 8147 	bgt.w	80079a6 <_dtoa_r+0x6ee>
 8007718:	4b69      	ldr	r3, [pc, #420]	; (80078c0 <_dtoa_r+0x608>)
 800771a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007726:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007728:	2b00      	cmp	r3, #0
 800772a:	f280 80d7 	bge.w	80078dc <_dtoa_r+0x624>
 800772e:	f1b8 0f00 	cmp.w	r8, #0
 8007732:	f300 80d3 	bgt.w	80078dc <_dtoa_r+0x624>
 8007736:	f040 8257 	bne.w	8007be8 <_dtoa_r+0x930>
 800773a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800773e:	2200      	movs	r2, #0
 8007740:	4b64      	ldr	r3, [pc, #400]	; (80078d4 <_dtoa_r+0x61c>)
 8007742:	f7f8 fee3 	bl	800050c <__aeabi_dmul>
 8007746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800774a:	f7f9 f965 	bl	8000a18 <__aeabi_dcmpge>
 800774e:	4646      	mov	r6, r8
 8007750:	4647      	mov	r7, r8
 8007752:	2800      	cmp	r0, #0
 8007754:	f040 822d 	bne.w	8007bb2 <_dtoa_r+0x8fa>
 8007758:	9b06      	ldr	r3, [sp, #24]
 800775a:	9a06      	ldr	r2, [sp, #24]
 800775c:	1c5d      	adds	r5, r3, #1
 800775e:	2331      	movs	r3, #49	; 0x31
 8007760:	f10a 0a01 	add.w	sl, sl, #1
 8007764:	7013      	strb	r3, [r2, #0]
 8007766:	e228      	b.n	8007bba <_dtoa_r+0x902>
 8007768:	07f2      	lsls	r2, r6, #31
 800776a:	d505      	bpl.n	8007778 <_dtoa_r+0x4c0>
 800776c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007770:	f7f8 fecc 	bl	800050c <__aeabi_dmul>
 8007774:	2301      	movs	r3, #1
 8007776:	3501      	adds	r5, #1
 8007778:	1076      	asrs	r6, r6, #1
 800777a:	3708      	adds	r7, #8
 800777c:	e76e      	b.n	800765c <_dtoa_r+0x3a4>
 800777e:	2502      	movs	r5, #2
 8007780:	e771      	b.n	8007666 <_dtoa_r+0x3ae>
 8007782:	4657      	mov	r7, sl
 8007784:	4646      	mov	r6, r8
 8007786:	e790      	b.n	80076aa <_dtoa_r+0x3f2>
 8007788:	4b4d      	ldr	r3, [pc, #308]	; (80078c0 <_dtoa_r+0x608>)
 800778a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800778e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d048      	beq.n	800782a <_dtoa_r+0x572>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	2000      	movs	r0, #0
 800779e:	494e      	ldr	r1, [pc, #312]	; (80078d8 <_dtoa_r+0x620>)
 80077a0:	f7f8 ffde 	bl	8000760 <__aeabi_ddiv>
 80077a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077a8:	f7f8 fcf8 	bl	800019c <__aeabi_dsub>
 80077ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80077b0:	9d06      	ldr	r5, [sp, #24]
 80077b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077b6:	f7f9 f959 	bl	8000a6c <__aeabi_d2iz>
 80077ba:	9011      	str	r0, [sp, #68]	; 0x44
 80077bc:	f7f8 fe3c 	bl	8000438 <__aeabi_i2d>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c8:	f7f8 fce8 	bl	800019c <__aeabi_dsub>
 80077cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077d2:	3330      	adds	r3, #48	; 0x30
 80077d4:	f805 3b01 	strb.w	r3, [r5], #1
 80077d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077dc:	f7f9 f908 	bl	80009f0 <__aeabi_dcmplt>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d163      	bne.n	80078ac <_dtoa_r+0x5f4>
 80077e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077e8:	2000      	movs	r0, #0
 80077ea:	4937      	ldr	r1, [pc, #220]	; (80078c8 <_dtoa_r+0x610>)
 80077ec:	f7f8 fcd6 	bl	800019c <__aeabi_dsub>
 80077f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077f4:	f7f9 f8fc 	bl	80009f0 <__aeabi_dcmplt>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	f040 80b5 	bne.w	8007968 <_dtoa_r+0x6b0>
 80077fe:	9b06      	ldr	r3, [sp, #24]
 8007800:	1aeb      	subs	r3, r5, r3
 8007802:	429e      	cmp	r6, r3
 8007804:	f77f af7c 	ble.w	8007700 <_dtoa_r+0x448>
 8007808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800780c:	2200      	movs	r2, #0
 800780e:	4b2f      	ldr	r3, [pc, #188]	; (80078cc <_dtoa_r+0x614>)
 8007810:	f7f8 fe7c 	bl	800050c <__aeabi_dmul>
 8007814:	2200      	movs	r2, #0
 8007816:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800781a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800781e:	4b2b      	ldr	r3, [pc, #172]	; (80078cc <_dtoa_r+0x614>)
 8007820:	f7f8 fe74 	bl	800050c <__aeabi_dmul>
 8007824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007828:	e7c3      	b.n	80077b2 <_dtoa_r+0x4fa>
 800782a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800782e:	f7f8 fe6d 	bl	800050c <__aeabi_dmul>
 8007832:	9b06      	ldr	r3, [sp, #24]
 8007834:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007838:	199d      	adds	r5, r3, r6
 800783a:	461e      	mov	r6, r3
 800783c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007840:	f7f9 f914 	bl	8000a6c <__aeabi_d2iz>
 8007844:	9011      	str	r0, [sp, #68]	; 0x44
 8007846:	f7f8 fdf7 	bl	8000438 <__aeabi_i2d>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007852:	f7f8 fca3 	bl	800019c <__aeabi_dsub>
 8007856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800785c:	3330      	adds	r3, #48	; 0x30
 800785e:	f806 3b01 	strb.w	r3, [r6], #1
 8007862:	42ae      	cmp	r6, r5
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	d124      	bne.n	80078b4 <_dtoa_r+0x5fc>
 800786a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800786e:	4b1a      	ldr	r3, [pc, #104]	; (80078d8 <_dtoa_r+0x620>)
 8007870:	f7f8 fc96 	bl	80001a0 <__adddf3>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787c:	f7f9 f8d6 	bl	8000a2c <__aeabi_dcmpgt>
 8007880:	2800      	cmp	r0, #0
 8007882:	d171      	bne.n	8007968 <_dtoa_r+0x6b0>
 8007884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007888:	2000      	movs	r0, #0
 800788a:	4913      	ldr	r1, [pc, #76]	; (80078d8 <_dtoa_r+0x620>)
 800788c:	f7f8 fc86 	bl	800019c <__aeabi_dsub>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007898:	f7f9 f8aa 	bl	80009f0 <__aeabi_dcmplt>
 800789c:	2800      	cmp	r0, #0
 800789e:	f43f af2f 	beq.w	8007700 <_dtoa_r+0x448>
 80078a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078a6:	1e6a      	subs	r2, r5, #1
 80078a8:	2b30      	cmp	r3, #48	; 0x30
 80078aa:	d001      	beq.n	80078b0 <_dtoa_r+0x5f8>
 80078ac:	46ba      	mov	sl, r7
 80078ae:	e04a      	b.n	8007946 <_dtoa_r+0x68e>
 80078b0:	4615      	mov	r5, r2
 80078b2:	e7f6      	b.n	80078a2 <_dtoa_r+0x5ea>
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <_dtoa_r+0x614>)
 80078b6:	f7f8 fe29 	bl	800050c <__aeabi_dmul>
 80078ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078be:	e7bd      	b.n	800783c <_dtoa_r+0x584>
 80078c0:	08009390 	.word	0x08009390
 80078c4:	08009368 	.word	0x08009368
 80078c8:	3ff00000 	.word	0x3ff00000
 80078cc:	40240000 	.word	0x40240000
 80078d0:	401c0000 	.word	0x401c0000
 80078d4:	40140000 	.word	0x40140000
 80078d8:	3fe00000 	.word	0x3fe00000
 80078dc:	9d06      	ldr	r5, [sp, #24]
 80078de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078e6:	4630      	mov	r0, r6
 80078e8:	4639      	mov	r1, r7
 80078ea:	f7f8 ff39 	bl	8000760 <__aeabi_ddiv>
 80078ee:	f7f9 f8bd 	bl	8000a6c <__aeabi_d2iz>
 80078f2:	4681      	mov	r9, r0
 80078f4:	f7f8 fda0 	bl	8000438 <__aeabi_i2d>
 80078f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078fc:	f7f8 fe06 	bl	800050c <__aeabi_dmul>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4630      	mov	r0, r6
 8007906:	4639      	mov	r1, r7
 8007908:	f7f8 fc48 	bl	800019c <__aeabi_dsub>
 800790c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007910:	f805 6b01 	strb.w	r6, [r5], #1
 8007914:	9e06      	ldr	r6, [sp, #24]
 8007916:	4602      	mov	r2, r0
 8007918:	1bae      	subs	r6, r5, r6
 800791a:	45b0      	cmp	r8, r6
 800791c:	460b      	mov	r3, r1
 800791e:	d135      	bne.n	800798c <_dtoa_r+0x6d4>
 8007920:	f7f8 fc3e 	bl	80001a0 <__adddf3>
 8007924:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007928:	4606      	mov	r6, r0
 800792a:	460f      	mov	r7, r1
 800792c:	f7f9 f87e 	bl	8000a2c <__aeabi_dcmpgt>
 8007930:	b9c8      	cbnz	r0, 8007966 <_dtoa_r+0x6ae>
 8007932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007936:	4630      	mov	r0, r6
 8007938:	4639      	mov	r1, r7
 800793a:	f7f9 f84f 	bl	80009dc <__aeabi_dcmpeq>
 800793e:	b110      	cbz	r0, 8007946 <_dtoa_r+0x68e>
 8007940:	f019 0f01 	tst.w	r9, #1
 8007944:	d10f      	bne.n	8007966 <_dtoa_r+0x6ae>
 8007946:	4659      	mov	r1, fp
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fde5 	bl	8008518 <_Bfree>
 800794e:	2300      	movs	r3, #0
 8007950:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007952:	702b      	strb	r3, [r5, #0]
 8007954:	f10a 0301 	add.w	r3, sl, #1
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795c:	2b00      	cmp	r3, #0
 800795e:	f43f acf3 	beq.w	8007348 <_dtoa_r+0x90>
 8007962:	601d      	str	r5, [r3, #0]
 8007964:	e4f0      	b.n	8007348 <_dtoa_r+0x90>
 8007966:	4657      	mov	r7, sl
 8007968:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800796c:	1e6b      	subs	r3, r5, #1
 800796e:	2a39      	cmp	r2, #57	; 0x39
 8007970:	d106      	bne.n	8007980 <_dtoa_r+0x6c8>
 8007972:	9a06      	ldr	r2, [sp, #24]
 8007974:	429a      	cmp	r2, r3
 8007976:	d107      	bne.n	8007988 <_dtoa_r+0x6d0>
 8007978:	2330      	movs	r3, #48	; 0x30
 800797a:	7013      	strb	r3, [r2, #0]
 800797c:	4613      	mov	r3, r2
 800797e:	3701      	adds	r7, #1
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	3201      	adds	r2, #1
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	e791      	b.n	80078ac <_dtoa_r+0x5f4>
 8007988:	461d      	mov	r5, r3
 800798a:	e7ed      	b.n	8007968 <_dtoa_r+0x6b0>
 800798c:	2200      	movs	r2, #0
 800798e:	4b99      	ldr	r3, [pc, #612]	; (8007bf4 <_dtoa_r+0x93c>)
 8007990:	f7f8 fdbc 	bl	800050c <__aeabi_dmul>
 8007994:	2200      	movs	r2, #0
 8007996:	2300      	movs	r3, #0
 8007998:	4606      	mov	r6, r0
 800799a:	460f      	mov	r7, r1
 800799c:	f7f9 f81e 	bl	80009dc <__aeabi_dcmpeq>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d09e      	beq.n	80078e2 <_dtoa_r+0x62a>
 80079a4:	e7cf      	b.n	8007946 <_dtoa_r+0x68e>
 80079a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	f000 8088 	beq.w	8007abe <_dtoa_r+0x806>
 80079ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80079b0:	2a01      	cmp	r2, #1
 80079b2:	dc6d      	bgt.n	8007a90 <_dtoa_r+0x7d8>
 80079b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	d066      	beq.n	8007a88 <_dtoa_r+0x7d0>
 80079ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079be:	464d      	mov	r5, r9
 80079c0:	9e08      	ldr	r6, [sp, #32]
 80079c2:	9a07      	ldr	r2, [sp, #28]
 80079c4:	2101      	movs	r1, #1
 80079c6:	441a      	add	r2, r3
 80079c8:	4620      	mov	r0, r4
 80079ca:	4499      	add	r9, r3
 80079cc:	9207      	str	r2, [sp, #28]
 80079ce:	f000 fe81 	bl	80086d4 <__i2b>
 80079d2:	4607      	mov	r7, r0
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	dd0b      	ble.n	80079f0 <_dtoa_r+0x738>
 80079d8:	9b07      	ldr	r3, [sp, #28]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dd08      	ble.n	80079f0 <_dtoa_r+0x738>
 80079de:	42ab      	cmp	r3, r5
 80079e0:	bfa8      	it	ge
 80079e2:	462b      	movge	r3, r5
 80079e4:	9a07      	ldr	r2, [sp, #28]
 80079e6:	eba9 0903 	sub.w	r9, r9, r3
 80079ea:	1aed      	subs	r5, r5, r3
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	9307      	str	r3, [sp, #28]
 80079f0:	9b08      	ldr	r3, [sp, #32]
 80079f2:	b1eb      	cbz	r3, 8007a30 <_dtoa_r+0x778>
 80079f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d065      	beq.n	8007ac6 <_dtoa_r+0x80e>
 80079fa:	b18e      	cbz	r6, 8007a20 <_dtoa_r+0x768>
 80079fc:	4639      	mov	r1, r7
 80079fe:	4632      	mov	r2, r6
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 ff05 	bl	8008810 <__pow5mult>
 8007a06:	465a      	mov	r2, fp
 8007a08:	4601      	mov	r1, r0
 8007a0a:	4607      	mov	r7, r0
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f000 fe6a 	bl	80086e6 <__multiply>
 8007a12:	4659      	mov	r1, fp
 8007a14:	900a      	str	r0, [sp, #40]	; 0x28
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fd7e 	bl	8008518 <_Bfree>
 8007a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a1e:	469b      	mov	fp, r3
 8007a20:	9b08      	ldr	r3, [sp, #32]
 8007a22:	1b9a      	subs	r2, r3, r6
 8007a24:	d004      	beq.n	8007a30 <_dtoa_r+0x778>
 8007a26:	4659      	mov	r1, fp
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fef1 	bl	8008810 <__pow5mult>
 8007a2e:	4683      	mov	fp, r0
 8007a30:	2101      	movs	r1, #1
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 fe4e 	bl	80086d4 <__i2b>
 8007a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 81c6 	beq.w	8007dce <_dtoa_r+0xb16>
 8007a42:	461a      	mov	r2, r3
 8007a44:	4601      	mov	r1, r0
 8007a46:	4620      	mov	r0, r4
 8007a48:	f000 fee2 	bl	8008810 <__pow5mult>
 8007a4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a4e:	4606      	mov	r6, r0
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	dc3e      	bgt.n	8007ad2 <_dtoa_r+0x81a>
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d137      	bne.n	8007aca <_dtoa_r+0x812>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d134      	bne.n	8007ace <_dtoa_r+0x816>
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a6a:	0d1b      	lsrs	r3, r3, #20
 8007a6c:	051b      	lsls	r3, r3, #20
 8007a6e:	b12b      	cbz	r3, 8007a7c <_dtoa_r+0x7c4>
 8007a70:	9b07      	ldr	r3, [sp, #28]
 8007a72:	f109 0901 	add.w	r9, r9, #1
 8007a76:	3301      	adds	r3, #1
 8007a78:	9307      	str	r3, [sp, #28]
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	9308      	str	r3, [sp, #32]
 8007a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d128      	bne.n	8007ad6 <_dtoa_r+0x81e>
 8007a84:	2001      	movs	r0, #1
 8007a86:	e02e      	b.n	8007ae6 <_dtoa_r+0x82e>
 8007a88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a8a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a8e:	e796      	b.n	80079be <_dtoa_r+0x706>
 8007a90:	9b08      	ldr	r3, [sp, #32]
 8007a92:	f108 36ff 	add.w	r6, r8, #4294967295
 8007a96:	42b3      	cmp	r3, r6
 8007a98:	bfb7      	itett	lt
 8007a9a:	9b08      	ldrlt	r3, [sp, #32]
 8007a9c:	1b9e      	subge	r6, r3, r6
 8007a9e:	1af2      	sublt	r2, r6, r3
 8007aa0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007aa2:	bfbf      	itttt	lt
 8007aa4:	9608      	strlt	r6, [sp, #32]
 8007aa6:	189b      	addlt	r3, r3, r2
 8007aa8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007aaa:	2600      	movlt	r6, #0
 8007aac:	f1b8 0f00 	cmp.w	r8, #0
 8007ab0:	bfb9      	ittee	lt
 8007ab2:	eba9 0508 	sublt.w	r5, r9, r8
 8007ab6:	2300      	movlt	r3, #0
 8007ab8:	464d      	movge	r5, r9
 8007aba:	4643      	movge	r3, r8
 8007abc:	e781      	b.n	80079c2 <_dtoa_r+0x70a>
 8007abe:	9e08      	ldr	r6, [sp, #32]
 8007ac0:	464d      	mov	r5, r9
 8007ac2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ac4:	e786      	b.n	80079d4 <_dtoa_r+0x71c>
 8007ac6:	9a08      	ldr	r2, [sp, #32]
 8007ac8:	e7ad      	b.n	8007a26 <_dtoa_r+0x76e>
 8007aca:	2300      	movs	r3, #0
 8007acc:	e7d6      	b.n	8007a7c <_dtoa_r+0x7c4>
 8007ace:	9b02      	ldr	r3, [sp, #8]
 8007ad0:	e7d4      	b.n	8007a7c <_dtoa_r+0x7c4>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9308      	str	r3, [sp, #32]
 8007ad6:	6933      	ldr	r3, [r6, #16]
 8007ad8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007adc:	6918      	ldr	r0, [r3, #16]
 8007ade:	f000 fdab 	bl	8008638 <__hi0bits>
 8007ae2:	f1c0 0020 	rsb	r0, r0, #32
 8007ae6:	9b07      	ldr	r3, [sp, #28]
 8007ae8:	4418      	add	r0, r3
 8007aea:	f010 001f 	ands.w	r0, r0, #31
 8007aee:	d047      	beq.n	8007b80 <_dtoa_r+0x8c8>
 8007af0:	f1c0 0320 	rsb	r3, r0, #32
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	dd3b      	ble.n	8007b70 <_dtoa_r+0x8b8>
 8007af8:	9b07      	ldr	r3, [sp, #28]
 8007afa:	f1c0 001c 	rsb	r0, r0, #28
 8007afe:	4481      	add	r9, r0
 8007b00:	4405      	add	r5, r0
 8007b02:	4403      	add	r3, r0
 8007b04:	9307      	str	r3, [sp, #28]
 8007b06:	f1b9 0f00 	cmp.w	r9, #0
 8007b0a:	dd05      	ble.n	8007b18 <_dtoa_r+0x860>
 8007b0c:	4659      	mov	r1, fp
 8007b0e:	464a      	mov	r2, r9
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fecb 	bl	80088ac <__lshift>
 8007b16:	4683      	mov	fp, r0
 8007b18:	9b07      	ldr	r3, [sp, #28]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dd05      	ble.n	8007b2a <_dtoa_r+0x872>
 8007b1e:	4631      	mov	r1, r6
 8007b20:	461a      	mov	r2, r3
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fec2 	bl	80088ac <__lshift>
 8007b28:	4606      	mov	r6, r0
 8007b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b2c:	b353      	cbz	r3, 8007b84 <_dtoa_r+0x8cc>
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4658      	mov	r0, fp
 8007b32:	f000 ff0f 	bl	8008954 <__mcmp>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	da24      	bge.n	8007b84 <_dtoa_r+0x8cc>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	220a      	movs	r2, #10
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 fd00 	bl	8008546 <__multadd>
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b4c:	4683      	mov	fp, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 8144 	beq.w	8007ddc <_dtoa_r+0xb24>
 8007b54:	2300      	movs	r3, #0
 8007b56:	4639      	mov	r1, r7
 8007b58:	220a      	movs	r2, #10
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 fcf3 	bl	8008546 <__multadd>
 8007b60:	9b04      	ldr	r3, [sp, #16]
 8007b62:	4607      	mov	r7, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dc4d      	bgt.n	8007c04 <_dtoa_r+0x94c>
 8007b68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	dd4a      	ble.n	8007c04 <_dtoa_r+0x94c>
 8007b6e:	e011      	b.n	8007b94 <_dtoa_r+0x8dc>
 8007b70:	d0c9      	beq.n	8007b06 <_dtoa_r+0x84e>
 8007b72:	9a07      	ldr	r2, [sp, #28]
 8007b74:	331c      	adds	r3, #28
 8007b76:	441a      	add	r2, r3
 8007b78:	4499      	add	r9, r3
 8007b7a:	441d      	add	r5, r3
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	e7c1      	b.n	8007b04 <_dtoa_r+0x84c>
 8007b80:	4603      	mov	r3, r0
 8007b82:	e7f6      	b.n	8007b72 <_dtoa_r+0x8ba>
 8007b84:	f1b8 0f00 	cmp.w	r8, #0
 8007b88:	dc36      	bgt.n	8007bf8 <_dtoa_r+0x940>
 8007b8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	dd33      	ble.n	8007bf8 <_dtoa_r+0x940>
 8007b90:	f8cd 8010 	str.w	r8, [sp, #16]
 8007b94:	9b04      	ldr	r3, [sp, #16]
 8007b96:	b963      	cbnz	r3, 8007bb2 <_dtoa_r+0x8fa>
 8007b98:	4631      	mov	r1, r6
 8007b9a:	2205      	movs	r2, #5
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f000 fcd2 	bl	8008546 <__multadd>
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	4658      	mov	r0, fp
 8007ba8:	f000 fed4 	bl	8008954 <__mcmp>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f73f add3 	bgt.w	8007758 <_dtoa_r+0x4a0>
 8007bb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bb4:	9d06      	ldr	r5, [sp, #24]
 8007bb6:	ea6f 0a03 	mvn.w	sl, r3
 8007bba:	f04f 0900 	mov.w	r9, #0
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fca9 	bl	8008518 <_Bfree>
 8007bc6:	2f00      	cmp	r7, #0
 8007bc8:	f43f aebd 	beq.w	8007946 <_dtoa_r+0x68e>
 8007bcc:	f1b9 0f00 	cmp.w	r9, #0
 8007bd0:	d005      	beq.n	8007bde <_dtoa_r+0x926>
 8007bd2:	45b9      	cmp	r9, r7
 8007bd4:	d003      	beq.n	8007bde <_dtoa_r+0x926>
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 fc9d 	bl	8008518 <_Bfree>
 8007bde:	4639      	mov	r1, r7
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 fc99 	bl	8008518 <_Bfree>
 8007be6:	e6ae      	b.n	8007946 <_dtoa_r+0x68e>
 8007be8:	2600      	movs	r6, #0
 8007bea:	4637      	mov	r7, r6
 8007bec:	e7e1      	b.n	8007bb2 <_dtoa_r+0x8fa>
 8007bee:	46ba      	mov	sl, r7
 8007bf0:	4637      	mov	r7, r6
 8007bf2:	e5b1      	b.n	8007758 <_dtoa_r+0x4a0>
 8007bf4:	40240000 	.word	0x40240000
 8007bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfa:	f8cd 8010 	str.w	r8, [sp, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 80f3 	beq.w	8007dea <_dtoa_r+0xb32>
 8007c04:	2d00      	cmp	r5, #0
 8007c06:	dd05      	ble.n	8007c14 <_dtoa_r+0x95c>
 8007c08:	4639      	mov	r1, r7
 8007c0a:	462a      	mov	r2, r5
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 fe4d 	bl	80088ac <__lshift>
 8007c12:	4607      	mov	r7, r0
 8007c14:	9b08      	ldr	r3, [sp, #32]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d04c      	beq.n	8007cb4 <_dtoa_r+0x9fc>
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 fc47 	bl	80084b0 <_Balloc>
 8007c22:	4605      	mov	r5, r0
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	f107 010c 	add.w	r1, r7, #12
 8007c2a:	3202      	adds	r2, #2
 8007c2c:	0092      	lsls	r2, r2, #2
 8007c2e:	300c      	adds	r0, #12
 8007c30:	f7fd fe62 	bl	80058f8 <memcpy>
 8007c34:	2201      	movs	r2, #1
 8007c36:	4629      	mov	r1, r5
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fe37 	bl	80088ac <__lshift>
 8007c3e:	46b9      	mov	r9, r7
 8007c40:	4607      	mov	r7, r0
 8007c42:	9b06      	ldr	r3, [sp, #24]
 8007c44:	9307      	str	r3, [sp, #28]
 8007c46:	9b02      	ldr	r3, [sp, #8]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	9308      	str	r3, [sp, #32]
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4658      	mov	r0, fp
 8007c52:	f7ff faa2 	bl	800719a <quorem>
 8007c56:	4649      	mov	r1, r9
 8007c58:	4605      	mov	r5, r0
 8007c5a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007c5e:	4658      	mov	r0, fp
 8007c60:	f000 fe78 	bl	8008954 <__mcmp>
 8007c64:	463a      	mov	r2, r7
 8007c66:	9002      	str	r0, [sp, #8]
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 fe8c 	bl	8008988 <__mdiff>
 8007c70:	68c3      	ldr	r3, [r0, #12]
 8007c72:	4602      	mov	r2, r0
 8007c74:	bb03      	cbnz	r3, 8007cb8 <_dtoa_r+0xa00>
 8007c76:	4601      	mov	r1, r0
 8007c78:	9009      	str	r0, [sp, #36]	; 0x24
 8007c7a:	4658      	mov	r0, fp
 8007c7c:	f000 fe6a 	bl	8008954 <__mcmp>
 8007c80:	4603      	mov	r3, r0
 8007c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c84:	4611      	mov	r1, r2
 8007c86:	4620      	mov	r0, r4
 8007c88:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8a:	f000 fc45 	bl	8008518 <_Bfree>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c90:	b9a3      	cbnz	r3, 8007cbc <_dtoa_r+0xa04>
 8007c92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007c94:	b992      	cbnz	r2, 8007cbc <_dtoa_r+0xa04>
 8007c96:	9a08      	ldr	r2, [sp, #32]
 8007c98:	b982      	cbnz	r2, 8007cbc <_dtoa_r+0xa04>
 8007c9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c9e:	d029      	beq.n	8007cf4 <_dtoa_r+0xa3c>
 8007ca0:	9b02      	ldr	r3, [sp, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	dd01      	ble.n	8007caa <_dtoa_r+0x9f2>
 8007ca6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007caa:	9b07      	ldr	r3, [sp, #28]
 8007cac:	1c5d      	adds	r5, r3, #1
 8007cae:	f883 8000 	strb.w	r8, [r3]
 8007cb2:	e784      	b.n	8007bbe <_dtoa_r+0x906>
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	e7c2      	b.n	8007c3e <_dtoa_r+0x986>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e7e3      	b.n	8007c84 <_dtoa_r+0x9cc>
 8007cbc:	9a02      	ldr	r2, [sp, #8]
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	db04      	blt.n	8007ccc <_dtoa_r+0xa14>
 8007cc2:	d123      	bne.n	8007d0c <_dtoa_r+0xa54>
 8007cc4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007cc6:	bb0a      	cbnz	r2, 8007d0c <_dtoa_r+0xa54>
 8007cc8:	9a08      	ldr	r2, [sp, #32]
 8007cca:	b9fa      	cbnz	r2, 8007d0c <_dtoa_r+0xa54>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	ddec      	ble.n	8007caa <_dtoa_r+0x9f2>
 8007cd0:	4659      	mov	r1, fp
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fde9 	bl	80088ac <__lshift>
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4683      	mov	fp, r0
 8007cde:	f000 fe39 	bl	8008954 <__mcmp>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	dc03      	bgt.n	8007cee <_dtoa_r+0xa36>
 8007ce6:	d1e0      	bne.n	8007caa <_dtoa_r+0x9f2>
 8007ce8:	f018 0f01 	tst.w	r8, #1
 8007cec:	d0dd      	beq.n	8007caa <_dtoa_r+0x9f2>
 8007cee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007cf2:	d1d8      	bne.n	8007ca6 <_dtoa_r+0x9ee>
 8007cf4:	9b07      	ldr	r3, [sp, #28]
 8007cf6:	9a07      	ldr	r2, [sp, #28]
 8007cf8:	1c5d      	adds	r5, r3, #1
 8007cfa:	2339      	movs	r3, #57	; 0x39
 8007cfc:	7013      	strb	r3, [r2, #0]
 8007cfe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d02:	1e6a      	subs	r2, r5, #1
 8007d04:	2b39      	cmp	r3, #57	; 0x39
 8007d06:	d04d      	beq.n	8007da4 <_dtoa_r+0xaec>
 8007d08:	3301      	adds	r3, #1
 8007d0a:	e052      	b.n	8007db2 <_dtoa_r+0xafa>
 8007d0c:	9a07      	ldr	r2, [sp, #28]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f102 0501 	add.w	r5, r2, #1
 8007d14:	dd06      	ble.n	8007d24 <_dtoa_r+0xa6c>
 8007d16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d1a:	d0eb      	beq.n	8007cf4 <_dtoa_r+0xa3c>
 8007d1c:	f108 0801 	add.w	r8, r8, #1
 8007d20:	9b07      	ldr	r3, [sp, #28]
 8007d22:	e7c4      	b.n	8007cae <_dtoa_r+0x9f6>
 8007d24:	9b06      	ldr	r3, [sp, #24]
 8007d26:	9a04      	ldr	r2, [sp, #16]
 8007d28:	1aeb      	subs	r3, r5, r3
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007d30:	d021      	beq.n	8007d76 <_dtoa_r+0xabe>
 8007d32:	4659      	mov	r1, fp
 8007d34:	2300      	movs	r3, #0
 8007d36:	220a      	movs	r2, #10
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fc04 	bl	8008546 <__multadd>
 8007d3e:	45b9      	cmp	r9, r7
 8007d40:	4683      	mov	fp, r0
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	f04f 020a 	mov.w	r2, #10
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	d105      	bne.n	8007d5c <_dtoa_r+0xaa4>
 8007d50:	f000 fbf9 	bl	8008546 <__multadd>
 8007d54:	4681      	mov	r9, r0
 8007d56:	4607      	mov	r7, r0
 8007d58:	9507      	str	r5, [sp, #28]
 8007d5a:	e778      	b.n	8007c4e <_dtoa_r+0x996>
 8007d5c:	f000 fbf3 	bl	8008546 <__multadd>
 8007d60:	4639      	mov	r1, r7
 8007d62:	4681      	mov	r9, r0
 8007d64:	2300      	movs	r3, #0
 8007d66:	220a      	movs	r2, #10
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 fbec 	bl	8008546 <__multadd>
 8007d6e:	4607      	mov	r7, r0
 8007d70:	e7f2      	b.n	8007d58 <_dtoa_r+0xaa0>
 8007d72:	f04f 0900 	mov.w	r9, #0
 8007d76:	4659      	mov	r1, fp
 8007d78:	2201      	movs	r2, #1
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 fd96 	bl	80088ac <__lshift>
 8007d80:	4631      	mov	r1, r6
 8007d82:	4683      	mov	fp, r0
 8007d84:	f000 fde6 	bl	8008954 <__mcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dcb8      	bgt.n	8007cfe <_dtoa_r+0xa46>
 8007d8c:	d102      	bne.n	8007d94 <_dtoa_r+0xadc>
 8007d8e:	f018 0f01 	tst.w	r8, #1
 8007d92:	d1b4      	bne.n	8007cfe <_dtoa_r+0xa46>
 8007d94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d98:	1e6a      	subs	r2, r5, #1
 8007d9a:	2b30      	cmp	r3, #48	; 0x30
 8007d9c:	f47f af0f 	bne.w	8007bbe <_dtoa_r+0x906>
 8007da0:	4615      	mov	r5, r2
 8007da2:	e7f7      	b.n	8007d94 <_dtoa_r+0xadc>
 8007da4:	9b06      	ldr	r3, [sp, #24]
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d105      	bne.n	8007db6 <_dtoa_r+0xafe>
 8007daa:	2331      	movs	r3, #49	; 0x31
 8007dac:	9a06      	ldr	r2, [sp, #24]
 8007dae:	f10a 0a01 	add.w	sl, sl, #1
 8007db2:	7013      	strb	r3, [r2, #0]
 8007db4:	e703      	b.n	8007bbe <_dtoa_r+0x906>
 8007db6:	4615      	mov	r5, r2
 8007db8:	e7a1      	b.n	8007cfe <_dtoa_r+0xa46>
 8007dba:	4b17      	ldr	r3, [pc, #92]	; (8007e18 <_dtoa_r+0xb60>)
 8007dbc:	f7ff bae1 	b.w	8007382 <_dtoa_r+0xca>
 8007dc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f47f aabb 	bne.w	800733e <_dtoa_r+0x86>
 8007dc8:	4b14      	ldr	r3, [pc, #80]	; (8007e1c <_dtoa_r+0xb64>)
 8007dca:	f7ff bada 	b.w	8007382 <_dtoa_r+0xca>
 8007dce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	f77f ae3f 	ble.w	8007a54 <_dtoa_r+0x79c>
 8007dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dd8:	9308      	str	r3, [sp, #32]
 8007dda:	e653      	b.n	8007a84 <_dtoa_r+0x7cc>
 8007ddc:	9b04      	ldr	r3, [sp, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	dc03      	bgt.n	8007dea <_dtoa_r+0xb32>
 8007de2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	f73f aed5 	bgt.w	8007b94 <_dtoa_r+0x8dc>
 8007dea:	9d06      	ldr	r5, [sp, #24]
 8007dec:	4631      	mov	r1, r6
 8007dee:	4658      	mov	r0, fp
 8007df0:	f7ff f9d3 	bl	800719a <quorem>
 8007df4:	9b06      	ldr	r3, [sp, #24]
 8007df6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007dfa:	f805 8b01 	strb.w	r8, [r5], #1
 8007dfe:	9a04      	ldr	r2, [sp, #16]
 8007e00:	1aeb      	subs	r3, r5, r3
 8007e02:	429a      	cmp	r2, r3
 8007e04:	ddb5      	ble.n	8007d72 <_dtoa_r+0xaba>
 8007e06:	4659      	mov	r1, fp
 8007e08:	2300      	movs	r3, #0
 8007e0a:	220a      	movs	r2, #10
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 fb9a 	bl	8008546 <__multadd>
 8007e12:	4683      	mov	fp, r0
 8007e14:	e7ea      	b.n	8007dec <_dtoa_r+0xb34>
 8007e16:	bf00      	nop
 8007e18:	080091e3 	.word	0x080091e3
 8007e1c:	08009359 	.word	0x08009359

08007e20 <rshift>:
 8007e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e22:	6906      	ldr	r6, [r0, #16]
 8007e24:	114b      	asrs	r3, r1, #5
 8007e26:	429e      	cmp	r6, r3
 8007e28:	f100 0414 	add.w	r4, r0, #20
 8007e2c:	dd31      	ble.n	8007e92 <rshift+0x72>
 8007e2e:	f011 011f 	ands.w	r1, r1, #31
 8007e32:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007e36:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007e3a:	d108      	bne.n	8007e4e <rshift+0x2e>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	42b2      	cmp	r2, r6
 8007e40:	460b      	mov	r3, r1
 8007e42:	d211      	bcs.n	8007e68 <rshift+0x48>
 8007e44:	f852 3b04 	ldr.w	r3, [r2], #4
 8007e48:	f841 3b04 	str.w	r3, [r1], #4
 8007e4c:	e7f7      	b.n	8007e3e <rshift+0x1e>
 8007e4e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007e52:	4623      	mov	r3, r4
 8007e54:	f1c1 0c20 	rsb	ip, r1, #32
 8007e58:	40cd      	lsrs	r5, r1
 8007e5a:	3204      	adds	r2, #4
 8007e5c:	42b2      	cmp	r2, r6
 8007e5e:	4617      	mov	r7, r2
 8007e60:	d30d      	bcc.n	8007e7e <rshift+0x5e>
 8007e62:	601d      	str	r5, [r3, #0]
 8007e64:	b105      	cbz	r5, 8007e68 <rshift+0x48>
 8007e66:	3304      	adds	r3, #4
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	eba3 0204 	sub.w	r2, r3, r4
 8007e6e:	bf08      	it	eq
 8007e70:	2300      	moveq	r3, #0
 8007e72:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e76:	6102      	str	r2, [r0, #16]
 8007e78:	bf08      	it	eq
 8007e7a:	6143      	streq	r3, [r0, #20]
 8007e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e7e:	683f      	ldr	r7, [r7, #0]
 8007e80:	fa07 f70c 	lsl.w	r7, r7, ip
 8007e84:	433d      	orrs	r5, r7
 8007e86:	f843 5b04 	str.w	r5, [r3], #4
 8007e8a:	f852 5b04 	ldr.w	r5, [r2], #4
 8007e8e:	40cd      	lsrs	r5, r1
 8007e90:	e7e4      	b.n	8007e5c <rshift+0x3c>
 8007e92:	4623      	mov	r3, r4
 8007e94:	e7e8      	b.n	8007e68 <rshift+0x48>

08007e96 <__hexdig_fun>:
 8007e96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e9a:	2b09      	cmp	r3, #9
 8007e9c:	d802      	bhi.n	8007ea4 <__hexdig_fun+0xe>
 8007e9e:	3820      	subs	r0, #32
 8007ea0:	b2c0      	uxtb	r0, r0
 8007ea2:	4770      	bx	lr
 8007ea4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ea8:	2b05      	cmp	r3, #5
 8007eaa:	d801      	bhi.n	8007eb0 <__hexdig_fun+0x1a>
 8007eac:	3847      	subs	r0, #71	; 0x47
 8007eae:	e7f7      	b.n	8007ea0 <__hexdig_fun+0xa>
 8007eb0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007eb4:	2b05      	cmp	r3, #5
 8007eb6:	d801      	bhi.n	8007ebc <__hexdig_fun+0x26>
 8007eb8:	3827      	subs	r0, #39	; 0x27
 8007eba:	e7f1      	b.n	8007ea0 <__hexdig_fun+0xa>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	4770      	bx	lr

08007ec0 <__gethex>:
 8007ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	b08b      	sub	sp, #44	; 0x2c
 8007ec6:	9002      	str	r0, [sp, #8]
 8007ec8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007eca:	468a      	mov	sl, r1
 8007ecc:	4690      	mov	r8, r2
 8007ece:	9306      	str	r3, [sp, #24]
 8007ed0:	f000 face 	bl	8008470 <__localeconv_l>
 8007ed4:	6803      	ldr	r3, [r0, #0]
 8007ed6:	f04f 0b00 	mov.w	fp, #0
 8007eda:	4618      	mov	r0, r3
 8007edc:	9303      	str	r3, [sp, #12]
 8007ede:	f7f8 f951 	bl	8000184 <strlen>
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	9001      	str	r0, [sp, #4]
 8007ee6:	4403      	add	r3, r0
 8007ee8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007eec:	9307      	str	r3, [sp, #28]
 8007eee:	f8da 3000 	ldr.w	r3, [sl]
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	461f      	mov	r7, r3
 8007ef6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007efa:	2830      	cmp	r0, #48	; 0x30
 8007efc:	d06c      	beq.n	8007fd8 <__gethex+0x118>
 8007efe:	f7ff ffca 	bl	8007e96 <__hexdig_fun>
 8007f02:	4604      	mov	r4, r0
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d16a      	bne.n	8007fde <__gethex+0x11e>
 8007f08:	9a01      	ldr	r2, [sp, #4]
 8007f0a:	9903      	ldr	r1, [sp, #12]
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7fe fa49 	bl	80063a4 <strncmp>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d166      	bne.n	8007fe4 <__gethex+0x124>
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	5cf8      	ldrb	r0, [r7, r3]
 8007f1a:	18fe      	adds	r6, r7, r3
 8007f1c:	f7ff ffbb 	bl	8007e96 <__hexdig_fun>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d062      	beq.n	8007fea <__gethex+0x12a>
 8007f24:	4633      	mov	r3, r6
 8007f26:	7818      	ldrb	r0, [r3, #0]
 8007f28:	461f      	mov	r7, r3
 8007f2a:	2830      	cmp	r0, #48	; 0x30
 8007f2c:	f103 0301 	add.w	r3, r3, #1
 8007f30:	d0f9      	beq.n	8007f26 <__gethex+0x66>
 8007f32:	f7ff ffb0 	bl	8007e96 <__hexdig_fun>
 8007f36:	fab0 f580 	clz	r5, r0
 8007f3a:	4634      	mov	r4, r6
 8007f3c:	f04f 0b01 	mov.w	fp, #1
 8007f40:	096d      	lsrs	r5, r5, #5
 8007f42:	463a      	mov	r2, r7
 8007f44:	4616      	mov	r6, r2
 8007f46:	7830      	ldrb	r0, [r6, #0]
 8007f48:	3201      	adds	r2, #1
 8007f4a:	f7ff ffa4 	bl	8007e96 <__hexdig_fun>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d1f8      	bne.n	8007f44 <__gethex+0x84>
 8007f52:	9a01      	ldr	r2, [sp, #4]
 8007f54:	9903      	ldr	r1, [sp, #12]
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7fe fa24 	bl	80063a4 <strncmp>
 8007f5c:	b950      	cbnz	r0, 8007f74 <__gethex+0xb4>
 8007f5e:	b954      	cbnz	r4, 8007f76 <__gethex+0xb6>
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	18f4      	adds	r4, r6, r3
 8007f64:	4622      	mov	r2, r4
 8007f66:	4616      	mov	r6, r2
 8007f68:	7830      	ldrb	r0, [r6, #0]
 8007f6a:	3201      	adds	r2, #1
 8007f6c:	f7ff ff93 	bl	8007e96 <__hexdig_fun>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d1f8      	bne.n	8007f66 <__gethex+0xa6>
 8007f74:	b10c      	cbz	r4, 8007f7a <__gethex+0xba>
 8007f76:	1ba4      	subs	r4, r4, r6
 8007f78:	00a4      	lsls	r4, r4, #2
 8007f7a:	7833      	ldrb	r3, [r6, #0]
 8007f7c:	2b50      	cmp	r3, #80	; 0x50
 8007f7e:	d001      	beq.n	8007f84 <__gethex+0xc4>
 8007f80:	2b70      	cmp	r3, #112	; 0x70
 8007f82:	d140      	bne.n	8008006 <__gethex+0x146>
 8007f84:	7873      	ldrb	r3, [r6, #1]
 8007f86:	2b2b      	cmp	r3, #43	; 0x2b
 8007f88:	d031      	beq.n	8007fee <__gethex+0x12e>
 8007f8a:	2b2d      	cmp	r3, #45	; 0x2d
 8007f8c:	d033      	beq.n	8007ff6 <__gethex+0x136>
 8007f8e:	f04f 0900 	mov.w	r9, #0
 8007f92:	1c71      	adds	r1, r6, #1
 8007f94:	7808      	ldrb	r0, [r1, #0]
 8007f96:	f7ff ff7e 	bl	8007e96 <__hexdig_fun>
 8007f9a:	1e43      	subs	r3, r0, #1
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b18      	cmp	r3, #24
 8007fa0:	d831      	bhi.n	8008006 <__gethex+0x146>
 8007fa2:	f1a0 0210 	sub.w	r2, r0, #16
 8007fa6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007faa:	f7ff ff74 	bl	8007e96 <__hexdig_fun>
 8007fae:	1e43      	subs	r3, r0, #1
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b18      	cmp	r3, #24
 8007fb4:	d922      	bls.n	8007ffc <__gethex+0x13c>
 8007fb6:	f1b9 0f00 	cmp.w	r9, #0
 8007fba:	d000      	beq.n	8007fbe <__gethex+0xfe>
 8007fbc:	4252      	negs	r2, r2
 8007fbe:	4414      	add	r4, r2
 8007fc0:	f8ca 1000 	str.w	r1, [sl]
 8007fc4:	b30d      	cbz	r5, 800800a <__gethex+0x14a>
 8007fc6:	f1bb 0f00 	cmp.w	fp, #0
 8007fca:	bf0c      	ite	eq
 8007fcc:	2706      	moveq	r7, #6
 8007fce:	2700      	movne	r7, #0
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	b00b      	add	sp, #44	; 0x2c
 8007fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd8:	f10b 0b01 	add.w	fp, fp, #1
 8007fdc:	e78a      	b.n	8007ef4 <__gethex+0x34>
 8007fde:	2500      	movs	r5, #0
 8007fe0:	462c      	mov	r4, r5
 8007fe2:	e7ae      	b.n	8007f42 <__gethex+0x82>
 8007fe4:	463e      	mov	r6, r7
 8007fe6:	2501      	movs	r5, #1
 8007fe8:	e7c7      	b.n	8007f7a <__gethex+0xba>
 8007fea:	4604      	mov	r4, r0
 8007fec:	e7fb      	b.n	8007fe6 <__gethex+0x126>
 8007fee:	f04f 0900 	mov.w	r9, #0
 8007ff2:	1cb1      	adds	r1, r6, #2
 8007ff4:	e7ce      	b.n	8007f94 <__gethex+0xd4>
 8007ff6:	f04f 0901 	mov.w	r9, #1
 8007ffa:	e7fa      	b.n	8007ff2 <__gethex+0x132>
 8007ffc:	230a      	movs	r3, #10
 8007ffe:	fb03 0202 	mla	r2, r3, r2, r0
 8008002:	3a10      	subs	r2, #16
 8008004:	e7cf      	b.n	8007fa6 <__gethex+0xe6>
 8008006:	4631      	mov	r1, r6
 8008008:	e7da      	b.n	8007fc0 <__gethex+0x100>
 800800a:	4629      	mov	r1, r5
 800800c:	1bf3      	subs	r3, r6, r7
 800800e:	3b01      	subs	r3, #1
 8008010:	2b07      	cmp	r3, #7
 8008012:	dc49      	bgt.n	80080a8 <__gethex+0x1e8>
 8008014:	9802      	ldr	r0, [sp, #8]
 8008016:	f000 fa4b 	bl	80084b0 <_Balloc>
 800801a:	f04f 0b00 	mov.w	fp, #0
 800801e:	4605      	mov	r5, r0
 8008020:	46da      	mov	sl, fp
 8008022:	9b01      	ldr	r3, [sp, #4]
 8008024:	f100 0914 	add.w	r9, r0, #20
 8008028:	f1c3 0301 	rsb	r3, r3, #1
 800802c:	f8cd 9010 	str.w	r9, [sp, #16]
 8008030:	9308      	str	r3, [sp, #32]
 8008032:	42b7      	cmp	r7, r6
 8008034:	d33b      	bcc.n	80080ae <__gethex+0x1ee>
 8008036:	9804      	ldr	r0, [sp, #16]
 8008038:	f840 ab04 	str.w	sl, [r0], #4
 800803c:	eba0 0009 	sub.w	r0, r0, r9
 8008040:	1080      	asrs	r0, r0, #2
 8008042:	6128      	str	r0, [r5, #16]
 8008044:	0147      	lsls	r7, r0, #5
 8008046:	4650      	mov	r0, sl
 8008048:	f000 faf6 	bl	8008638 <__hi0bits>
 800804c:	f8d8 6000 	ldr.w	r6, [r8]
 8008050:	1a3f      	subs	r7, r7, r0
 8008052:	42b7      	cmp	r7, r6
 8008054:	dd64      	ble.n	8008120 <__gethex+0x260>
 8008056:	1bbf      	subs	r7, r7, r6
 8008058:	4639      	mov	r1, r7
 800805a:	4628      	mov	r0, r5
 800805c:	f000 fdff 	bl	8008c5e <__any_on>
 8008060:	4682      	mov	sl, r0
 8008062:	b178      	cbz	r0, 8008084 <__gethex+0x1c4>
 8008064:	f04f 0a01 	mov.w	sl, #1
 8008068:	1e7b      	subs	r3, r7, #1
 800806a:	1159      	asrs	r1, r3, #5
 800806c:	f003 021f 	and.w	r2, r3, #31
 8008070:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008074:	fa0a f202 	lsl.w	r2, sl, r2
 8008078:	420a      	tst	r2, r1
 800807a:	d003      	beq.n	8008084 <__gethex+0x1c4>
 800807c:	4553      	cmp	r3, sl
 800807e:	dc46      	bgt.n	800810e <__gethex+0x24e>
 8008080:	f04f 0a02 	mov.w	sl, #2
 8008084:	4639      	mov	r1, r7
 8008086:	4628      	mov	r0, r5
 8008088:	f7ff feca 	bl	8007e20 <rshift>
 800808c:	443c      	add	r4, r7
 800808e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008092:	42a3      	cmp	r3, r4
 8008094:	da52      	bge.n	800813c <__gethex+0x27c>
 8008096:	4629      	mov	r1, r5
 8008098:	9802      	ldr	r0, [sp, #8]
 800809a:	f000 fa3d 	bl	8008518 <_Bfree>
 800809e:	2300      	movs	r3, #0
 80080a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080a2:	27a3      	movs	r7, #163	; 0xa3
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	e793      	b.n	8007fd0 <__gethex+0x110>
 80080a8:	3101      	adds	r1, #1
 80080aa:	105b      	asrs	r3, r3, #1
 80080ac:	e7b0      	b.n	8008010 <__gethex+0x150>
 80080ae:	1e73      	subs	r3, r6, #1
 80080b0:	9305      	str	r3, [sp, #20]
 80080b2:	9a07      	ldr	r2, [sp, #28]
 80080b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d018      	beq.n	80080ee <__gethex+0x22e>
 80080bc:	f1bb 0f20 	cmp.w	fp, #32
 80080c0:	d107      	bne.n	80080d2 <__gethex+0x212>
 80080c2:	9b04      	ldr	r3, [sp, #16]
 80080c4:	f8c3 a000 	str.w	sl, [r3]
 80080c8:	f04f 0a00 	mov.w	sl, #0
 80080cc:	46d3      	mov	fp, sl
 80080ce:	3304      	adds	r3, #4
 80080d0:	9304      	str	r3, [sp, #16]
 80080d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080d6:	f7ff fede 	bl	8007e96 <__hexdig_fun>
 80080da:	f000 000f 	and.w	r0, r0, #15
 80080de:	fa00 f00b 	lsl.w	r0, r0, fp
 80080e2:	ea4a 0a00 	orr.w	sl, sl, r0
 80080e6:	f10b 0b04 	add.w	fp, fp, #4
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	e00d      	b.n	800810a <__gethex+0x24a>
 80080ee:	9b05      	ldr	r3, [sp, #20]
 80080f0:	9a08      	ldr	r2, [sp, #32]
 80080f2:	4413      	add	r3, r2
 80080f4:	42bb      	cmp	r3, r7
 80080f6:	d3e1      	bcc.n	80080bc <__gethex+0x1fc>
 80080f8:	4618      	mov	r0, r3
 80080fa:	9a01      	ldr	r2, [sp, #4]
 80080fc:	9903      	ldr	r1, [sp, #12]
 80080fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008100:	f7fe f950 	bl	80063a4 <strncmp>
 8008104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008106:	2800      	cmp	r0, #0
 8008108:	d1d8      	bne.n	80080bc <__gethex+0x1fc>
 800810a:	461e      	mov	r6, r3
 800810c:	e791      	b.n	8008032 <__gethex+0x172>
 800810e:	1eb9      	subs	r1, r7, #2
 8008110:	4628      	mov	r0, r5
 8008112:	f000 fda4 	bl	8008c5e <__any_on>
 8008116:	2800      	cmp	r0, #0
 8008118:	d0b2      	beq.n	8008080 <__gethex+0x1c0>
 800811a:	f04f 0a03 	mov.w	sl, #3
 800811e:	e7b1      	b.n	8008084 <__gethex+0x1c4>
 8008120:	da09      	bge.n	8008136 <__gethex+0x276>
 8008122:	1bf7      	subs	r7, r6, r7
 8008124:	4629      	mov	r1, r5
 8008126:	463a      	mov	r2, r7
 8008128:	9802      	ldr	r0, [sp, #8]
 800812a:	f000 fbbf 	bl	80088ac <__lshift>
 800812e:	4605      	mov	r5, r0
 8008130:	1be4      	subs	r4, r4, r7
 8008132:	f100 0914 	add.w	r9, r0, #20
 8008136:	f04f 0a00 	mov.w	sl, #0
 800813a:	e7a8      	b.n	800808e <__gethex+0x1ce>
 800813c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008140:	42a0      	cmp	r0, r4
 8008142:	dd6b      	ble.n	800821c <__gethex+0x35c>
 8008144:	1b04      	subs	r4, r0, r4
 8008146:	42a6      	cmp	r6, r4
 8008148:	dc2e      	bgt.n	80081a8 <__gethex+0x2e8>
 800814a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800814e:	2b02      	cmp	r3, #2
 8008150:	d022      	beq.n	8008198 <__gethex+0x2d8>
 8008152:	2b03      	cmp	r3, #3
 8008154:	d024      	beq.n	80081a0 <__gethex+0x2e0>
 8008156:	2b01      	cmp	r3, #1
 8008158:	d115      	bne.n	8008186 <__gethex+0x2c6>
 800815a:	42a6      	cmp	r6, r4
 800815c:	d113      	bne.n	8008186 <__gethex+0x2c6>
 800815e:	2e01      	cmp	r6, #1
 8008160:	dc0b      	bgt.n	800817a <__gethex+0x2ba>
 8008162:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008166:	9a06      	ldr	r2, [sp, #24]
 8008168:	2762      	movs	r7, #98	; 0x62
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	2301      	movs	r3, #1
 800816e:	612b      	str	r3, [r5, #16]
 8008170:	f8c9 3000 	str.w	r3, [r9]
 8008174:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008176:	601d      	str	r5, [r3, #0]
 8008178:	e72a      	b.n	8007fd0 <__gethex+0x110>
 800817a:	1e71      	subs	r1, r6, #1
 800817c:	4628      	mov	r0, r5
 800817e:	f000 fd6e 	bl	8008c5e <__any_on>
 8008182:	2800      	cmp	r0, #0
 8008184:	d1ed      	bne.n	8008162 <__gethex+0x2a2>
 8008186:	4629      	mov	r1, r5
 8008188:	9802      	ldr	r0, [sp, #8]
 800818a:	f000 f9c5 	bl	8008518 <_Bfree>
 800818e:	2300      	movs	r3, #0
 8008190:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008192:	2750      	movs	r7, #80	; 0x50
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	e71b      	b.n	8007fd0 <__gethex+0x110>
 8008198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0e1      	beq.n	8008162 <__gethex+0x2a2>
 800819e:	e7f2      	b.n	8008186 <__gethex+0x2c6>
 80081a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1dd      	bne.n	8008162 <__gethex+0x2a2>
 80081a6:	e7ee      	b.n	8008186 <__gethex+0x2c6>
 80081a8:	1e67      	subs	r7, r4, #1
 80081aa:	f1ba 0f00 	cmp.w	sl, #0
 80081ae:	d132      	bne.n	8008216 <__gethex+0x356>
 80081b0:	b127      	cbz	r7, 80081bc <__gethex+0x2fc>
 80081b2:	4639      	mov	r1, r7
 80081b4:	4628      	mov	r0, r5
 80081b6:	f000 fd52 	bl	8008c5e <__any_on>
 80081ba:	4682      	mov	sl, r0
 80081bc:	2301      	movs	r3, #1
 80081be:	117a      	asrs	r2, r7, #5
 80081c0:	f007 071f 	and.w	r7, r7, #31
 80081c4:	fa03 f707 	lsl.w	r7, r3, r7
 80081c8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80081cc:	4621      	mov	r1, r4
 80081ce:	421f      	tst	r7, r3
 80081d0:	f04f 0702 	mov.w	r7, #2
 80081d4:	4628      	mov	r0, r5
 80081d6:	bf18      	it	ne
 80081d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80081dc:	1b36      	subs	r6, r6, r4
 80081de:	f7ff fe1f 	bl	8007e20 <rshift>
 80081e2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80081e6:	f1ba 0f00 	cmp.w	sl, #0
 80081ea:	d048      	beq.n	800827e <__gethex+0x3be>
 80081ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d015      	beq.n	8008220 <__gethex+0x360>
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d017      	beq.n	8008228 <__gethex+0x368>
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d109      	bne.n	8008210 <__gethex+0x350>
 80081fc:	f01a 0f02 	tst.w	sl, #2
 8008200:	d006      	beq.n	8008210 <__gethex+0x350>
 8008202:	f8d9 3000 	ldr.w	r3, [r9]
 8008206:	ea4a 0a03 	orr.w	sl, sl, r3
 800820a:	f01a 0f01 	tst.w	sl, #1
 800820e:	d10e      	bne.n	800822e <__gethex+0x36e>
 8008210:	f047 0710 	orr.w	r7, r7, #16
 8008214:	e033      	b.n	800827e <__gethex+0x3be>
 8008216:	f04f 0a01 	mov.w	sl, #1
 800821a:	e7cf      	b.n	80081bc <__gethex+0x2fc>
 800821c:	2701      	movs	r7, #1
 800821e:	e7e2      	b.n	80081e6 <__gethex+0x326>
 8008220:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008222:	f1c3 0301 	rsb	r3, r3, #1
 8008226:	9315      	str	r3, [sp, #84]	; 0x54
 8008228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0f0      	beq.n	8008210 <__gethex+0x350>
 800822e:	f04f 0c00 	mov.w	ip, #0
 8008232:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008236:	f105 0314 	add.w	r3, r5, #20
 800823a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800823e:	eb03 010a 	add.w	r1, r3, sl
 8008242:	4618      	mov	r0, r3
 8008244:	f853 2b04 	ldr.w	r2, [r3], #4
 8008248:	f1b2 3fff 	cmp.w	r2, #4294967295
 800824c:	d01c      	beq.n	8008288 <__gethex+0x3c8>
 800824e:	3201      	adds	r2, #1
 8008250:	6002      	str	r2, [r0, #0]
 8008252:	2f02      	cmp	r7, #2
 8008254:	f105 0314 	add.w	r3, r5, #20
 8008258:	d138      	bne.n	80082cc <__gethex+0x40c>
 800825a:	f8d8 2000 	ldr.w	r2, [r8]
 800825e:	3a01      	subs	r2, #1
 8008260:	42b2      	cmp	r2, r6
 8008262:	d10a      	bne.n	800827a <__gethex+0x3ba>
 8008264:	2201      	movs	r2, #1
 8008266:	1171      	asrs	r1, r6, #5
 8008268:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800826c:	f006 061f 	and.w	r6, r6, #31
 8008270:	fa02 f606 	lsl.w	r6, r2, r6
 8008274:	421e      	tst	r6, r3
 8008276:	bf18      	it	ne
 8008278:	4617      	movne	r7, r2
 800827a:	f047 0720 	orr.w	r7, r7, #32
 800827e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008280:	601d      	str	r5, [r3, #0]
 8008282:	9b06      	ldr	r3, [sp, #24]
 8008284:	601c      	str	r4, [r3, #0]
 8008286:	e6a3      	b.n	8007fd0 <__gethex+0x110>
 8008288:	4299      	cmp	r1, r3
 800828a:	f843 cc04 	str.w	ip, [r3, #-4]
 800828e:	d8d8      	bhi.n	8008242 <__gethex+0x382>
 8008290:	68ab      	ldr	r3, [r5, #8]
 8008292:	4599      	cmp	r9, r3
 8008294:	db12      	blt.n	80082bc <__gethex+0x3fc>
 8008296:	6869      	ldr	r1, [r5, #4]
 8008298:	9802      	ldr	r0, [sp, #8]
 800829a:	3101      	adds	r1, #1
 800829c:	f000 f908 	bl	80084b0 <_Balloc>
 80082a0:	4683      	mov	fp, r0
 80082a2:	692a      	ldr	r2, [r5, #16]
 80082a4:	f105 010c 	add.w	r1, r5, #12
 80082a8:	3202      	adds	r2, #2
 80082aa:	0092      	lsls	r2, r2, #2
 80082ac:	300c      	adds	r0, #12
 80082ae:	f7fd fb23 	bl	80058f8 <memcpy>
 80082b2:	4629      	mov	r1, r5
 80082b4:	9802      	ldr	r0, [sp, #8]
 80082b6:	f000 f92f 	bl	8008518 <_Bfree>
 80082ba:	465d      	mov	r5, fp
 80082bc:	692b      	ldr	r3, [r5, #16]
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	612a      	str	r2, [r5, #16]
 80082c2:	2201      	movs	r2, #1
 80082c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80082c8:	615a      	str	r2, [r3, #20]
 80082ca:	e7c2      	b.n	8008252 <__gethex+0x392>
 80082cc:	692a      	ldr	r2, [r5, #16]
 80082ce:	454a      	cmp	r2, r9
 80082d0:	dd0b      	ble.n	80082ea <__gethex+0x42a>
 80082d2:	2101      	movs	r1, #1
 80082d4:	4628      	mov	r0, r5
 80082d6:	f7ff fda3 	bl	8007e20 <rshift>
 80082da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082de:	3401      	adds	r4, #1
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	f6ff aed8 	blt.w	8008096 <__gethex+0x1d6>
 80082e6:	2701      	movs	r7, #1
 80082e8:	e7c7      	b.n	800827a <__gethex+0x3ba>
 80082ea:	f016 061f 	ands.w	r6, r6, #31
 80082ee:	d0fa      	beq.n	80082e6 <__gethex+0x426>
 80082f0:	449a      	add	sl, r3
 80082f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082f6:	f000 f99f 	bl	8008638 <__hi0bits>
 80082fa:	f1c6 0620 	rsb	r6, r6, #32
 80082fe:	42b0      	cmp	r0, r6
 8008300:	dbe7      	blt.n	80082d2 <__gethex+0x412>
 8008302:	e7f0      	b.n	80082e6 <__gethex+0x426>

08008304 <L_shift>:
 8008304:	f1c2 0208 	rsb	r2, r2, #8
 8008308:	0092      	lsls	r2, r2, #2
 800830a:	b570      	push	{r4, r5, r6, lr}
 800830c:	f1c2 0620 	rsb	r6, r2, #32
 8008310:	6843      	ldr	r3, [r0, #4]
 8008312:	6804      	ldr	r4, [r0, #0]
 8008314:	fa03 f506 	lsl.w	r5, r3, r6
 8008318:	432c      	orrs	r4, r5
 800831a:	40d3      	lsrs	r3, r2
 800831c:	6004      	str	r4, [r0, #0]
 800831e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008322:	4288      	cmp	r0, r1
 8008324:	d3f4      	bcc.n	8008310 <L_shift+0xc>
 8008326:	bd70      	pop	{r4, r5, r6, pc}

08008328 <__match>:
 8008328:	b530      	push	{r4, r5, lr}
 800832a:	6803      	ldr	r3, [r0, #0]
 800832c:	3301      	adds	r3, #1
 800832e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008332:	b914      	cbnz	r4, 800833a <__match+0x12>
 8008334:	6003      	str	r3, [r0, #0]
 8008336:	2001      	movs	r0, #1
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800833e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008342:	2d19      	cmp	r5, #25
 8008344:	bf98      	it	ls
 8008346:	3220      	addls	r2, #32
 8008348:	42a2      	cmp	r2, r4
 800834a:	d0f0      	beq.n	800832e <__match+0x6>
 800834c:	2000      	movs	r0, #0
 800834e:	e7f3      	b.n	8008338 <__match+0x10>

08008350 <__hexnan>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	2500      	movs	r5, #0
 8008356:	680b      	ldr	r3, [r1, #0]
 8008358:	4682      	mov	sl, r0
 800835a:	115f      	asrs	r7, r3, #5
 800835c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008360:	f013 031f 	ands.w	r3, r3, #31
 8008364:	bf18      	it	ne
 8008366:	3704      	addne	r7, #4
 8008368:	1f3e      	subs	r6, r7, #4
 800836a:	4690      	mov	r8, r2
 800836c:	46b1      	mov	r9, r6
 800836e:	4634      	mov	r4, r6
 8008370:	46ab      	mov	fp, r5
 8008372:	b087      	sub	sp, #28
 8008374:	6801      	ldr	r1, [r0, #0]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	f847 5c04 	str.w	r5, [r7, #-4]
 800837c:	9502      	str	r5, [sp, #8]
 800837e:	784a      	ldrb	r2, [r1, #1]
 8008380:	1c4b      	adds	r3, r1, #1
 8008382:	9303      	str	r3, [sp, #12]
 8008384:	b342      	cbz	r2, 80083d8 <__hexnan+0x88>
 8008386:	4610      	mov	r0, r2
 8008388:	9105      	str	r1, [sp, #20]
 800838a:	9204      	str	r2, [sp, #16]
 800838c:	f7ff fd83 	bl	8007e96 <__hexdig_fun>
 8008390:	2800      	cmp	r0, #0
 8008392:	d143      	bne.n	800841c <__hexnan+0xcc>
 8008394:	9a04      	ldr	r2, [sp, #16]
 8008396:	9905      	ldr	r1, [sp, #20]
 8008398:	2a20      	cmp	r2, #32
 800839a:	d818      	bhi.n	80083ce <__hexnan+0x7e>
 800839c:	9b02      	ldr	r3, [sp, #8]
 800839e:	459b      	cmp	fp, r3
 80083a0:	dd13      	ble.n	80083ca <__hexnan+0x7a>
 80083a2:	454c      	cmp	r4, r9
 80083a4:	d206      	bcs.n	80083b4 <__hexnan+0x64>
 80083a6:	2d07      	cmp	r5, #7
 80083a8:	dc04      	bgt.n	80083b4 <__hexnan+0x64>
 80083aa:	462a      	mov	r2, r5
 80083ac:	4649      	mov	r1, r9
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7ff ffa8 	bl	8008304 <L_shift>
 80083b4:	4544      	cmp	r4, r8
 80083b6:	d944      	bls.n	8008442 <__hexnan+0xf2>
 80083b8:	2300      	movs	r3, #0
 80083ba:	f1a4 0904 	sub.w	r9, r4, #4
 80083be:	f844 3c04 	str.w	r3, [r4, #-4]
 80083c2:	461d      	mov	r5, r3
 80083c4:	464c      	mov	r4, r9
 80083c6:	f8cd b008 	str.w	fp, [sp, #8]
 80083ca:	9903      	ldr	r1, [sp, #12]
 80083cc:	e7d7      	b.n	800837e <__hexnan+0x2e>
 80083ce:	2a29      	cmp	r2, #41	; 0x29
 80083d0:	d14a      	bne.n	8008468 <__hexnan+0x118>
 80083d2:	3102      	adds	r1, #2
 80083d4:	f8ca 1000 	str.w	r1, [sl]
 80083d8:	f1bb 0f00 	cmp.w	fp, #0
 80083dc:	d044      	beq.n	8008468 <__hexnan+0x118>
 80083de:	454c      	cmp	r4, r9
 80083e0:	d206      	bcs.n	80083f0 <__hexnan+0xa0>
 80083e2:	2d07      	cmp	r5, #7
 80083e4:	dc04      	bgt.n	80083f0 <__hexnan+0xa0>
 80083e6:	462a      	mov	r2, r5
 80083e8:	4649      	mov	r1, r9
 80083ea:	4620      	mov	r0, r4
 80083ec:	f7ff ff8a 	bl	8008304 <L_shift>
 80083f0:	4544      	cmp	r4, r8
 80083f2:	d928      	bls.n	8008446 <__hexnan+0xf6>
 80083f4:	4643      	mov	r3, r8
 80083f6:	f854 2b04 	ldr.w	r2, [r4], #4
 80083fa:	42a6      	cmp	r6, r4
 80083fc:	f843 2b04 	str.w	r2, [r3], #4
 8008400:	d2f9      	bcs.n	80083f6 <__hexnan+0xa6>
 8008402:	2200      	movs	r2, #0
 8008404:	f843 2b04 	str.w	r2, [r3], #4
 8008408:	429e      	cmp	r6, r3
 800840a:	d2fb      	bcs.n	8008404 <__hexnan+0xb4>
 800840c:	6833      	ldr	r3, [r6, #0]
 800840e:	b91b      	cbnz	r3, 8008418 <__hexnan+0xc8>
 8008410:	4546      	cmp	r6, r8
 8008412:	d127      	bne.n	8008464 <__hexnan+0x114>
 8008414:	2301      	movs	r3, #1
 8008416:	6033      	str	r3, [r6, #0]
 8008418:	2005      	movs	r0, #5
 800841a:	e026      	b.n	800846a <__hexnan+0x11a>
 800841c:	3501      	adds	r5, #1
 800841e:	2d08      	cmp	r5, #8
 8008420:	f10b 0b01 	add.w	fp, fp, #1
 8008424:	dd06      	ble.n	8008434 <__hexnan+0xe4>
 8008426:	4544      	cmp	r4, r8
 8008428:	d9cf      	bls.n	80083ca <__hexnan+0x7a>
 800842a:	2300      	movs	r3, #0
 800842c:	2501      	movs	r5, #1
 800842e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008432:	3c04      	subs	r4, #4
 8008434:	6822      	ldr	r2, [r4, #0]
 8008436:	f000 000f 	and.w	r0, r0, #15
 800843a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800843e:	6020      	str	r0, [r4, #0]
 8008440:	e7c3      	b.n	80083ca <__hexnan+0x7a>
 8008442:	2508      	movs	r5, #8
 8008444:	e7c1      	b.n	80083ca <__hexnan+0x7a>
 8008446:	9b01      	ldr	r3, [sp, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d0df      	beq.n	800840c <__hexnan+0xbc>
 800844c:	f04f 32ff 	mov.w	r2, #4294967295
 8008450:	f1c3 0320 	rsb	r3, r3, #32
 8008454:	fa22 f303 	lsr.w	r3, r2, r3
 8008458:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800845c:	401a      	ands	r2, r3
 800845e:	f847 2c04 	str.w	r2, [r7, #-4]
 8008462:	e7d3      	b.n	800840c <__hexnan+0xbc>
 8008464:	3e04      	subs	r6, #4
 8008466:	e7d1      	b.n	800840c <__hexnan+0xbc>
 8008468:	2004      	movs	r0, #4
 800846a:	b007      	add	sp, #28
 800846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008470 <__localeconv_l>:
 8008470:	30f0      	adds	r0, #240	; 0xf0
 8008472:	4770      	bx	lr

08008474 <_localeconv_r>:
 8008474:	4b04      	ldr	r3, [pc, #16]	; (8008488 <_localeconv_r+0x14>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6a18      	ldr	r0, [r3, #32]
 800847a:	4b04      	ldr	r3, [pc, #16]	; (800848c <_localeconv_r+0x18>)
 800847c:	2800      	cmp	r0, #0
 800847e:	bf08      	it	eq
 8008480:	4618      	moveq	r0, r3
 8008482:	30f0      	adds	r0, #240	; 0xf0
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	20000034 	.word	0x20000034
 800848c:	20000098 	.word	0x20000098

08008490 <memchr>:
 8008490:	b510      	push	{r4, lr}
 8008492:	b2c9      	uxtb	r1, r1
 8008494:	4402      	add	r2, r0
 8008496:	4290      	cmp	r0, r2
 8008498:	4603      	mov	r3, r0
 800849a:	d101      	bne.n	80084a0 <memchr+0x10>
 800849c:	2300      	movs	r3, #0
 800849e:	e003      	b.n	80084a8 <memchr+0x18>
 80084a0:	781c      	ldrb	r4, [r3, #0]
 80084a2:	3001      	adds	r0, #1
 80084a4:	428c      	cmp	r4, r1
 80084a6:	d1f6      	bne.n	8008496 <memchr+0x6>
 80084a8:	4618      	mov	r0, r3
 80084aa:	bd10      	pop	{r4, pc}

080084ac <__malloc_lock>:
 80084ac:	4770      	bx	lr

080084ae <__malloc_unlock>:
 80084ae:	4770      	bx	lr

080084b0 <_Balloc>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084b4:	4604      	mov	r4, r0
 80084b6:	460e      	mov	r6, r1
 80084b8:	b93d      	cbnz	r5, 80084ca <_Balloc+0x1a>
 80084ba:	2010      	movs	r0, #16
 80084bc:	f7fd f9fa 	bl	80058b4 <malloc>
 80084c0:	6260      	str	r0, [r4, #36]	; 0x24
 80084c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084c6:	6005      	str	r5, [r0, #0]
 80084c8:	60c5      	str	r5, [r0, #12]
 80084ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80084cc:	68eb      	ldr	r3, [r5, #12]
 80084ce:	b183      	cbz	r3, 80084f2 <_Balloc+0x42>
 80084d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80084d8:	b9b8      	cbnz	r0, 800850a <_Balloc+0x5a>
 80084da:	2101      	movs	r1, #1
 80084dc:	fa01 f506 	lsl.w	r5, r1, r6
 80084e0:	1d6a      	adds	r2, r5, #5
 80084e2:	0092      	lsls	r2, r2, #2
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 fbdb 	bl	8008ca0 <_calloc_r>
 80084ea:	b160      	cbz	r0, 8008506 <_Balloc+0x56>
 80084ec:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80084f0:	e00e      	b.n	8008510 <_Balloc+0x60>
 80084f2:	2221      	movs	r2, #33	; 0x21
 80084f4:	2104      	movs	r1, #4
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fbd2 	bl	8008ca0 <_calloc_r>
 80084fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fe:	60e8      	str	r0, [r5, #12]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e4      	bne.n	80084d0 <_Balloc+0x20>
 8008506:	2000      	movs	r0, #0
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	6802      	ldr	r2, [r0, #0]
 800850c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008510:	2300      	movs	r3, #0
 8008512:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008516:	e7f7      	b.n	8008508 <_Balloc+0x58>

08008518 <_Bfree>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800851c:	4606      	mov	r6, r0
 800851e:	460d      	mov	r5, r1
 8008520:	b93c      	cbnz	r4, 8008532 <_Bfree+0x1a>
 8008522:	2010      	movs	r0, #16
 8008524:	f7fd f9c6 	bl	80058b4 <malloc>
 8008528:	6270      	str	r0, [r6, #36]	; 0x24
 800852a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800852e:	6004      	str	r4, [r0, #0]
 8008530:	60c4      	str	r4, [r0, #12]
 8008532:	b13d      	cbz	r5, 8008544 <_Bfree+0x2c>
 8008534:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008536:	686a      	ldr	r2, [r5, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800853e:	6029      	str	r1, [r5, #0]
 8008540:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008544:	bd70      	pop	{r4, r5, r6, pc}

08008546 <__multadd>:
 8008546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800854a:	461f      	mov	r7, r3
 800854c:	4606      	mov	r6, r0
 800854e:	460c      	mov	r4, r1
 8008550:	2300      	movs	r3, #0
 8008552:	690d      	ldr	r5, [r1, #16]
 8008554:	f101 0c14 	add.w	ip, r1, #20
 8008558:	f8dc 0000 	ldr.w	r0, [ip]
 800855c:	3301      	adds	r3, #1
 800855e:	b281      	uxth	r1, r0
 8008560:	fb02 7101 	mla	r1, r2, r1, r7
 8008564:	0c00      	lsrs	r0, r0, #16
 8008566:	0c0f      	lsrs	r7, r1, #16
 8008568:	fb02 7000 	mla	r0, r2, r0, r7
 800856c:	b289      	uxth	r1, r1
 800856e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008572:	429d      	cmp	r5, r3
 8008574:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008578:	f84c 1b04 	str.w	r1, [ip], #4
 800857c:	dcec      	bgt.n	8008558 <__multadd+0x12>
 800857e:	b1d7      	cbz	r7, 80085b6 <__multadd+0x70>
 8008580:	68a3      	ldr	r3, [r4, #8]
 8008582:	42ab      	cmp	r3, r5
 8008584:	dc12      	bgt.n	80085ac <__multadd+0x66>
 8008586:	6861      	ldr	r1, [r4, #4]
 8008588:	4630      	mov	r0, r6
 800858a:	3101      	adds	r1, #1
 800858c:	f7ff ff90 	bl	80084b0 <_Balloc>
 8008590:	4680      	mov	r8, r0
 8008592:	6922      	ldr	r2, [r4, #16]
 8008594:	f104 010c 	add.w	r1, r4, #12
 8008598:	3202      	adds	r2, #2
 800859a:	0092      	lsls	r2, r2, #2
 800859c:	300c      	adds	r0, #12
 800859e:	f7fd f9ab 	bl	80058f8 <memcpy>
 80085a2:	4621      	mov	r1, r4
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7ff ffb7 	bl	8008518 <_Bfree>
 80085aa:	4644      	mov	r4, r8
 80085ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085b0:	3501      	adds	r5, #1
 80085b2:	615f      	str	r7, [r3, #20]
 80085b4:	6125      	str	r5, [r4, #16]
 80085b6:	4620      	mov	r0, r4
 80085b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085bc <__s2b>:
 80085bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c0:	4615      	mov	r5, r2
 80085c2:	2209      	movs	r2, #9
 80085c4:	461f      	mov	r7, r3
 80085c6:	3308      	adds	r3, #8
 80085c8:	460c      	mov	r4, r1
 80085ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80085ce:	4606      	mov	r6, r0
 80085d0:	2201      	movs	r2, #1
 80085d2:	2100      	movs	r1, #0
 80085d4:	429a      	cmp	r2, r3
 80085d6:	db20      	blt.n	800861a <__s2b+0x5e>
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff ff69 	bl	80084b0 <_Balloc>
 80085de:	9b08      	ldr	r3, [sp, #32]
 80085e0:	2d09      	cmp	r5, #9
 80085e2:	6143      	str	r3, [r0, #20]
 80085e4:	f04f 0301 	mov.w	r3, #1
 80085e8:	6103      	str	r3, [r0, #16]
 80085ea:	dd19      	ble.n	8008620 <__s2b+0x64>
 80085ec:	f104 0809 	add.w	r8, r4, #9
 80085f0:	46c1      	mov	r9, r8
 80085f2:	442c      	add	r4, r5
 80085f4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80085f8:	4601      	mov	r1, r0
 80085fa:	3b30      	subs	r3, #48	; 0x30
 80085fc:	220a      	movs	r2, #10
 80085fe:	4630      	mov	r0, r6
 8008600:	f7ff ffa1 	bl	8008546 <__multadd>
 8008604:	45a1      	cmp	r9, r4
 8008606:	d1f5      	bne.n	80085f4 <__s2b+0x38>
 8008608:	eb08 0405 	add.w	r4, r8, r5
 800860c:	3c08      	subs	r4, #8
 800860e:	1b2d      	subs	r5, r5, r4
 8008610:	1963      	adds	r3, r4, r5
 8008612:	42bb      	cmp	r3, r7
 8008614:	db07      	blt.n	8008626 <__s2b+0x6a>
 8008616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800861a:	0052      	lsls	r2, r2, #1
 800861c:	3101      	adds	r1, #1
 800861e:	e7d9      	b.n	80085d4 <__s2b+0x18>
 8008620:	340a      	adds	r4, #10
 8008622:	2509      	movs	r5, #9
 8008624:	e7f3      	b.n	800860e <__s2b+0x52>
 8008626:	f814 3b01 	ldrb.w	r3, [r4], #1
 800862a:	4601      	mov	r1, r0
 800862c:	3b30      	subs	r3, #48	; 0x30
 800862e:	220a      	movs	r2, #10
 8008630:	4630      	mov	r0, r6
 8008632:	f7ff ff88 	bl	8008546 <__multadd>
 8008636:	e7eb      	b.n	8008610 <__s2b+0x54>

08008638 <__hi0bits>:
 8008638:	0c02      	lsrs	r2, r0, #16
 800863a:	0412      	lsls	r2, r2, #16
 800863c:	4603      	mov	r3, r0
 800863e:	b9b2      	cbnz	r2, 800866e <__hi0bits+0x36>
 8008640:	0403      	lsls	r3, r0, #16
 8008642:	2010      	movs	r0, #16
 8008644:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008648:	bf04      	itt	eq
 800864a:	021b      	lsleq	r3, r3, #8
 800864c:	3008      	addeq	r0, #8
 800864e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008652:	bf04      	itt	eq
 8008654:	011b      	lsleq	r3, r3, #4
 8008656:	3004      	addeq	r0, #4
 8008658:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800865c:	bf04      	itt	eq
 800865e:	009b      	lsleq	r3, r3, #2
 8008660:	3002      	addeq	r0, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	db06      	blt.n	8008674 <__hi0bits+0x3c>
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	d503      	bpl.n	8008672 <__hi0bits+0x3a>
 800866a:	3001      	adds	r0, #1
 800866c:	4770      	bx	lr
 800866e:	2000      	movs	r0, #0
 8008670:	e7e8      	b.n	8008644 <__hi0bits+0xc>
 8008672:	2020      	movs	r0, #32
 8008674:	4770      	bx	lr

08008676 <__lo0bits>:
 8008676:	6803      	ldr	r3, [r0, #0]
 8008678:	4601      	mov	r1, r0
 800867a:	f013 0207 	ands.w	r2, r3, #7
 800867e:	d00b      	beq.n	8008698 <__lo0bits+0x22>
 8008680:	07da      	lsls	r2, r3, #31
 8008682:	d423      	bmi.n	80086cc <__lo0bits+0x56>
 8008684:	0798      	lsls	r0, r3, #30
 8008686:	bf49      	itett	mi
 8008688:	085b      	lsrmi	r3, r3, #1
 800868a:	089b      	lsrpl	r3, r3, #2
 800868c:	2001      	movmi	r0, #1
 800868e:	600b      	strmi	r3, [r1, #0]
 8008690:	bf5c      	itt	pl
 8008692:	600b      	strpl	r3, [r1, #0]
 8008694:	2002      	movpl	r0, #2
 8008696:	4770      	bx	lr
 8008698:	b298      	uxth	r0, r3
 800869a:	b9a8      	cbnz	r0, 80086c8 <__lo0bits+0x52>
 800869c:	2010      	movs	r0, #16
 800869e:	0c1b      	lsrs	r3, r3, #16
 80086a0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086a4:	bf04      	itt	eq
 80086a6:	0a1b      	lsreq	r3, r3, #8
 80086a8:	3008      	addeq	r0, #8
 80086aa:	071a      	lsls	r2, r3, #28
 80086ac:	bf04      	itt	eq
 80086ae:	091b      	lsreq	r3, r3, #4
 80086b0:	3004      	addeq	r0, #4
 80086b2:	079a      	lsls	r2, r3, #30
 80086b4:	bf04      	itt	eq
 80086b6:	089b      	lsreq	r3, r3, #2
 80086b8:	3002      	addeq	r0, #2
 80086ba:	07da      	lsls	r2, r3, #31
 80086bc:	d402      	bmi.n	80086c4 <__lo0bits+0x4e>
 80086be:	085b      	lsrs	r3, r3, #1
 80086c0:	d006      	beq.n	80086d0 <__lo0bits+0x5a>
 80086c2:	3001      	adds	r0, #1
 80086c4:	600b      	str	r3, [r1, #0]
 80086c6:	4770      	bx	lr
 80086c8:	4610      	mov	r0, r2
 80086ca:	e7e9      	b.n	80086a0 <__lo0bits+0x2a>
 80086cc:	2000      	movs	r0, #0
 80086ce:	4770      	bx	lr
 80086d0:	2020      	movs	r0, #32
 80086d2:	4770      	bx	lr

080086d4 <__i2b>:
 80086d4:	b510      	push	{r4, lr}
 80086d6:	460c      	mov	r4, r1
 80086d8:	2101      	movs	r1, #1
 80086da:	f7ff fee9 	bl	80084b0 <_Balloc>
 80086de:	2201      	movs	r2, #1
 80086e0:	6144      	str	r4, [r0, #20]
 80086e2:	6102      	str	r2, [r0, #16]
 80086e4:	bd10      	pop	{r4, pc}

080086e6 <__multiply>:
 80086e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ea:	4614      	mov	r4, r2
 80086ec:	690a      	ldr	r2, [r1, #16]
 80086ee:	6923      	ldr	r3, [r4, #16]
 80086f0:	4688      	mov	r8, r1
 80086f2:	429a      	cmp	r2, r3
 80086f4:	bfbe      	ittt	lt
 80086f6:	460b      	movlt	r3, r1
 80086f8:	46a0      	movlt	r8, r4
 80086fa:	461c      	movlt	r4, r3
 80086fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008700:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008704:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008708:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800870c:	eb07 0609 	add.w	r6, r7, r9
 8008710:	42b3      	cmp	r3, r6
 8008712:	bfb8      	it	lt
 8008714:	3101      	addlt	r1, #1
 8008716:	f7ff fecb 	bl	80084b0 <_Balloc>
 800871a:	f100 0514 	add.w	r5, r0, #20
 800871e:	462b      	mov	r3, r5
 8008720:	2200      	movs	r2, #0
 8008722:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008726:	4573      	cmp	r3, lr
 8008728:	d316      	bcc.n	8008758 <__multiply+0x72>
 800872a:	f104 0214 	add.w	r2, r4, #20
 800872e:	f108 0114 	add.w	r1, r8, #20
 8008732:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008736:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	9b00      	ldr	r3, [sp, #0]
 800873e:	9201      	str	r2, [sp, #4]
 8008740:	4293      	cmp	r3, r2
 8008742:	d80c      	bhi.n	800875e <__multiply+0x78>
 8008744:	2e00      	cmp	r6, #0
 8008746:	dd03      	ble.n	8008750 <__multiply+0x6a>
 8008748:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800874c:	2b00      	cmp	r3, #0
 800874e:	d05d      	beq.n	800880c <__multiply+0x126>
 8008750:	6106      	str	r6, [r0, #16]
 8008752:	b003      	add	sp, #12
 8008754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008758:	f843 2b04 	str.w	r2, [r3], #4
 800875c:	e7e3      	b.n	8008726 <__multiply+0x40>
 800875e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008762:	f1bb 0f00 	cmp.w	fp, #0
 8008766:	d023      	beq.n	80087b0 <__multiply+0xca>
 8008768:	4689      	mov	r9, r1
 800876a:	46ac      	mov	ip, r5
 800876c:	f04f 0800 	mov.w	r8, #0
 8008770:	f859 4b04 	ldr.w	r4, [r9], #4
 8008774:	f8dc a000 	ldr.w	sl, [ip]
 8008778:	b2a3      	uxth	r3, r4
 800877a:	fa1f fa8a 	uxth.w	sl, sl
 800877e:	fb0b a303 	mla	r3, fp, r3, sl
 8008782:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008786:	f8dc 4000 	ldr.w	r4, [ip]
 800878a:	4443      	add	r3, r8
 800878c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008790:	fb0b 840a 	mla	r4, fp, sl, r8
 8008794:	46e2      	mov	sl, ip
 8008796:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800879a:	b29b      	uxth	r3, r3
 800879c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087a0:	454f      	cmp	r7, r9
 80087a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087a6:	f84a 3b04 	str.w	r3, [sl], #4
 80087aa:	d82b      	bhi.n	8008804 <__multiply+0x11e>
 80087ac:	f8cc 8004 	str.w	r8, [ip, #4]
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	3204      	adds	r2, #4
 80087b4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80087b8:	f1ba 0f00 	cmp.w	sl, #0
 80087bc:	d020      	beq.n	8008800 <__multiply+0x11a>
 80087be:	4689      	mov	r9, r1
 80087c0:	46a8      	mov	r8, r5
 80087c2:	f04f 0b00 	mov.w	fp, #0
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	f8b9 c000 	ldrh.w	ip, [r9]
 80087cc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	fb0a 440c 	mla	r4, sl, ip, r4
 80087d6:	46c4      	mov	ip, r8
 80087d8:	445c      	add	r4, fp
 80087da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087de:	f84c 3b04 	str.w	r3, [ip], #4
 80087e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80087e6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80087ea:	0c1b      	lsrs	r3, r3, #16
 80087ec:	fb0a b303 	mla	r3, sl, r3, fp
 80087f0:	454f      	cmp	r7, r9
 80087f2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80087f6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80087fa:	d805      	bhi.n	8008808 <__multiply+0x122>
 80087fc:	f8c8 3004 	str.w	r3, [r8, #4]
 8008800:	3504      	adds	r5, #4
 8008802:	e79b      	b.n	800873c <__multiply+0x56>
 8008804:	46d4      	mov	ip, sl
 8008806:	e7b3      	b.n	8008770 <__multiply+0x8a>
 8008808:	46e0      	mov	r8, ip
 800880a:	e7dd      	b.n	80087c8 <__multiply+0xe2>
 800880c:	3e01      	subs	r6, #1
 800880e:	e799      	b.n	8008744 <__multiply+0x5e>

08008810 <__pow5mult>:
 8008810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008814:	4615      	mov	r5, r2
 8008816:	f012 0203 	ands.w	r2, r2, #3
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	d007      	beq.n	8008830 <__pow5mult+0x20>
 8008820:	4c21      	ldr	r4, [pc, #132]	; (80088a8 <__pow5mult+0x98>)
 8008822:	3a01      	subs	r2, #1
 8008824:	2300      	movs	r3, #0
 8008826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800882a:	f7ff fe8c 	bl	8008546 <__multadd>
 800882e:	4607      	mov	r7, r0
 8008830:	10ad      	asrs	r5, r5, #2
 8008832:	d035      	beq.n	80088a0 <__pow5mult+0x90>
 8008834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008836:	b93c      	cbnz	r4, 8008848 <__pow5mult+0x38>
 8008838:	2010      	movs	r0, #16
 800883a:	f7fd f83b 	bl	80058b4 <malloc>
 800883e:	6270      	str	r0, [r6, #36]	; 0x24
 8008840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008844:	6004      	str	r4, [r0, #0]
 8008846:	60c4      	str	r4, [r0, #12]
 8008848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800884c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008850:	b94c      	cbnz	r4, 8008866 <__pow5mult+0x56>
 8008852:	f240 2171 	movw	r1, #625	; 0x271
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff ff3c 	bl	80086d4 <__i2b>
 800885c:	2300      	movs	r3, #0
 800885e:	4604      	mov	r4, r0
 8008860:	f8c8 0008 	str.w	r0, [r8, #8]
 8008864:	6003      	str	r3, [r0, #0]
 8008866:	f04f 0800 	mov.w	r8, #0
 800886a:	07eb      	lsls	r3, r5, #31
 800886c:	d50a      	bpl.n	8008884 <__pow5mult+0x74>
 800886e:	4639      	mov	r1, r7
 8008870:	4622      	mov	r2, r4
 8008872:	4630      	mov	r0, r6
 8008874:	f7ff ff37 	bl	80086e6 <__multiply>
 8008878:	4681      	mov	r9, r0
 800887a:	4639      	mov	r1, r7
 800887c:	4630      	mov	r0, r6
 800887e:	f7ff fe4b 	bl	8008518 <_Bfree>
 8008882:	464f      	mov	r7, r9
 8008884:	106d      	asrs	r5, r5, #1
 8008886:	d00b      	beq.n	80088a0 <__pow5mult+0x90>
 8008888:	6820      	ldr	r0, [r4, #0]
 800888a:	b938      	cbnz	r0, 800889c <__pow5mult+0x8c>
 800888c:	4622      	mov	r2, r4
 800888e:	4621      	mov	r1, r4
 8008890:	4630      	mov	r0, r6
 8008892:	f7ff ff28 	bl	80086e6 <__multiply>
 8008896:	6020      	str	r0, [r4, #0]
 8008898:	f8c0 8000 	str.w	r8, [r0]
 800889c:	4604      	mov	r4, r0
 800889e:	e7e4      	b.n	800886a <__pow5mult+0x5a>
 80088a0:	4638      	mov	r0, r7
 80088a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a6:	bf00      	nop
 80088a8:	08009458 	.word	0x08009458

080088ac <__lshift>:
 80088ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b0:	460c      	mov	r4, r1
 80088b2:	4607      	mov	r7, r0
 80088b4:	4616      	mov	r6, r2
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088bc:	eb0a 0903 	add.w	r9, sl, r3
 80088c0:	6849      	ldr	r1, [r1, #4]
 80088c2:	68a3      	ldr	r3, [r4, #8]
 80088c4:	f109 0501 	add.w	r5, r9, #1
 80088c8:	42ab      	cmp	r3, r5
 80088ca:	db32      	blt.n	8008932 <__lshift+0x86>
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff fdef 	bl	80084b0 <_Balloc>
 80088d2:	2300      	movs	r3, #0
 80088d4:	4680      	mov	r8, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	f100 0114 	add.w	r1, r0, #20
 80088dc:	4553      	cmp	r3, sl
 80088de:	db2b      	blt.n	8008938 <__lshift+0x8c>
 80088e0:	6920      	ldr	r0, [r4, #16]
 80088e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088e6:	f104 0314 	add.w	r3, r4, #20
 80088ea:	f016 021f 	ands.w	r2, r6, #31
 80088ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088f6:	d025      	beq.n	8008944 <__lshift+0x98>
 80088f8:	2000      	movs	r0, #0
 80088fa:	f1c2 0e20 	rsb	lr, r2, #32
 80088fe:	468a      	mov	sl, r1
 8008900:	681e      	ldr	r6, [r3, #0]
 8008902:	4096      	lsls	r6, r2
 8008904:	4330      	orrs	r0, r6
 8008906:	f84a 0b04 	str.w	r0, [sl], #4
 800890a:	f853 0b04 	ldr.w	r0, [r3], #4
 800890e:	459c      	cmp	ip, r3
 8008910:	fa20 f00e 	lsr.w	r0, r0, lr
 8008914:	d814      	bhi.n	8008940 <__lshift+0x94>
 8008916:	6048      	str	r0, [r1, #4]
 8008918:	b108      	cbz	r0, 800891e <__lshift+0x72>
 800891a:	f109 0502 	add.w	r5, r9, #2
 800891e:	3d01      	subs	r5, #1
 8008920:	4638      	mov	r0, r7
 8008922:	f8c8 5010 	str.w	r5, [r8, #16]
 8008926:	4621      	mov	r1, r4
 8008928:	f7ff fdf6 	bl	8008518 <_Bfree>
 800892c:	4640      	mov	r0, r8
 800892e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008932:	3101      	adds	r1, #1
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	e7c7      	b.n	80088c8 <__lshift+0x1c>
 8008938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800893c:	3301      	adds	r3, #1
 800893e:	e7cd      	b.n	80088dc <__lshift+0x30>
 8008940:	4651      	mov	r1, sl
 8008942:	e7dc      	b.n	80088fe <__lshift+0x52>
 8008944:	3904      	subs	r1, #4
 8008946:	f853 2b04 	ldr.w	r2, [r3], #4
 800894a:	459c      	cmp	ip, r3
 800894c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008950:	d8f9      	bhi.n	8008946 <__lshift+0x9a>
 8008952:	e7e4      	b.n	800891e <__lshift+0x72>

08008954 <__mcmp>:
 8008954:	6903      	ldr	r3, [r0, #16]
 8008956:	690a      	ldr	r2, [r1, #16]
 8008958:	b530      	push	{r4, r5, lr}
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	d10c      	bne.n	8008978 <__mcmp+0x24>
 800895e:	0092      	lsls	r2, r2, #2
 8008960:	3014      	adds	r0, #20
 8008962:	3114      	adds	r1, #20
 8008964:	1884      	adds	r4, r0, r2
 8008966:	4411      	add	r1, r2
 8008968:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800896c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008970:	4295      	cmp	r5, r2
 8008972:	d003      	beq.n	800897c <__mcmp+0x28>
 8008974:	d305      	bcc.n	8008982 <__mcmp+0x2e>
 8008976:	2301      	movs	r3, #1
 8008978:	4618      	mov	r0, r3
 800897a:	bd30      	pop	{r4, r5, pc}
 800897c:	42a0      	cmp	r0, r4
 800897e:	d3f3      	bcc.n	8008968 <__mcmp+0x14>
 8008980:	e7fa      	b.n	8008978 <__mcmp+0x24>
 8008982:	f04f 33ff 	mov.w	r3, #4294967295
 8008986:	e7f7      	b.n	8008978 <__mcmp+0x24>

08008988 <__mdiff>:
 8008988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800898c:	460d      	mov	r5, r1
 800898e:	4607      	mov	r7, r0
 8008990:	4611      	mov	r1, r2
 8008992:	4628      	mov	r0, r5
 8008994:	4614      	mov	r4, r2
 8008996:	f7ff ffdd 	bl	8008954 <__mcmp>
 800899a:	1e06      	subs	r6, r0, #0
 800899c:	d108      	bne.n	80089b0 <__mdiff+0x28>
 800899e:	4631      	mov	r1, r6
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7ff fd85 	bl	80084b0 <_Balloc>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b0:	bfa4      	itt	ge
 80089b2:	4623      	movge	r3, r4
 80089b4:	462c      	movge	r4, r5
 80089b6:	4638      	mov	r0, r7
 80089b8:	6861      	ldr	r1, [r4, #4]
 80089ba:	bfa6      	itte	ge
 80089bc:	461d      	movge	r5, r3
 80089be:	2600      	movge	r6, #0
 80089c0:	2601      	movlt	r6, #1
 80089c2:	f7ff fd75 	bl	80084b0 <_Balloc>
 80089c6:	f04f 0e00 	mov.w	lr, #0
 80089ca:	60c6      	str	r6, [r0, #12]
 80089cc:	692b      	ldr	r3, [r5, #16]
 80089ce:	6926      	ldr	r6, [r4, #16]
 80089d0:	f104 0214 	add.w	r2, r4, #20
 80089d4:	f105 0914 	add.w	r9, r5, #20
 80089d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80089dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80089e0:	f100 0114 	add.w	r1, r0, #20
 80089e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80089e8:	f859 5b04 	ldr.w	r5, [r9], #4
 80089ec:	fa1f f38a 	uxth.w	r3, sl
 80089f0:	4473      	add	r3, lr
 80089f2:	b2ac      	uxth	r4, r5
 80089f4:	1b1b      	subs	r3, r3, r4
 80089f6:	0c2c      	lsrs	r4, r5, #16
 80089f8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80089fc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008a06:	45c8      	cmp	r8, r9
 8008a08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008a0c:	4694      	mov	ip, r2
 8008a0e:	f841 4b04 	str.w	r4, [r1], #4
 8008a12:	d8e7      	bhi.n	80089e4 <__mdiff+0x5c>
 8008a14:	45bc      	cmp	ip, r7
 8008a16:	d304      	bcc.n	8008a22 <__mdiff+0x9a>
 8008a18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a1c:	b183      	cbz	r3, 8008a40 <__mdiff+0xb8>
 8008a1e:	6106      	str	r6, [r0, #16]
 8008a20:	e7c4      	b.n	80089ac <__mdiff+0x24>
 8008a22:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008a26:	b2a2      	uxth	r2, r4
 8008a28:	4472      	add	r2, lr
 8008a2a:	1413      	asrs	r3, r2, #16
 8008a2c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a30:	b292      	uxth	r2, r2
 8008a32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a36:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a3a:	f841 2b04 	str.w	r2, [r1], #4
 8008a3e:	e7e9      	b.n	8008a14 <__mdiff+0x8c>
 8008a40:	3e01      	subs	r6, #1
 8008a42:	e7e9      	b.n	8008a18 <__mdiff+0x90>

08008a44 <__ulp>:
 8008a44:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <__ulp+0x44>)
 8008a46:	400b      	ands	r3, r1
 8008a48:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dd02      	ble.n	8008a56 <__ulp+0x12>
 8008a50:	2000      	movs	r0, #0
 8008a52:	4619      	mov	r1, r3
 8008a54:	4770      	bx	lr
 8008a56:	425b      	negs	r3, r3
 8008a58:	151b      	asrs	r3, r3, #20
 8008a5a:	2b13      	cmp	r3, #19
 8008a5c:	f04f 0000 	mov.w	r0, #0
 8008a60:	f04f 0100 	mov.w	r1, #0
 8008a64:	dc04      	bgt.n	8008a70 <__ulp+0x2c>
 8008a66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008a6a:	fa42 f103 	asr.w	r1, r2, r3
 8008a6e:	4770      	bx	lr
 8008a70:	2201      	movs	r2, #1
 8008a72:	3b14      	subs	r3, #20
 8008a74:	2b1e      	cmp	r3, #30
 8008a76:	bfce      	itee	gt
 8008a78:	4613      	movgt	r3, r2
 8008a7a:	f1c3 031f 	rsble	r3, r3, #31
 8008a7e:	fa02 f303 	lslle.w	r3, r2, r3
 8008a82:	4618      	mov	r0, r3
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	7ff00000 	.word	0x7ff00000

08008a8c <__b2d>:
 8008a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a90:	6907      	ldr	r7, [r0, #16]
 8008a92:	f100 0914 	add.w	r9, r0, #20
 8008a96:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008a9a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008a9e:	f1a7 0804 	sub.w	r8, r7, #4
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff fdc8 	bl	8008638 <__hi0bits>
 8008aa8:	f1c0 0320 	rsb	r3, r0, #32
 8008aac:	280a      	cmp	r0, #10
 8008aae:	600b      	str	r3, [r1, #0]
 8008ab0:	491e      	ldr	r1, [pc, #120]	; (8008b2c <__b2d+0xa0>)
 8008ab2:	dc17      	bgt.n	8008ae4 <__b2d+0x58>
 8008ab4:	45c1      	cmp	r9, r8
 8008ab6:	bf28      	it	cs
 8008ab8:	2200      	movcs	r2, #0
 8008aba:	f1c0 0c0b 	rsb	ip, r0, #11
 8008abe:	fa26 f30c 	lsr.w	r3, r6, ip
 8008ac2:	bf38      	it	cc
 8008ac4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008ac8:	ea43 0501 	orr.w	r5, r3, r1
 8008acc:	f100 0315 	add.w	r3, r0, #21
 8008ad0:	fa06 f303 	lsl.w	r3, r6, r3
 8008ad4:	fa22 f20c 	lsr.w	r2, r2, ip
 8008ad8:	ea43 0402 	orr.w	r4, r3, r2
 8008adc:	4620      	mov	r0, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae4:	45c1      	cmp	r9, r8
 8008ae6:	bf3a      	itte	cc
 8008ae8:	f1a7 0808 	subcc.w	r8, r7, #8
 8008aec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008af0:	2200      	movcs	r2, #0
 8008af2:	f1b0 030b 	subs.w	r3, r0, #11
 8008af6:	d015      	beq.n	8008b24 <__b2d+0x98>
 8008af8:	409e      	lsls	r6, r3
 8008afa:	f1c3 0720 	rsb	r7, r3, #32
 8008afe:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008b02:	fa22 f107 	lsr.w	r1, r2, r7
 8008b06:	45c8      	cmp	r8, r9
 8008b08:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008b0c:	ea46 0501 	orr.w	r5, r6, r1
 8008b10:	bf94      	ite	ls
 8008b12:	2100      	movls	r1, #0
 8008b14:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008b18:	fa02 f003 	lsl.w	r0, r2, r3
 8008b1c:	40f9      	lsrs	r1, r7
 8008b1e:	ea40 0401 	orr.w	r4, r0, r1
 8008b22:	e7db      	b.n	8008adc <__b2d+0x50>
 8008b24:	ea46 0501 	orr.w	r5, r6, r1
 8008b28:	4614      	mov	r4, r2
 8008b2a:	e7d7      	b.n	8008adc <__b2d+0x50>
 8008b2c:	3ff00000 	.word	0x3ff00000

08008b30 <__d2b>:
 8008b30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b34:	461c      	mov	r4, r3
 8008b36:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	4690      	mov	r8, r2
 8008b3e:	f7ff fcb7 	bl	80084b0 <_Balloc>
 8008b42:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008b46:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	bb34      	cbnz	r4, 8008b9c <__d2b+0x6c>
 8008b4e:	9201      	str	r2, [sp, #4]
 8008b50:	f1b8 0200 	subs.w	r2, r8, #0
 8008b54:	d027      	beq.n	8008ba6 <__d2b+0x76>
 8008b56:	a802      	add	r0, sp, #8
 8008b58:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008b5c:	f7ff fd8b 	bl	8008676 <__lo0bits>
 8008b60:	9900      	ldr	r1, [sp, #0]
 8008b62:	b1f0      	cbz	r0, 8008ba2 <__d2b+0x72>
 8008b64:	9a01      	ldr	r2, [sp, #4]
 8008b66:	f1c0 0320 	rsb	r3, r0, #32
 8008b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6e:	430b      	orrs	r3, r1
 8008b70:	40c2      	lsrs	r2, r0
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	9201      	str	r2, [sp, #4]
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bf14      	ite	ne
 8008b7c:	2102      	movne	r1, #2
 8008b7e:	2101      	moveq	r1, #1
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	6139      	str	r1, [r7, #16]
 8008b84:	b1c4      	cbz	r4, 8008bb8 <__d2b+0x88>
 8008b86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008b8a:	4404      	add	r4, r0
 8008b8c:	6034      	str	r4, [r6, #0]
 8008b8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b92:	6028      	str	r0, [r5, #0]
 8008b94:	4638      	mov	r0, r7
 8008b96:	b002      	add	sp, #8
 8008b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008ba0:	e7d5      	b.n	8008b4e <__d2b+0x1e>
 8008ba2:	6179      	str	r1, [r7, #20]
 8008ba4:	e7e7      	b.n	8008b76 <__d2b+0x46>
 8008ba6:	a801      	add	r0, sp, #4
 8008ba8:	f7ff fd65 	bl	8008676 <__lo0bits>
 8008bac:	2101      	movs	r1, #1
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	6139      	str	r1, [r7, #16]
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	3020      	adds	r0, #32
 8008bb6:	e7e5      	b.n	8008b84 <__d2b+0x54>
 8008bb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bbc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008bc0:	6030      	str	r0, [r6, #0]
 8008bc2:	6918      	ldr	r0, [r3, #16]
 8008bc4:	f7ff fd38 	bl	8008638 <__hi0bits>
 8008bc8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008bcc:	e7e1      	b.n	8008b92 <__d2b+0x62>

08008bce <__ratio>:
 8008bce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd2:	4688      	mov	r8, r1
 8008bd4:	4669      	mov	r1, sp
 8008bd6:	4681      	mov	r9, r0
 8008bd8:	f7ff ff58 	bl	8008a8c <__b2d>
 8008bdc:	468b      	mov	fp, r1
 8008bde:	4606      	mov	r6, r0
 8008be0:	460f      	mov	r7, r1
 8008be2:	4640      	mov	r0, r8
 8008be4:	a901      	add	r1, sp, #4
 8008be6:	f7ff ff51 	bl	8008a8c <__b2d>
 8008bea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008bf2:	460d      	mov	r5, r1
 8008bf4:	eba3 0c02 	sub.w	ip, r3, r2
 8008bf8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	bfd5      	itete	le
 8008c06:	460a      	movle	r2, r1
 8008c08:	463a      	movgt	r2, r7
 8008c0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c0e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008c12:	bfd8      	it	le
 8008c14:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008c18:	462b      	mov	r3, r5
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	4659      	mov	r1, fp
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7f7 fd9e 	bl	8000760 <__aeabi_ddiv>
 8008c24:	b003      	add	sp, #12
 8008c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c2a <__copybits>:
 8008c2a:	3901      	subs	r1, #1
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	1149      	asrs	r1, r1, #5
 8008c30:	6914      	ldr	r4, [r2, #16]
 8008c32:	3101      	adds	r1, #1
 8008c34:	f102 0314 	add.w	r3, r2, #20
 8008c38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	4602      	mov	r2, r0
 8008c44:	d303      	bcc.n	8008c4e <__copybits+0x24>
 8008c46:	2300      	movs	r3, #0
 8008c48:	428a      	cmp	r2, r1
 8008c4a:	d305      	bcc.n	8008c58 <__copybits+0x2e>
 8008c4c:	bd10      	pop	{r4, pc}
 8008c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c52:	f840 2b04 	str.w	r2, [r0], #4
 8008c56:	e7f3      	b.n	8008c40 <__copybits+0x16>
 8008c58:	f842 3b04 	str.w	r3, [r2], #4
 8008c5c:	e7f4      	b.n	8008c48 <__copybits+0x1e>

08008c5e <__any_on>:
 8008c5e:	f100 0214 	add.w	r2, r0, #20
 8008c62:	6900      	ldr	r0, [r0, #16]
 8008c64:	114b      	asrs	r3, r1, #5
 8008c66:	4298      	cmp	r0, r3
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	db11      	blt.n	8008c90 <__any_on+0x32>
 8008c6c:	dd0a      	ble.n	8008c84 <__any_on+0x26>
 8008c6e:	f011 011f 	ands.w	r1, r1, #31
 8008c72:	d007      	beq.n	8008c84 <__any_on+0x26>
 8008c74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c78:	fa24 f001 	lsr.w	r0, r4, r1
 8008c7c:	fa00 f101 	lsl.w	r1, r0, r1
 8008c80:	428c      	cmp	r4, r1
 8008c82:	d10b      	bne.n	8008c9c <__any_on+0x3e>
 8008c84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d803      	bhi.n	8008c94 <__any_on+0x36>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	bd10      	pop	{r4, pc}
 8008c90:	4603      	mov	r3, r0
 8008c92:	e7f7      	b.n	8008c84 <__any_on+0x26>
 8008c94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	d0f5      	beq.n	8008c88 <__any_on+0x2a>
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	e7f6      	b.n	8008c8e <__any_on+0x30>

08008ca0 <_calloc_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	fb02 f401 	mul.w	r4, r2, r1
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	f7fc fe86 	bl	80059b8 <_malloc_r>
 8008cac:	4605      	mov	r5, r0
 8008cae:	b118      	cbz	r0, 8008cb8 <_calloc_r+0x18>
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	f7fc fe2b 	bl	800590e <memset>
 8008cb8:	4628      	mov	r0, r5
 8008cba:	bd38      	pop	{r3, r4, r5, pc}

08008cbc <_realloc_r>:
 8008cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	4614      	mov	r4, r2
 8008cc2:	460e      	mov	r6, r1
 8008cc4:	b921      	cbnz	r1, 8008cd0 <_realloc_r+0x14>
 8008cc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008cca:	4611      	mov	r1, r2
 8008ccc:	f7fc be74 	b.w	80059b8 <_malloc_r>
 8008cd0:	b922      	cbnz	r2, 8008cdc <_realloc_r+0x20>
 8008cd2:	f7fc fe25 	bl	8005920 <_free_r>
 8008cd6:	4625      	mov	r5, r4
 8008cd8:	4628      	mov	r0, r5
 8008cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cdc:	f000 f97f 	bl	8008fde <_malloc_usable_size_r>
 8008ce0:	42a0      	cmp	r0, r4
 8008ce2:	d20f      	bcs.n	8008d04 <_realloc_r+0x48>
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	f7fc fe66 	bl	80059b8 <_malloc_r>
 8008cec:	4605      	mov	r5, r0
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d0f2      	beq.n	8008cd8 <_realloc_r+0x1c>
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	f7fc fdff 	bl	80058f8 <memcpy>
 8008cfa:	4631      	mov	r1, r6
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f7fc fe0f 	bl	8005920 <_free_r>
 8008d02:	e7e9      	b.n	8008cd8 <_realloc_r+0x1c>
 8008d04:	4635      	mov	r5, r6
 8008d06:	e7e7      	b.n	8008cd8 <_realloc_r+0x1c>

08008d08 <__ssputs_r>:
 8008d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d0c:	688e      	ldr	r6, [r1, #8]
 8008d0e:	4682      	mov	sl, r0
 8008d10:	429e      	cmp	r6, r3
 8008d12:	460c      	mov	r4, r1
 8008d14:	4690      	mov	r8, r2
 8008d16:	4699      	mov	r9, r3
 8008d18:	d837      	bhi.n	8008d8a <__ssputs_r+0x82>
 8008d1a:	898a      	ldrh	r2, [r1, #12]
 8008d1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d20:	d031      	beq.n	8008d86 <__ssputs_r+0x7e>
 8008d22:	2302      	movs	r3, #2
 8008d24:	6825      	ldr	r5, [r4, #0]
 8008d26:	6909      	ldr	r1, [r1, #16]
 8008d28:	1a6f      	subs	r7, r5, r1
 8008d2a:	6965      	ldr	r5, [r4, #20]
 8008d2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d30:	fb95 f5f3 	sdiv	r5, r5, r3
 8008d34:	f109 0301 	add.w	r3, r9, #1
 8008d38:	443b      	add	r3, r7
 8008d3a:	429d      	cmp	r5, r3
 8008d3c:	bf38      	it	cc
 8008d3e:	461d      	movcc	r5, r3
 8008d40:	0553      	lsls	r3, r2, #21
 8008d42:	d530      	bpl.n	8008da6 <__ssputs_r+0x9e>
 8008d44:	4629      	mov	r1, r5
 8008d46:	f7fc fe37 	bl	80059b8 <_malloc_r>
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	b950      	cbnz	r0, 8008d64 <__ssputs_r+0x5c>
 8008d4e:	230c      	movs	r3, #12
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	f8ca 3000 	str.w	r3, [sl]
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d64:	463a      	mov	r2, r7
 8008d66:	6921      	ldr	r1, [r4, #16]
 8008d68:	f7fc fdc6 	bl	80058f8 <memcpy>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d76:	81a3      	strh	r3, [r4, #12]
 8008d78:	6126      	str	r6, [r4, #16]
 8008d7a:	443e      	add	r6, r7
 8008d7c:	6026      	str	r6, [r4, #0]
 8008d7e:	464e      	mov	r6, r9
 8008d80:	6165      	str	r5, [r4, #20]
 8008d82:	1bed      	subs	r5, r5, r7
 8008d84:	60a5      	str	r5, [r4, #8]
 8008d86:	454e      	cmp	r6, r9
 8008d88:	d900      	bls.n	8008d8c <__ssputs_r+0x84>
 8008d8a:	464e      	mov	r6, r9
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	4641      	mov	r1, r8
 8008d90:	6820      	ldr	r0, [r4, #0]
 8008d92:	f000 f90b 	bl	8008fac <memmove>
 8008d96:	68a3      	ldr	r3, [r4, #8]
 8008d98:	2000      	movs	r0, #0
 8008d9a:	1b9b      	subs	r3, r3, r6
 8008d9c:	60a3      	str	r3, [r4, #8]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	441e      	add	r6, r3
 8008da2:	6026      	str	r6, [r4, #0]
 8008da4:	e7dc      	b.n	8008d60 <__ssputs_r+0x58>
 8008da6:	462a      	mov	r2, r5
 8008da8:	f7ff ff88 	bl	8008cbc <_realloc_r>
 8008dac:	4606      	mov	r6, r0
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d1e2      	bne.n	8008d78 <__ssputs_r+0x70>
 8008db2:	6921      	ldr	r1, [r4, #16]
 8008db4:	4650      	mov	r0, sl
 8008db6:	f7fc fdb3 	bl	8005920 <_free_r>
 8008dba:	e7c8      	b.n	8008d4e <__ssputs_r+0x46>

08008dbc <_svfiprintf_r>:
 8008dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	461d      	mov	r5, r3
 8008dc2:	898b      	ldrh	r3, [r1, #12]
 8008dc4:	b09d      	sub	sp, #116	; 0x74
 8008dc6:	061f      	lsls	r7, r3, #24
 8008dc8:	4680      	mov	r8, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	4616      	mov	r6, r2
 8008dce:	d50f      	bpl.n	8008df0 <_svfiprintf_r+0x34>
 8008dd0:	690b      	ldr	r3, [r1, #16]
 8008dd2:	b96b      	cbnz	r3, 8008df0 <_svfiprintf_r+0x34>
 8008dd4:	2140      	movs	r1, #64	; 0x40
 8008dd6:	f7fc fdef 	bl	80059b8 <_malloc_r>
 8008dda:	6020      	str	r0, [r4, #0]
 8008ddc:	6120      	str	r0, [r4, #16]
 8008dde:	b928      	cbnz	r0, 8008dec <_svfiprintf_r+0x30>
 8008de0:	230c      	movs	r3, #12
 8008de2:	f8c8 3000 	str.w	r3, [r8]
 8008de6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dea:	e0c8      	b.n	8008f7e <_svfiprintf_r+0x1c2>
 8008dec:	2340      	movs	r3, #64	; 0x40
 8008dee:	6163      	str	r3, [r4, #20]
 8008df0:	2300      	movs	r3, #0
 8008df2:	9309      	str	r3, [sp, #36]	; 0x24
 8008df4:	2320      	movs	r3, #32
 8008df6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dfa:	2330      	movs	r3, #48	; 0x30
 8008dfc:	f04f 0b01 	mov.w	fp, #1
 8008e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e04:	9503      	str	r5, [sp, #12]
 8008e06:	4637      	mov	r7, r6
 8008e08:	463d      	mov	r5, r7
 8008e0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e0e:	b10b      	cbz	r3, 8008e14 <_svfiprintf_r+0x58>
 8008e10:	2b25      	cmp	r3, #37	; 0x25
 8008e12:	d13e      	bne.n	8008e92 <_svfiprintf_r+0xd6>
 8008e14:	ebb7 0a06 	subs.w	sl, r7, r6
 8008e18:	d00b      	beq.n	8008e32 <_svfiprintf_r+0x76>
 8008e1a:	4653      	mov	r3, sl
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	4621      	mov	r1, r4
 8008e20:	4640      	mov	r0, r8
 8008e22:	f7ff ff71 	bl	8008d08 <__ssputs_r>
 8008e26:	3001      	adds	r0, #1
 8008e28:	f000 80a4 	beq.w	8008f74 <_svfiprintf_r+0x1b8>
 8008e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2e:	4453      	add	r3, sl
 8008e30:	9309      	str	r3, [sp, #36]	; 0x24
 8008e32:	783b      	ldrb	r3, [r7, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 809d 	beq.w	8008f74 <_svfiprintf_r+0x1b8>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	9307      	str	r3, [sp, #28]
 8008e48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e4c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e4e:	462f      	mov	r7, r5
 8008e50:	2205      	movs	r2, #5
 8008e52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008e56:	4850      	ldr	r0, [pc, #320]	; (8008f98 <_svfiprintf_r+0x1dc>)
 8008e58:	f7ff fb1a 	bl	8008490 <memchr>
 8008e5c:	9b04      	ldr	r3, [sp, #16]
 8008e5e:	b9d0      	cbnz	r0, 8008e96 <_svfiprintf_r+0xda>
 8008e60:	06d9      	lsls	r1, r3, #27
 8008e62:	bf44      	itt	mi
 8008e64:	2220      	movmi	r2, #32
 8008e66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e6a:	071a      	lsls	r2, r3, #28
 8008e6c:	bf44      	itt	mi
 8008e6e:	222b      	movmi	r2, #43	; 0x2b
 8008e70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e74:	782a      	ldrb	r2, [r5, #0]
 8008e76:	2a2a      	cmp	r2, #42	; 0x2a
 8008e78:	d015      	beq.n	8008ea6 <_svfiprintf_r+0xea>
 8008e7a:	462f      	mov	r7, r5
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	250a      	movs	r5, #10
 8008e80:	9a07      	ldr	r2, [sp, #28]
 8008e82:	4639      	mov	r1, r7
 8008e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e88:	3b30      	subs	r3, #48	; 0x30
 8008e8a:	2b09      	cmp	r3, #9
 8008e8c:	d94d      	bls.n	8008f2a <_svfiprintf_r+0x16e>
 8008e8e:	b1b8      	cbz	r0, 8008ec0 <_svfiprintf_r+0x104>
 8008e90:	e00f      	b.n	8008eb2 <_svfiprintf_r+0xf6>
 8008e92:	462f      	mov	r7, r5
 8008e94:	e7b8      	b.n	8008e08 <_svfiprintf_r+0x4c>
 8008e96:	4a40      	ldr	r2, [pc, #256]	; (8008f98 <_svfiprintf_r+0x1dc>)
 8008e98:	463d      	mov	r5, r7
 8008e9a:	1a80      	subs	r0, r0, r2
 8008e9c:	fa0b f000 	lsl.w	r0, fp, r0
 8008ea0:	4318      	orrs	r0, r3
 8008ea2:	9004      	str	r0, [sp, #16]
 8008ea4:	e7d3      	b.n	8008e4e <_svfiprintf_r+0x92>
 8008ea6:	9a03      	ldr	r2, [sp, #12]
 8008ea8:	1d11      	adds	r1, r2, #4
 8008eaa:	6812      	ldr	r2, [r2, #0]
 8008eac:	9103      	str	r1, [sp, #12]
 8008eae:	2a00      	cmp	r2, #0
 8008eb0:	db01      	blt.n	8008eb6 <_svfiprintf_r+0xfa>
 8008eb2:	9207      	str	r2, [sp, #28]
 8008eb4:	e004      	b.n	8008ec0 <_svfiprintf_r+0x104>
 8008eb6:	4252      	negs	r2, r2
 8008eb8:	f043 0302 	orr.w	r3, r3, #2
 8008ebc:	9207      	str	r2, [sp, #28]
 8008ebe:	9304      	str	r3, [sp, #16]
 8008ec0:	783b      	ldrb	r3, [r7, #0]
 8008ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ec4:	d10c      	bne.n	8008ee0 <_svfiprintf_r+0x124>
 8008ec6:	787b      	ldrb	r3, [r7, #1]
 8008ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eca:	d133      	bne.n	8008f34 <_svfiprintf_r+0x178>
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	3702      	adds	r7, #2
 8008ed0:	1d1a      	adds	r2, r3, #4
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	9203      	str	r2, [sp, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bfb8      	it	lt
 8008eda:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ede:	9305      	str	r3, [sp, #20]
 8008ee0:	4d2e      	ldr	r5, [pc, #184]	; (8008f9c <_svfiprintf_r+0x1e0>)
 8008ee2:	2203      	movs	r2, #3
 8008ee4:	7839      	ldrb	r1, [r7, #0]
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f7ff fad2 	bl	8008490 <memchr>
 8008eec:	b138      	cbz	r0, 8008efe <_svfiprintf_r+0x142>
 8008eee:	2340      	movs	r3, #64	; 0x40
 8008ef0:	1b40      	subs	r0, r0, r5
 8008ef2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	3701      	adds	r7, #1
 8008efa:	4303      	orrs	r3, r0
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	7839      	ldrb	r1, [r7, #0]
 8008f00:	2206      	movs	r2, #6
 8008f02:	4827      	ldr	r0, [pc, #156]	; (8008fa0 <_svfiprintf_r+0x1e4>)
 8008f04:	1c7e      	adds	r6, r7, #1
 8008f06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f0a:	f7ff fac1 	bl	8008490 <memchr>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d038      	beq.n	8008f84 <_svfiprintf_r+0x1c8>
 8008f12:	4b24      	ldr	r3, [pc, #144]	; (8008fa4 <_svfiprintf_r+0x1e8>)
 8008f14:	bb13      	cbnz	r3, 8008f5c <_svfiprintf_r+0x1a0>
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	3307      	adds	r3, #7
 8008f1a:	f023 0307 	bic.w	r3, r3, #7
 8008f1e:	3308      	adds	r3, #8
 8008f20:	9303      	str	r3, [sp, #12]
 8008f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f24:	444b      	add	r3, r9
 8008f26:	9309      	str	r3, [sp, #36]	; 0x24
 8008f28:	e76d      	b.n	8008e06 <_svfiprintf_r+0x4a>
 8008f2a:	fb05 3202 	mla	r2, r5, r2, r3
 8008f2e:	2001      	movs	r0, #1
 8008f30:	460f      	mov	r7, r1
 8008f32:	e7a6      	b.n	8008e82 <_svfiprintf_r+0xc6>
 8008f34:	2300      	movs	r3, #0
 8008f36:	250a      	movs	r5, #10
 8008f38:	4619      	mov	r1, r3
 8008f3a:	3701      	adds	r7, #1
 8008f3c:	9305      	str	r3, [sp, #20]
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f44:	3a30      	subs	r2, #48	; 0x30
 8008f46:	2a09      	cmp	r2, #9
 8008f48:	d903      	bls.n	8008f52 <_svfiprintf_r+0x196>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0c8      	beq.n	8008ee0 <_svfiprintf_r+0x124>
 8008f4e:	9105      	str	r1, [sp, #20]
 8008f50:	e7c6      	b.n	8008ee0 <_svfiprintf_r+0x124>
 8008f52:	fb05 2101 	mla	r1, r5, r1, r2
 8008f56:	2301      	movs	r3, #1
 8008f58:	4607      	mov	r7, r0
 8008f5a:	e7f0      	b.n	8008f3e <_svfiprintf_r+0x182>
 8008f5c:	ab03      	add	r3, sp, #12
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	4622      	mov	r2, r4
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <_svfiprintf_r+0x1ec>)
 8008f64:	a904      	add	r1, sp, #16
 8008f66:	4640      	mov	r0, r8
 8008f68:	f7fc fe12 	bl	8005b90 <_printf_float>
 8008f6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f70:	4681      	mov	r9, r0
 8008f72:	d1d6      	bne.n	8008f22 <_svfiprintf_r+0x166>
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	065b      	lsls	r3, r3, #25
 8008f78:	f53f af35 	bmi.w	8008de6 <_svfiprintf_r+0x2a>
 8008f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f7e:	b01d      	add	sp, #116	; 0x74
 8008f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f84:	ab03      	add	r3, sp, #12
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4b07      	ldr	r3, [pc, #28]	; (8008fa8 <_svfiprintf_r+0x1ec>)
 8008f8c:	a904      	add	r1, sp, #16
 8008f8e:	4640      	mov	r0, r8
 8008f90:	f7fd f8aa 	bl	80060e8 <_printf_i>
 8008f94:	e7ea      	b.n	8008f6c <_svfiprintf_r+0x1b0>
 8008f96:	bf00      	nop
 8008f98:	08009464 	.word	0x08009464
 8008f9c:	0800946a 	.word	0x0800946a
 8008fa0:	0800946e 	.word	0x0800946e
 8008fa4:	08005b91 	.word	0x08005b91
 8008fa8:	08008d09 	.word	0x08008d09

08008fac <memmove>:
 8008fac:	4288      	cmp	r0, r1
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	eb01 0302 	add.w	r3, r1, r2
 8008fb4:	d807      	bhi.n	8008fc6 <memmove+0x1a>
 8008fb6:	1e42      	subs	r2, r0, #1
 8008fb8:	4299      	cmp	r1, r3
 8008fba:	d00a      	beq.n	8008fd2 <memmove+0x26>
 8008fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fc0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008fc4:	e7f8      	b.n	8008fb8 <memmove+0xc>
 8008fc6:	4283      	cmp	r3, r0
 8008fc8:	d9f5      	bls.n	8008fb6 <memmove+0xa>
 8008fca:	1881      	adds	r1, r0, r2
 8008fcc:	1ad2      	subs	r2, r2, r3
 8008fce:	42d3      	cmn	r3, r2
 8008fd0:	d100      	bne.n	8008fd4 <memmove+0x28>
 8008fd2:	bd10      	pop	{r4, pc}
 8008fd4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fd8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008fdc:	e7f7      	b.n	8008fce <memmove+0x22>

08008fde <_malloc_usable_size_r>:
 8008fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe2:	1f18      	subs	r0, r3, #4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bfbc      	itt	lt
 8008fe8:	580b      	ldrlt	r3, [r1, r0]
 8008fea:	18c0      	addlt	r0, r0, r3
 8008fec:	4770      	bx	lr
	...

08008ff0 <_init>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	bf00      	nop
 8008ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff6:	bc08      	pop	{r3}
 8008ff8:	469e      	mov	lr, r3
 8008ffa:	4770      	bx	lr

08008ffc <_fini>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	bf00      	nop
 8009000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009002:	bc08      	pop	{r3}
 8009004:	469e      	mov	lr, r3
 8009006:	4770      	bx	lr
